[
  {
    "id": 54,
    "content": "Kismet service manager has blocking synchronous operations, hardcoded paths, and lacks timeout handling which can cause performance bottlenecks",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:57:22.575Z",
    "tags": [],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "performance/services",
      "summary": "Service management bottlenecks in Kismet",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "KismetServiceManager",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 53,
    "content": "WebSocket server analysis: Basic implementation with message compression enabled but lacks connection pooling, heartbeat mechanism, backpressure handling, and memory leak protection",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:57:07.739Z",
    "tags": [],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "performance/websockets",
      "summary": "WebSocket performance bottlenecks identified",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "WebSocketServer",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 52,
    "content": "Argos project structure analysis: SvelteKit-based RF monitoring system with multiple hardware integrations (HackRF, USRP, WiFi adapters), database management, and complex service orchestration",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:56:58.247Z",
    "tags": [],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/overview",
      "summary": "Argos architecture overview",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "SvelteKit",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 51,
    "content": "Starting comprehensive performance analysis of Argos project - a multi-component RF/GSM monitoring system with web interface, hardware integration (HackRF, USRP), and various services",
    "memory_type": "context",
    "session_id": null,
    "timestamp": "2025-07-23T11:56:44.299Z",
    "tags": [],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "performance/initialization",
      "summary": "Argos performance analysis initialization",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "Argos",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 50,
    "content": "COMPREHENSIVE SECURITY ANALYSIS COMPLETE: Argos project has significant security vulnerabilities including: 1) No authentication on WebSocket connections, 2) Basic auth with default credentials, 3) CORS enabled without restrictions, 4) No encryption at rest, 5) SQL injection vulnerability in dynamic Python scripts, 6) Privilege escalation via sudo in web APIs, 7) No rate limiting on API endpoints, 8) No hardware access controls for RF operations, 9) Process spawning without validation, 10) Hardcoded credentials and paths",
    "memory_type": "result",
    "session_id": null,
    "timestamp": "2025-07-23T11:55:17.543Z",
    "tags": [
      "security-analysis",
      "vulnerabilities",
      "authentication",
      "authorization",
      "encryption",
      "argos"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/comprehensive-analysis",
      "summary": "Complete Argos security analysis with critical vulnerabilities identified",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "ArgosProject",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 49,
    "content": "Privilege escalation security issue: Argos uses sudo extensively in drone ID operations - network interface configuration, process management, and Python execution with elevated privileges. Web API endpoints can trigger sudo commands, potential privilege escalation vector",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:55:08.229Z",
    "tags": [
      "privilege-escalation",
      "sudo",
      "security",
      "web-api",
      "drone-operations"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/privilege-escalation",
      "summary": "Privilege escalation security analysis",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "WebAPI",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 48,
    "content": "Hardware security analysis: ProcessManager spawns HackRF/USRP processes with NO access controls, uses spawn() with shell scripts, no frequency range validation, no power limits, no hardware ownership verification, processes run with inherited privileges",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:54:56.324Z",
    "tags": [
      "hardware-security",
      "rf-operations",
      "process-management",
      "access-control",
      "sdr"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/hardware",
      "summary": "Hardware security analysis - RF device access controls",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "ProcessManager",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 47,
    "content": "Kismet authentication analysis: Uses dual authentication (Basic Auth + API Key), hardcoded default credentials (admin/admin), API key from environment variable, Base64 encoding for basic auth, KISMET header for API key, but no token rotation or session management",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:54:26.149Z",
    "tags": [
      "authentication",
      "kismet",
      "basic-auth",
      "api-key",
      "credentials"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/authentication",
      "summary": "Kismet authentication implementation",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "KismetProxy",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 46,
    "content": "Database security analysis: Argos uses SQLite with better-sqlite3, implements parameterized queries in some places but dangerous Python script generation with string interpolation in cell tower API, hardcoded database paths, no encryption at rest, potential SQL injection via dynamic Python script generation",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:54:02.608Z",
    "tags": [
      "database",
      "sqlite",
      "sql-injection",
      "parameterized-queries",
      "security"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/database",
      "summary": "Argos database security implementation analysis",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "SQLiteDatabase",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 45,
    "content": "Argos input validation system uses TypeScript type guards for runtime validation - validates WebSocket messages, sweep data, device info, status messages. No SQL injection protection, no XSS prevention, limited to type checking rather than content sanitization",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:53:42.848Z",
    "tags": [
      "input-validation",
      "type-guards",
      "typescript",
      "security",
      "data-validation"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/input-validation",
      "summary": "Argos input validation using TypeScript type guards",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "InputValidation",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 44,
    "content": "Argos logging system implements rate limiting mechanism - 60 requests per minute per key default, circular buffer for memory efficiency, rate limit cleanup every minute, but applied only to logging operations not API requests",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:53:29.594Z",
    "tags": [
      "rate-limiting",
      "logging",
      "security",
      "memory-management"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/rate-limiting",
      "summary": "Argos logging system with rate limiting",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "Logger",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 43,
    "content": "Argos WebSocket security analysis: No authentication on WebSocket connections, client filtering by URL parameters only, basic subscription model, security headers implemented (Permissions-Policy), proper error handling with error ID generation but no rate limiting or connection validation",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:52:59.897Z",
    "tags": [
      "websocket",
      "security",
      "authentication",
      "error-handling",
      "headers"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/websocket",
      "summary": "Argos WebSocket security implementation analysis",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "WebSocketServer",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 42,
    "content": "GSM Evil Server implements basic CORS policy with cors() middleware - allows all origins, no restrictions, no proper CORS configuration for production security. Uses WebSocket for real-time GSM data streaming without authentication",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:52:28.252Z",
    "tags": [
      "cors",
      "gsm-evil",
      "websocket",
      "middleware",
      "security"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/cors",
      "summary": "GSM Evil Server CORS and WebSocket implementation",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "GSMEvilServer",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 41,
    "content": "Kismet API Client implements basic authentication mechanism - uses Bearer token authentication, simplified auth token handling (\"authenticated\" as demo token), no robust session management, supports real-time event streaming via EventSource",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:52:12.302Z",
    "tags": [
      "authentication",
      "kismet",
      "api-client",
      "bearer-token",
      "websocket"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/authentication",
      "summary": "Kismet API Client authentication implementation",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "KismetAPIClient",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 40,
    "content": "Found comprehensive Security Analyzer implementation in Argos - WiFi threat detection system with rogue AP detection, attack pattern recognition (evil twin, deauth, WPS, karma attacks), vulnerability scoring, and security assessment framework",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:51:48.883Z",
    "tags": [
      "security",
      "wifi",
      "threat-detection",
      "vulnerability-assessment",
      "argos"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/wifi-analysis",
      "summary": "Argos Security Analyzer - WiFi threat detection and vulnerability assessment",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "SecurityAnalyzer",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 39,
    "content": "Starting comprehensive security analysis of Argos project - focusing on authentication, authorization, encryption, API security, and RF hardware security",
    "memory_type": "context",
    "session_id": null,
    "timestamp": "2025-07-23T11:51:10.566Z",
    "tags": [
      "security",
      "argos",
      "analysis",
      "authentication",
      "authorization",
      "encryption"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "security/analysis",
      "summary": "Initiating Argos security analysis",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "Argos",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 38,
    "content": "Argos WebSocket Error Handling and Reconnection Strategies\n\nThe Argos project implements comprehensive error handling and reconnection strategies across all WebSocket implementations:\n\nBASE WEBSOCKET ERROR HANDLING:\n- Error event capture with Error object creation\n- Event emission to registered listeners with context\n- Connection error differentiation (network vs application)\n- Heartbeat timeout detection and automatic disconnection\n- Intentional vs unintentional close detection\n\nRECONNECTION STRATEGY PATTERNS:\n1. Exponential Backoff Algorithm:\n   - Initial interval: 1 second (configurable)\n   - Backoff multiplier: 1.5x (configurable)\n   - Maximum interval: 30 seconds (configurable)\n   - Infinite attempts by default (-1 = unlimited)\n   - Reset on successful connection\n\n2. Circuit Breaker Pattern:\n   - Maximum reconnection attempts enforcement\n   - Connection attempt counting\n   - Service status validation before reconnection\n   - Graceful degradation when limits exceeded\n\nKISMET-SPECIFIC ERROR HANDLING:\n- HTTP API error handling with status code checking\n- Polling error recovery with continued operation\n- Device parsing error isolation (per-device failures don't stop processing)\n- WebSocket client error logging with context preservation\n- Cache corruption protection with validation\n\nHACKRF ERROR HANDLING:\n- Type guard validation failures with detailed logging\n- Store update error isolation (prevents UI crashes)\n- Sequence number gap detection for missed messages\n- Emergency stop error propagation to safety systems\n- Device connection error differentiation from data errors\n\nGSM EVIL ERROR HANDLING:\n- Process spawn error handling with device fallback\n- stdout parsing error isolation (malformed lines ignored)\n- WebSocket broadcast error handling with client cleanup\n- gr-gsm process monitoring with automatic restart capability\n\nFRONTEND ERROR HANDLING:\n- Service availability checking before connection attempts\n- Connection failure logging with attempt numbers\n- Automatic retry logic with backoff delays\n- User notification of connection status changes\n- Graceful degradation when backend services unavailable\n\nERROR LOGGING STRATEGY:\n- Structured logging with error context\n- Error categorization (network, parsing, validation, system)\n- Error correlation with connection IDs and timestamps\n- Debug information in development vs production error sanitization\n- Performance impact minimization during error conditions\n\nSAFETY MECHANISMS:\n- Emergency stop propagation across WebSocket connections\n- Connection state validation before critical operations\n- Resource cleanup on error conditions\n- Memory leak prevention in error scenarios\n- Service health monitoring and automatic recovery",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:49:15.308Z",
    "tags": [
      "error-handling",
      "reconnection",
      "safety",
      "logging",
      "reliability"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "reliability/error-handling",
      "summary": "Comprehensive error handling and reconnection strategies across Argos WebSocket systems",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "ErrorHandler",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 37,
    "content": "Argos WebSocket Performance and Throttling Mechanisms\n\nThe Argos project implements sophisticated performance optimization and throttling across its real-time communication systems:\n\nKISMET WEBSOCKET THROTTLING:\n- Device update throttling: 500ms minimum interval per device\n- System status throttling: 500ms minimum for overall stats\n- Change detection: Only broadcasts when device properties actually change\n- Polling interval: 2 seconds for Kismet API requests\n- Cache expiry: 5 minutes with automatic cleanup every minute\n\nHACKRF SSE THROTTLING:\n- Spectrum data throttling: 50ms minimum interval (20Hz maximum)\n- Heartbeat frequency: 10 seconds for connection stability\n- Connection cleanup: 60 seconds timeout for stale connections\n- Buffer management: Configurable message buffering (1-100 messages)\n\nWEBSOCKET SERVER COMPRESSION:\n- perMessageDeflate configuration with optimized settings:\n  * chunkSize: 1024 bytes\n  * memLevel: 7 (memory vs compression tradeoff)\n  * level: 3 (compression level)\n  * clientNoContextTakeover: true (memory efficiency)\n  * serverNoContextTakeover: true\n  * serverMaxWindowBits: 10\n  * concurrencyLimit: 10\n  * threshold: 1024 (compress messages above 1KB)\n\nBASE WEBSOCKET PERFORMANCE:\n- Heartbeat interval: 30 seconds (10 seconds for HackRF)\n- Heartbeat timeout detection: 2x heartbeat interval\n- Reconnection backoff: 1.5x multiplier with 30s maximum\n- Message sequence tracking: Detects missed messages\n- Buffer limits: Configurable per service (10 default for HackRF)\n\nGSM EVIL OPTIMIZATION:\n- Circular buffer: 1000 maximum data points\n- Real-time broadcasting: Immediate data distribution\n- New client history: Last 20 data points sent on connection\n- Hardware optimization: Device-specific parameter tuning\n\nCONNECTION MANAGEMENT:\n- Client tracking per endpoint with Set data structures\n- WebSocket readyState validation before sending\n- Automatic client cleanup on connection failures\n- Connection count monitoring and reporting\n\nMEMORY MANAGEMENT:\n- Stale cache cleanup intervals\n- Connection metadata tracking with timestamps\n- Automatic resource cleanup on disconnect\n- Event listener cleanup to prevent memory leaks",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:48:53.961Z",
    "tags": [
      "performance",
      "throttling",
      "compression",
      "memory-management",
      "real-time"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "performance/optimization",
      "summary": "Performance optimization and throttling mechanisms across Argos WebSocket implementations",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "ThrottlingEngine",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 36,
    "content": "Argos Client-Side WebSocket Usage - Frontend Integration Patterns\n\nAnalysis of client-side WebSocket implementations reveals distinct patterns across different services:\n\nDRONE ID CLIENT (src/routes/droneid/+page.svelte):\n- Direct WebSocket connection to RemoteIDReceiver backend (port 8081)\n- Reconnection strategy with exponential backoff (max 10 attempts, 5s delay)\n- Real-time drone tracking with Leaflet map integration\n- JSON message parsing for MinimalDroneDto format\n- Service dependency: Only connects when isServiceRunning = true\n\nWEBSOCKET CONNECTION PATTERNS:\n- URL construction: ws://${hostname}:${port}/ws\n- Connection state management (isConnected boolean)\n- Automatic reconnection with attempt counting\n- Service status integration (prevents reconnection when service stopped)\n\nMESSAGE HANDLING:\n- Array-based data reception (drone positions)\n- Real-time map marker updates and path tracking\n- Popup content generation with drone metadata\n- Icon differentiation (spoofed vs legitimate drones)\n\nERROR HANDLING STRATEGY:\n- Connection failure logging with attempt numbers\n- Max reconnection limit enforcement\n- Service status validation before reconnection attempts\n- Graceful degradation when service unavailable\n\nGSM EVIL CLIENT INTEGRATION:\n- Uses HTTP polling instead of WebSocket (IMSIDisplay.svelte)\n- 5-second refresh intervals for IMSI data\n- RESTful API: /api/gsm-evil/imsi-data\n- Simple fetch-based data retrieval with error handling\n\nHACKRF CLIENT INTEGRATION:\n- Uses Server-Sent Events via EventSource API\n- Real-time spectrum data visualization\n- Automatic browser reconnection handling\n- Throttled updates for performance optimization\n\nWEBSOCKET VS SSE DECISION FACTORS:\n1. WebSocket: Bidirectional communication needed (DroneID control)\n2. SSE: Unidirectional data streaming (HackRF spectrum data)\n3. HTTP Polling: Simple data retrieval (GSM IMSI records)\n4. Service architecture determines communication protocol choice",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:48:28.288Z",
    "tags": [
      "frontend",
      "websocket-client",
      "real-time",
      "reconnection",
      "service-integration"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "frontend/websocket-clients",
      "summary": "Frontend WebSocket integration patterns and communication protocol selection in Argos",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "DroneIDClient",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 35,
    "content": "Argos Server-Sent Events (SSE) - HackRF Data Streaming Alternative\n\nThe HackRF data-stream endpoint (src/routes/api/hackrf/data-stream/+server.ts) implements SSE as an alternative to WebSocket for spectrum data:\n\nSSE ARCHITECTURE CHOICE:\n- ReadableStream-based Server-Sent Events instead of WebSocket\n- Unidirectional data flow from server to client\n- HTTP/2 compatible with better browser support\n- Automatic reconnection handling by browsers\n\nCONNECTION MANAGEMENT:\n- Unique connection ID generation: `sse-${timestamp}-${counter}`\n- Connection metadata tracking (connectedAt, lastActivity)\n- Periodic cleanup of stale connections (60s timeout)\n- Connection count management with automatic cleanup intervals\n\nDATA TRANSFORMATION PIPELINE:\nSweepManager events → SSE format:\n- spectrum/spectrum_data: Real-time power spectrum data\n- status: Device and sweep status updates\n- error: Error conditions and failures\n- cycle_config: Sweep configuration changes\n- status_change: State transitions\n\nSPECTRUM DATA OPTIMIZATION:\n- Throttling to 20Hz maximum (50ms minimum interval)\n- Frontend-compatible data format transformation:\n  * frequencies: Calculated frequency array from sweep parameters\n  * power/power_levels: Raw power measurements\n  * start_freq/stop_freq: Sweep range boundaries\n  * center_freq/peak_freq: Current frequency information\n  * timestamp: Data collection time\n\nPERFORMANCE FEATURES:\n- Heartbeat every 10 seconds for connection stability\n- X-Accel-Buffering: no header for proxy compatibility\n- Connection uptime tracking\n- Automatic sweepManager emitter management\n\nEVENT SUBSCRIPTION:\n- Listens to both 'spectrum' and 'spectrum_data' events for compatibility\n- Event handler cleanup on connection close\n- Single emitter shared across all SSE connections\n- First connection initializes, last connection cleanup\n\nCACHE HEADERS:\n- Content-Type: text/event-stream\n- Cache-Control: no-cache\n- Connection: keep-alive\n- Prevents proxy buffering for real-time delivery\n\nCONNECTION LIFECYCLE:\n1. Connection establishment with unique ID\n2. Initial status and connection confirmation\n3. Event subscription to sweepManager\n4. Real-time data streaming with throttling\n5. Heartbeat maintenance\n6. Cleanup on close with event unsubscription",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:48:04.991Z",
    "tags": [
      "server-sent-events",
      "hackrf",
      "real-time",
      "throttling",
      "spectrum-analysis"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "protocols/sse",
      "summary": "Server-Sent Events implementation for HackRF spectrum data streaming as WebSocket alternative",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "ServerSentEvents",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 34,
    "content": "Argos Fusion WebSocket Manager - Multi-Service Integration Layer\n\nThe FusionWebSocketManager (src/lib/server/websockets.ts) provides centralized WebSocket management for multiple services:\n\nINTEGRATION ARCHITECTURE:\n- Centralized client management with unique client IDs\n- Service-agnostic subscription system with channel-based routing\n- Integration with Wireshark controller for network packet analysis\n- Placeholder architecture for GNU Radio and Kismet integration\n\nCLIENT MANAGEMENT:\n- Unique client ID generation: `client_${timestamp}_${random}`\n- Subscription-based message routing per client\n- Automatic client cleanup on WebSocket close\n- Welcome message with client ID and subscriptions\n\nWIRESHARK INTEGRATION:\nEvent listeners for network analysis:\n- 'packet': Real-time network packet data\n- 'stats': Network statistics and performance metrics\n- 'started': Service startup notifications\n- 'stopped': Service shutdown notifications\n\nSUBSCRIPTION SYSTEM:\n- Channel-based message filtering (e.g., 'wireshark', 'gnuradio', 'kismet')\n- Client-specific subscription sets\n- Broadcast to subscribed clients only\n- Empty subscription set = receive all channels\n\nMESSAGE HANDLING:\nClient message types:\n- subscribe: Add channels to client subscription\n- unsubscribe: Remove channels from subscription\n- ping: Connection health check → pong response\n- Unknown message type logging for debugging\n\nBROADCAST MECHANISM:\n- Channel-specific message distribution\n- WebSocket readyState validation before sending\n- Automatic client cleanup on send failures\n- JSON message serialization with error handling\n\nPLANNED INTEGRATIONS:\n- GNU Radio: SDR signal processing integration\n- Kismet: WiFi device monitoring (separate from dedicated Kismet manager)\n- Additional services as fusion phases expand\n\nSERVICE STATISTICS:\n- Connected client count tracking\n- Available channel enumeration\n- Initialization state monitoring\n- Service health reporting",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:47:42.429Z",
    "tags": [
      "fusion",
      "multi-service",
      "wireshark",
      "subscription",
      "centralized-management"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "services/fusion",
      "summary": "Fusion WebSocket manager for multi-service integration and centralized client management",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "FusionWebSocketManager",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 33,
    "content": "Argos HackRF WebSocket Client - Spectrum Analysis Real-time Client\n\nThe HackRFWebSocketClient (src/lib/services/websocket/hackrf.ts) extends BaseWebSocket for real-time spectrum analysis:\n\nSPECIALIZED CLIENT ARCHITECTURE:\n- Extends BaseWebSocket with HackRF-specific functionality\n- Integrates with Svelte stores for reactive UI updates\n- Type-safe data validation with custom type guards\n- Singleton pattern management with factory functions\n\nDATA VALIDATION PIPELINE:\nCustom type guards for incoming data:\n- isSpectrumData(): Validates frequency arrays and power levels\n- isSweepStatus(): Validates sweep configuration and progress\n- isCycleStatus(): Validates cycle timing information  \n- isEmergencyStopData(): Validates stop conditions\n- isDeviceStatus(): Validates connection state\n\nMESSAGE TYPE HANDLERS:\n- spectrum_data: Real-time power spectrum updates → updateSpectrumData store\n- sweep_status: Frequency sweep progress → updateSweepStatus store\n- cycle_status: Sweep cycle timing → updateCycleStatus store\n- emergency_stop: Safety stop conditions → updateEmergencyStopStatus store\n- device_status: Hardware connection state → updateConnectionStatus store\n- error: Error conditions with logging\n- pong: Heartbeat responses for connection health\n\nSPECTRUM DATA PROCESSING:\n- Message buffering (configurable size, default 10)\n- Moving average smoothing across buffer\n- Sequence number tracking for missed message detection\n- Real-time store updates for reactive UI\n\nCLIENT API METHODS:\nControl methods:\n- startSweep(config): Initiate frequency sweep with parameters\n- stopSweep(): Terminate active sweep\n- emergencyStop(reason): Safety shutdown\n- requestStatus/requestSweepStatus(): State queries\n- subscribe/unsubscribe(streams): Stream management\n- setCompression/setBufferSize: Performance tuning\n\nSTORE INTEGRATION:\nUpdates multiple reactive stores:\n- updateSpectrumData: Power spectrum visualization\n- updateSweepStatus: Sweep progress and configuration\n- updateConnectionStatus: WebSocket and device connection state\n- updateCycleStatus: Timing and performance metrics\n- updateEmergencyStopStatus: Safety system state\n\nPERFORMANCE OPTIMIZATIONS:\n- Configurable buffering (1-100 message buffer)\n- Data compression support\n- Frequent heartbeat (10s vs 30s default)\n- Moving average smoothing for spectrum display",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:47:23.393Z",
    "tags": [
      "hackrf",
      "spectrum-analysis",
      "real-time",
      "svelte-stores",
      "type-safety"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "services/hackrf",
      "summary": "HackRF WebSocket client for real-time spectrum analysis with Svelte store integration",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "HackRFWebSocketClient",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 32,
    "content": "Argos BaseWebSocket Client - Universal WebSocket Foundation\n\nThe BaseWebSocket class (src/lib/services/websocket/base.ts) provides a robust foundation for all WebSocket clients in Argos:\n\nABSTRACTION ARCHITECTURE:\n- Abstract base class with template method pattern\n- Environment detection (browser vs Node.js)\n- Cross-platform WebSocket instantiation handling\n- Mandatory abstract methods: onConnected, onDisconnected, handleIncomingMessage, onError, sendHeartbeat\n\nRECONNECTION STRATEGY:\n- Exponential backoff with configurable multiplier (default 1.5x)\n- Maximum reconnection attempts (-1 = infinite)\n- Progressive interval increase up to maxReconnectInterval (30s default)\n- Intentional vs unintentional close detection\n- Automatic reconnection scheduling on connection loss\n\nHEARTBEAT MECHANISM:\n- Configurable interval (default 30s)\n- Timeout detection (2x heartbeat interval)\n- Automatic connection termination on heartbeat timeout\n- Custom heartbeat implementation per service (abstract method)\n\nEVENT SYSTEM:\n- WebSocket event types: Open, Close, Message, Error, Reconnecting\n- Type-safe event listener registration/removal\n- Message handler registration by message type\n- Event emission with timestamp and error context\n\nMESSAGE HANDLING PIPELINE:\n1. Raw message parsing (JSON with fallback to raw data)\n2. Typed message routing to registered handlers\n3. Abstract handleIncomingMessage for custom processing\n4. Error isolation per handler to prevent cascade failures\n\nCONNECTION LIFECYCLE:\n- connect(): WebSocket creation with environment detection\n- disconnect(): Intentional close with cleanup\n- destroy(): Complete resource cleanup including listeners\n- Automatic state management and cleanup timers\n\nCONFIGURATION OPTIONS:\n- url: WebSocket endpoint\n- reconnectInterval: Initial reconnection delay (1s default)\n- maxReconnectAttempts: Retry limit (-1 infinite)\n- heartbeatInterval: Keep-alive frequency (30s default)\n- reconnectBackoffMultiplier: Exponential backoff (1.5 default)\n- maxReconnectInterval: Backoff ceiling (30s default)\n- protocols: WebSocket subprotocols",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:47:01.260Z",
    "tags": [
      "websocket-client",
      "reconnection",
      "heartbeat",
      "event-system",
      "error-handling"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/websocket-client",
      "summary": "BaseWebSocket abstract class providing universal WebSocket client foundation",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "BaseWebSocket",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 31,
    "content": "Argos GSM Evil Server - Real-time GSM Monitoring WebSocket Implementation\n\nThe GSM Evil Server (src/lib/services/gsm-evil/server.ts) implements a standalone WebSocket server for GSM signal analysis:\n\nSTANDALONE SERVER ARCHITECTURE:\n- Express.js application with HTTP server\n- WebSocketServer attached to HTTP server (not SvelteKit integrated)\n- Serves built-in HTML interface at root path with embedded JavaScript client\n- API endpoints: /api/status, /api/data\n\nGSM DATA CAPTURE PIPELINE:\n- Spawns grgsm_livemon_headless process for GSM signal capture\n- Auto-detects hardware (USRP B205 Mini vs HackRF)\n- Device-specific parameter optimization:\n  * USRP: higher gain (+10), 2 MSPS sample rate, type=b200 args\n  * HackRF: default parameters\n- Real-time stdout parsing from gr-gsm tools\n\nWEBSOCKET MESSAGE STRUCTURE:\nPrimary message type: 'gsm_data' with GSMData interface:\n- timestamp: Date\n- frequency: number (capture frequency)\n- channel: number (GSM channel)\n- cell_id?: string (extracted from gr-gsm output)\n- lai?, mcc?, mnc?: GSM location/network identifiers\n- signal_strength?: number (extracted signal level)\n- data: string (raw gr-gsm output line)\n\nREAL-TIME DATA PROCESSING:\n- Captures gr-gsm stdout with regex pattern matching\n- Extracts Cell ID and Signal strength from output lines\n- Maintains circular buffer (maxDataPoints: 1000)\n- Broadcasts to all connected WebSocket clients immediately\n- New clients receive last 20 data points on connection\n\nCLIENT-SIDE FEATURES (embedded HTML):\n- Real-time GSM data visualization with dark terminal theme\n- Live statistics: frequency, packet count, active cell count\n- Scrolling data feed with timestamp formatting\n- Automatic reconnection handling\n- WebSocket connection status indicator\n\nBROADCAST MECHANISM:\n- Broadcasts to all connected clients (wss.clients)\n- WebSocket readyState validation before sending\n- JSON message format with type-based routing",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:46:40.212Z",
    "tags": [
      "gsm",
      "real-time",
      "gr-gsm",
      "websocket",
      "signal-analysis",
      "cellular"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "services/gsm-evil",
      "summary": "GSM Evil server with standalone WebSocket for real-time GSM signal monitoring",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "GSMEvilServer",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 30,
    "content": "Argos Kismet WebSocket Manager - Real-time Device Monitoring\n\nThe Kismet WebSocketManager (src/lib/server/kismet/webSocketManager.ts) implements sophisticated real-time device monitoring with polling and caching:\n\nARCHITECTURE PATTERN:\n- Singleton pattern with EventEmitter inheritance\n- Polling-based approach (2 second intervals) instead of native WebSocket connection to Kismet\n- Client subscription management with Map<WebSocket, Subscription>\n- Device caching with expiration (5 minutes) and throttling (500ms)\n\nKISMET API INTEGRATION:\n- HTTP API polling: /devices/last-time/{timestamp}/devices.json\n- System status: /system/status.json  \n- Uses KISMET_API_KEY for authentication\n- Transforms raw Kismet data to normalized device format\n\nSUBSCRIPTION FILTERING:\n- Event type filtering: device_update, status_change, alert, or wildcard '*'\n- Signal strength filtering: minSignal threshold\n- Device type filtering: AP, Client, Bridge, Unknown\n- Real-time filter application during broadcast\n\nDEVICE DATA TRANSFORMATION:\nRaw Kismet format → Normalized format:\n- kismet.device.base.key → device tracking\n- kismet.device.base.macaddr → mac address\n- kismet.device.base.signal.last_signal → signal strength\n- kismet.device.base.location → lat/lon coordinates\n- kismet.device.base.crypt → encryption types (WEP, WPA, WPA2, WPA3)\n\nPERFORMANCE OPTIMIZATIONS:\n- Throttled updates per device (500ms minimum interval)\n- Change detection to avoid unnecessary broadcasts\n- Stale cache cleanup (every minute)\n- System status throttling for resource efficiency\n\nCLIENT MESSAGE HANDLING:\n- subscribe/unsubscribe: Dynamic event subscription\n- set_filters: Runtime filter configuration\n- get_devices: Cached device list retrieval\n- ping/pong: Connection health monitoring",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:46:17.260Z",
    "tags": [
      "kismet",
      "device-monitoring",
      "real-time",
      "caching",
      "wifi-scanning"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "services/kismet",
      "summary": "Kismet WebSocket manager with real-time device monitoring and caching",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "KismetWebSocketManager",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 29,
    "content": "Argos WebSocket Message Types and Data Flows - Server Implementation\n\nThe websocket-server.ts implements a dedicated WebSocket server with specific message handlers and routing patterns:\n\nWEBSOCKET SERVER CONFIGURATION:\n- Port 5173 with perMessageDeflate compression (optimized settings)\n- Connection tracking per endpoint in Map<string, Set<WebSocket>>\n- Message handlers registered per endpoint path\n\nMESSAGE ROUTING SYSTEM:\nCore message types handled:\n1. ping/pong - Heartbeat mechanism with timestamp\n2. Connection success with endpoint and timestamp\n3. Error routing with handler-specific responses\n\nHACKRF MESSAGE HANDLERS (/hackrf endpoint):\n- request_status: Returns device status (connected, sweeping, frequency, sampleRate, gain)\n- request_sweep_status: Returns sweep progress (active, startFreq, endFreq, currentFreq, progress)\n- start_sweep: Initiates frequency sweep with configuration, simulates progress with intervals\n- stop_sweep: Terminates active sweep\n- subscribe: Stream subscription management\n\nKISMET MESSAGE HANDLERS (/kismet endpoint):\n- request_status: System status (running, connected, devices, uptime, packetsPerSecond)\n- request_devices: Device list with WiFi network details (MAC, SSID, manufacturer, signal, channel, packets)\n- refresh: Updated system statistics\n\nBROADCAST MECHANISM:\n- Endpoint-specific broadcasting to all connected clients\n- WebSocket readyState validation (OPEN = 1)\n- Connection count tracking per endpoint",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:45:56.717Z",
    "tags": [
      "message-routing",
      "hackrf",
      "kismet",
      "broadcast",
      "real-time"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "protocols/websocket-messages",
      "summary": "WebSocket message types and routing patterns in server implementation",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "WebSocketServer",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 28,
    "content": "Argos WebSocket Architecture Analysis - Main WebSocket Server Setup\n\nThe Argos project implements a comprehensive real-time communication system with multiple WebSocket servers and clients. The main WebSocket infrastructure is initialized in src/hooks.server.ts:\n\nMAIN WEBSOCKET SERVER:\n- Creates WebSocketServer with noServer option for SvelteKit integration\n- Initializes singleton WebSocketManager for Kismet integration\n- Handles connection with subscription preferences via URL parameters\n- Supports filtering by types, minSignal, and deviceTypes\n- Manages graceful shutdown with dev environment cleanup\n\nCONNECTION MANAGEMENT:\n- Parses URL parameters for subscription filtering (types, minSignal, deviceTypes)\n- URL format: /api/kismet/ws?types=device_update,status_change&minSignal=-70&deviceTypes=AP,Client\n- Automatic client registration with WebSocketManager singleton\n- Platform-specific WebSocket upgrade handling (requires deployment platform support)\n\nERROR HANDLING:\n- Comprehensive global error handler with unique error IDs\n- Context-aware logging with request details and user agent\n- Safe error responses preventing information leakage in production\n- Stack trace inclusion only in development mode",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:45:38.645Z",
    "tags": [
      "websocket",
      "real-time",
      "connection-management",
      "kismet",
      "sveltekit"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/websocket",
      "summary": "Main WebSocket server architecture and connection management in Argos",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "WebSocketServer",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 27,
    "content": "Database initialization and seeding processes in Argos:\n\n**DATABASE INITIALIZATION:**\n- Automatic schema loading from schema.sql file on startup\n- Fallback to embedded schema if file loading fails\n- WAL journal mode and SYNCHRONOUS=NORMAL pragma configuration\n- Foreign keys enabled via PRAGMA foreign_keys = ON\n- Migration execution after initial schema setup\n\n**SEEDING AND DATA POPULATION:**\n- Cell towers database pre-populated with infrastructure data\n- No explicit seeding scripts found - data populated via operational systems\n- Signal data populated real-time from HackRF, Kismet, and other sources\n- Device discovery and relationship building through signal analysis\n\n**SERVICE INITIALIZATION SEQUENCE:**\n1. Database connection establishment with better-sqlite3\n2. Schema validation and loading (with fallback)\n3. Migration system execution for schema updates\n4. Prepared statement caching for performance\n5. Cleanup service initialization and startup\n6. Signal processing pipeline activation\n\n**ERROR HANDLING:**\n- Graceful degradation if schema files missing\n- Migration failure handling with rollback capability\n- Database connection retry mechanisms\n- Cleanup service initialization separated from core database\n\n**ENVIRONMENT CONFIGURATION:**\n- Database paths configurable via environment variables\n- Different databases for different operational modes\n- Development vs production database separation\n- Logging integration for initialization monitoring",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:43:45.828Z",
    "tags": [
      "database",
      "initialization",
      "seeding",
      "configuration",
      "startup-sequence",
      "error-handling"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "database/initialization",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "DatabaseInitialization",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 26,
    "content": "Cell Towers Database (towers.db) and specialized database systems in Argos:\n\n**CELL TOWERS DATABASE SCHEMA:**\n- Primary table: towers with cellular network infrastructure data\n- Key fields: radio, mcc(country), net(mnc/network), area(lac), cell(ci)\n- Spatial data: lon, lat coordinates for tower positioning\n- Signal characteristics: range, samples, averageSignal\n- Temporal tracking: created, updated timestamps\n- Quality metrics: changeable flag for data reliability\n\n**INDEXING STRATEGY:**\n- Composite index: idx_mcc_net_area_cell for cell tower lookups\n- Spatial index: idx_lat_lon for location-based queries\n- Individual indexes: idx_mcc, idx_area for filtered searches\n- SQLite statistics table (sqlite_stat1) for query optimization\n\n**GSM EVIL INTEGRATION:**\n- Cross-database queries between IMSI database and towers database\n- Python script execution for complex database operations\n- IMSI geolocation via MCC/MNC/LAC/CI tower matching\n- Location enrichment for captured IMSI data\n\n**SPECIALIZED PHASE4 DATABASES:**\n- error_recovery.db: System error state and recovery procedures\n- backup_manager.db: Backup system state and metadata\n- diagnostic_engine.db: System diagnostic and health monitoring\n- Modular architecture with domain-specific data isolation\n\n**REMOTE ID DATABASE:**\n- remoteid.db: Drone tracking and identification data\n- Python-based system integration (separate from Node.js stack)\n- Located in RemoteIDReceiver/Receiver/ subdirectory\n- Independent schema and data lifecycle management",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:43:29.508Z",
    "tags": [
      "database",
      "celltowers",
      "gsm-evil",
      "imsi",
      "phase4",
      "remote-id",
      "specialized-databases"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "database/specialized",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "TowersDatabase",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 25,
    "content": "Data Access Layer (DAL) and ORM patterns in Argos:\n\n**UNIFIED DATA ACCESS LAYER:**\n- Dual-mode operation: server-side (SQLite) and client-side (IndexedDB)\n- Automatic environment detection using browser flag\n- Consistent API regardless of storage backend\n- Singleton pattern for global data access\n\n**CLIENT-SERVER ABSTRACTION:**\n- Server-side: Direct SQLite operations via better-sqlite3\n- Client-side: IndexedDB operations for offline capability\n- API fallback: HTTP endpoints for server operations from client\n- Batch operations optimized for both environments\n\n**SIGNAL DATABASE CLASS:**\n- RFDatabase class as main database interface\n- Prepared statement caching for performance\n- Spatial query optimization with grid-based indexing\n- Device relationship tracking and network graph storage\n- Signal marker conversion between formats\n\n**REPOSITORY PATTERN:**\n- signalsRepository with basic CRUD operations\n- Type-safe interfaces (Signal, Device, Network schemas)\n- Separation of data access logic from business logic\n- Database connection abstraction\n\n**DATA MODELS:**\n- TypeScript interfaces for type safety\n- JSON metadata fields for flexible data storage\n- Foreign key relationships enforced at database level\n- Conversion between internal DB format and API format\n\n**QUERY PATTERNS:**\n- Spatial queries: findSignalsInRadius with distance calculation\n- Temporal queries: Time-based filtering with configurable windows  \n- Device queries: findDevicesNearby with aggregated statistics\n- Batch operations: insertSignalsBatch for performance",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:43:09.755Z",
    "tags": [
      "database",
      "data-access-layer",
      "orm",
      "repository-pattern",
      "client-server",
      "abstraction"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "database/orm",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "DataAccessLayer",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 24,
    "content": "Database cleanup and maintenance system in Argos RF Signals DB:\n\n**CLEANUP SERVICE ARCHITECTURE:**\n- DatabaseCleanupService class with configurable retention policies\n- Automatic background cleanup with scheduled intervals\n- Retention policies vary by signal source:\n  - HackRF signals: 1 hour retention (high-frequency scan data)\n  - WiFi/Kismet signals: 7 days retention  \n  - Other signals: 1 hour default retention\n  - Devices: 7 days inactive retention\n  - Patterns: 24 hours retention\n\n**CLEANUP OPERATIONS:**\n- Batch processing (configurable batch size, default 1000 records)\n- Transaction-based cleanup for consistency\n- Progressive deletion with runtime limits (30 seconds max)\n- VACUUM operation after significant deletions (>1000 records)\n- Orphaned relationship cleanup via triggers\n\n**DATA AGGREGATION:**\n- Hourly signal statistics aggregation\n- Daily device activity summaries  \n- Spatial heatmap generation (grid-based)\n- Network activity statistics\n- Automated aggregation every 10 minutes\n\n**MAINTENANCE VIEWS:**\n- retention_policy_violations: Identifies expired records\n- inactive_devices: Devices without recent signals\n- expired_patterns: Time-based pattern expiry\n- signals_to_delete, devices_to_delete: Cleanup candidates\n- table_sizes: Database size monitoring\n- data_growth_hourly: Growth trend analysis\n\n**TRIGGERS:**\n- update_device_stats: Real-time device statistics on signal insert\n- cleanup_orphaned_relationships: Cascade deletion of device relationships\n- cleanup_pattern_signals: Pattern association cleanup",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:42:54.791Z",
    "tags": [
      "database",
      "cleanup",
      "maintenance",
      "aggregation",
      "triggers",
      "retention-policy"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "database/maintenance",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "DatabaseCleanupService",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 23,
    "content": "Database migration system implementation in Argos:\n\n**MIGRATION ARCHITECTURE:**\n- Two migration systems: older migrations.ts and newer runMigrations.ts\n- Both use better-sqlite3 for database operations\n- Version tracking via migrations table with filename and applied_at timestamp\n\n**Migration Runner (runMigrations.ts):**\n- Supports both SQL (.sql) and TypeScript (.ts) migration files\n- Automatic migration discovery by reading migrations directory\n- Sequential execution based on filename sorting\n- Transactional application with rollback on failure\n- Handles SQLite-specific errors (e.g., \"duplicate column name\")\n- Tracks execution with INSERT INTO migrations table\n\n**Migration Validation System (migrations.ts):**\n- Interface-based migrations with up/down/validate methods\n- MigrationRunner class with initialize/migrate/rollback methods\n- Built-in validation step after each migration\n- Comprehensive error handling and logging\n- Rollback capability for failed migrations\n\n**ACTUAL MIGRATIONS:**\n1. **001_add_cleanup_features.sql** - Core cleanup system\n   - Aggregation tables (signal_stats_hourly, device_stats_daily, etc.)\n   - Cleanup triggers (update_device_stats, cleanup_orphaned_relationships)\n   - Maintenance views (retention_policy_violations, inactive_devices)\n   \n2. **002_add_altitude_column.sql** - Schema evolution\n3. **002_fix_cleanup_views.sql** - View corrections\n\n**MIGRATION SAFETY:**\n- Duplicate column detection and graceful handling\n- Transaction-based atomic operations  \n- Validation functions to verify migration success\n- Cleanup of temporary files and error recovery",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:42:38.661Z",
    "tags": [
      "database",
      "migrations",
      "versioning",
      "schema-evolution",
      "rollback",
      "validation"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "database/migrations",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "MigrationRunner",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 22,
    "content": "Database indexing strategy and performance optimization in RF Signals DB:\n\n**SPATIAL INDEXING:**\n- Primary spatial index: idx_signals_spatial_grid using CAST(latitude * 10000 AS INTEGER), CAST(longitude * 10000 AS INTEGER)\n- Grid-based approach simulates spatial indexing in SQLite (lacks native spatial support)\n- Secondary spatial index: idx_signals_location on (latitude, longitude)\n- 10000 multiplier provides ~11m resolution at equator\n\n**PERFORMANCE INDEXES:**\n- Temporal: idx_signals_timestamp for time-based queries\n- RF characteristics: idx_signals_frequency, idx_signals_power, idx_signals_altitude\n- Device relationships: idx_signals_device, idx_devices_last_seen\n- Network analysis: idx_relationships_devices on (source_device_id, target_device_id)\n- Pattern matching: idx_patterns_timestamp, idx_patterns_type\n\n**QUERY OPTIMIZATION:**\n- Prepared statements cached in Map<string, Database.Statement>\n- Batch operations using transactions for consistency\n- Spatial queries use grid bounds then exact distance filtering\n- View-based cleanup identification: signals_to_delete, devices_to_delete\n\n**DATABASE CONFIGURATION:**\n- WAL (Write-Ahead Logging) journal mode for concurrency\n- SYNCHRONOUS = NORMAL for balance of safety and speed\n- Foreign keys enabled with PRAGMA foreign_keys = ON",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:42:21.006Z",
    "tags": [
      "database",
      "indexing",
      "performance",
      "spatial",
      "optimization",
      "sqlite"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "database/performance",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "SpatialIndexing",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 21,
    "content": "RF Signals Database (rf_signals.db) detailed schema analysis:\n\n**CORE TABLES:**\n1. **devices** - RF emitters tracking\n   - Primary key: id (autoincrement)\n   - Unique key: device_id (generated from signal characteristics)\n   - Fields: type, manufacturer, first_seen, last_seen, avg_power, freq_min, freq_max, metadata(JSON)\n   - Device types: 'ap', 'client', 'bluetooth', 'unknown'\n\n2. **signals** - Individual RF measurements\n   - Primary key: id (autoincrement) \n   - Unique key: signal_id\n   - Spatial data: latitude, longitude, altitude(default 0)\n   - RF data: power(dBm), frequency(MHz), bandwidth, modulation\n   - Metadata: timestamp, source('hackrf', 'kismet'), device_id(FK), metadata(JSON)\n\n3. **networks** - WiFi/Bluetooth network groupings\n   - Fields: network_id, name(SSID), type('wifi', 'bluetooth', 'cellular'), encryption, channel\n   - Spatial: center_lat, center_lon, radius(meters)\n\n4. **relationships** - Device connections\n   - Links: source_device_id, target_device_id, network_id\n   - Types: 'connected', 'associated', 'paired'\n   - Strength: 0-1 normalized\n\n5. **patterns** - AI-detected patterns\n   - Types: 'new_device', 'moving_signal', etc.\n   - Priority: 'high', 'medium', 'low'\n   - Confidence: 0-1, expires_at for TTL",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:42:06.136Z",
    "tags": [
      "database",
      "schema",
      "rf-signals",
      "tables",
      "foreign-keys",
      "spatial-data"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "database/schema",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "DevicesTable",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 20,
    "content": "Comprehensive analysis of Argos database architecture reveals a sophisticated multi-database system with different databases serving distinct purposes:\n\n**PRIMARY RF SIGNALS DATABASE (rf_signals.db)**\n- Main SQLite database with WAL journal mode for RF signal data\n- Core tables: devices, signals, networks, relationships, patterns, pattern_signals\n- Comprehensive spatial indexing with grid-based approach (latitude * 10000, longitude * 10000)\n- Aggregation tables: signal_stats_hourly, device_stats_daily, network_stats_daily, spatial_heatmap_hourly\n- Migration system using better-sqlite3 with version tracking\n\n**CELL TOWERS DATABASE (towers.db)**\n- Stores cellular tower location data\n- Schema: id, radio, mcc, net(mnc), area(lac), cell(ci), unit, lon, lat, range, samples, etc.\n- Indexes on mcc_net_area_cell composite key and lat_lon for spatial queries\n- Used by GSM Evil functionality for IMSI geolocation\n\n**SPECIALIZED PHASE4 DATABASES**\n- error_recovery.db: Error handling and recovery data\n- backup_manager.db: Backup system state\n- diagnostic_engine.db: System diagnostics\n\n**REMOTE ID DATABASE (remoteid.db)**\n- Part of RemoteIDReceiver module for drone tracking\n- Separate Python-based system",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:41:50.589Z",
    "tags": [
      "database",
      "architecture",
      "sqlite",
      "rf-signals",
      "celltowers",
      "schema",
      "indexing"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/database",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "RFSignalsDB",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 19,
    "content": "Technology stack and dependencies analysis:\n\n1. Frontend Stack:\n   - Svelte 5.35.5 with SvelteKit 2.22.3 for reactive UI\n   - Vite 7.0.3 for build tooling and development server\n   - TypeScript for type safety\n   - TailwindCSS for styling with forms plugin\n\n2. Mapping and Visualization:\n   - Leaflet for base mapping with heat map and marker clustering\n   - Deck.gl for advanced 3D visualizations\n   - MapLibre GL for vector tile rendering\n   - Cytoscape for network/relationship visualization\n\n3. Data and Networking:\n   - WebSocket (ws) for real-time communication\n   - EventSource for server-sent events\n   - node-fetch for HTTP client operations\n   - Better-sqlite3 for embedded database\n   - Zod for runtime schema validation\n\n4. Testing and Quality:\n   - Vitest for unit testing with coverage\n   - Playwright for end-to-end testing\n   - ESLint and Prettier for code quality\n   - Husky for git hooks\n   - Visual regression testing with Puppeteer\n\n5. RF/Hardware Integration:\n   - Custom HackRF and USRP integration\n   - Kismet for WiFi monitoring\n   - GSM Evil for cellular analysis\n   - GNU Radio for signal processing",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:32:16.810Z",
    "tags": [
      "svelte",
      "mapping",
      "visualization",
      "websocket",
      "testing",
      "rf-integration"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "technology/stack",
      "summary": "Argos technology stack and key dependencies",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "Svelte",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 18,
    "content": "Service architecture and integration patterns:\n\n1. Service Manager Pattern:\n   - KismetServiceManager class provides start/stop/restart/status operations\n   - Proper process lifecycle management with PID tracking\n   - Error handling with graceful degradation and cleanup\n   - USB adapter reset integration for hardware stability\n\n2. API Response Patterns:\n   - Consistent JSON structure: {success, message/data, timestamp}\n   - Proper HTTP status codes (500 for errors, 400 for bad requests)\n   - Error context preservation with stack trace information\n   - Timeout handling for long-running operations\n\n3. Script Integration:\n   - Heavy reliance on shell scripts for hardware control\n   - Script execution through promisified child_process.exec\n   - Script organization: monitoring/, deploy/, dev/, infrastructure/\n   - Patch management scripts for third-party tool integration\n\n4. WebSocket Architecture:\n   - Multiple WebSocket endpoints for real-time data\n   - Service-specific WebSocket proxies (Kismet, HackRF)\n   - Event-driven data streaming for spectrum analysis\n\n5. Database Integration:\n   - SQLite with better-sqlite3 for signal data storage\n   - Migration system for schema evolution\n   - Cleanup strategies for data retention management\n   - Repository pattern for data access abstraction",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:32:03.350Z",
    "tags": [
      "service-management",
      "api-patterns",
      "shell-integration",
      "websocket",
      "database"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/services",
      "summary": "Argos service architecture and integration patterns",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "ServiceManager",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 17,
    "content": "Current development focus and active issues (from git status and recent commits):\n\n1. GSM Evil Integration Issues:\n   - Recent fix for IMSI display and table rendering (commit 35a014e)\n   - Socket.IO and CORS patching for iframe compatibility\n   - Auto-IMSI sniffer integration with frequency detection\n   - Multiple GSM Evil startup/stop scripts indicating stability challenges\n\n2. HackRF Management:\n   - Stale process state handling in sweep manager (commit 8755243)\n   - Emergency stop and force cleanup endpoints\n   - Debug capabilities for sweep operations\n\n3. Kismet Service Reliability:\n   - Device count debugging and time window extensions\n   - WiFi adapter reset logic and monitor interface management  \n   - Service manager with proper USB adapter reset procedures\n\n4. Architecture Cleanup:\n   - Major refactoring to remove unused components (commit 5026e7a)\n   - Documentation consolidation (many .md files moved to docs/ structure)\n   - Test organization into tests/ hierarchy\n\n5. Tactical Mapping:\n   - New GSM Evil towers API endpoint\n   - Cell tower visualization improvements\n\nCurrent development areas show focus on service reliability, GSM analysis capabilities, and system architecture improvements.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:31:50.095Z",
    "tags": [
      "gsm-evil-fixes",
      "hackrf-stability",
      "kismet-management",
      "architecture-refactor",
      "current-development"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "development/current-focus",
      "summary": "Argos current development focus and active issues",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "GSMEvilstability",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 16,
    "content": "Configuration management patterns in Argos:\n\n1. Environment Configuration:\n   - .env files with PUBLIC_ prefixed variables for client-side access\n   - Multiple service endpoints: Kismet (2501), HackRF (8092), OpenWebRX (8073)\n   - Feature flags: DEBUG, MOCK_DATA toggles\n   - Legacy compatibility during service consolidation to unified backend (8005)\n\n2. Service Management:\n   - SystemD service files for production deployment (argos-final.service, argos-dev.service)\n   - Process management with CPU protection and WiFi resilience services\n   - Docker deployment configurations available\n   - Extensive shell script automation (100+ scripts in scripts/ directory)\n\n3. Development vs Production:\n   - Development: npm run dev with auto-start scripts and live reload\n   - Production: npm run preview with SystemD service management\n   - Environment validation step before startup\n   - Memory optimization with NODE_OPTIONS for heap size\n\n4. Service Integration Patterns:\n   - Direct service URLs during migration period\n   - WebSocket endpoints for real-time data\n   - Service-specific configuration for Kismet, HackRF, GSM Evil",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:31:34.434Z",
    "tags": [
      "environment-config",
      "systemd",
      "docker",
      "service-management",
      "deployment"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "configuration/deployment",
      "summary": "Argos configuration management and deployment patterns",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "EnvironmentVariables",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 15,
    "content": "API structure analysis: Argos uses SvelteKit's file-based routing with +server.ts files. Key API categories include:\n\n1. RF Hardware Control:\n   - /api/hackrf/* - HackRF spectrum analyzer management (health, sweep control, emergency stop)\n   - /api/rf/* - General RF operations (data-stream, emergency stop, USRP power)\n   - /api/gnuradio/status - GNU Radio status monitoring\n\n2. GSM Analysis:\n   - /api/gsm-evil/* - GSM Evil toolkit integration (control, IMSI collection, intelligent scanning)\n   - /api/tactical-map/gsm-evil-towers/ - Tower visualization data\n\n3. WiFi Monitoring:\n   - /api/kismet/* - Kismet service management (start/stop, device detection, WebSocket proxy)\n   - /api/wireshark/* - Packet capture interface management\n\n4. System & Data:\n   - /api/system/* - System metrics and information\n   - /api/signals/* - Signal data management and cleanup\n   - /api/db/cleanup/ - Database maintenance\n\nAll endpoints follow consistent patterns: JSON responses with success/error status, timestamp metadata, and proper HTTP status codes.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:31:20.817Z",
    "tags": [
      "api-endpoints",
      "sveltekit-routing",
      "rf-control",
      "gsm-analysis",
      "wifi-monitoring"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "api/structure",
      "summary": "Argos API structure and endpoint categories",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "SvelteKit",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 14,
    "content": "Comprehensive analysis of Argos project API structure, configuration patterns, and current development focus based on code examination and git status.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:31:05.899Z",
    "tags": [
      "api-structure",
      "configuration",
      "sveltekit",
      "rf-analysis",
      "gsm-evil",
      "kismet",
      "hackrf"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/analysis",
      "summary": "Argos project deep analysis: API patterns, configuration, and active development areas",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "Argos",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 13,
    "content": "Key Design Patterns: Component-based architecture with SvelteKit, service layer pattern for business logic, WebSocket pattern for real-time updates, store pattern for state management, repository pattern for data access. Feature-based organization for scalability and maintainability.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:27:38.520Z",
    "tags": [
      "design-patterns",
      "architecture-patterns",
      "best-practices",
      "argos",
      "patterns",
      "architecture",
      "service-layer",
      "components",
      "stores"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/patterns",
      "summary": "Argos Design Patterns and Architecture",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "ComponentPattern",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 12,
    "content": "Security Features: Built-in authentication system, role-based access control (RBAC), TLS/SSL encryption for communications, comprehensive input validation, API rate limiting, complete audit logging. Security implemented at multiple layers throughout the application.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:27:29.237Z",
    "tags": [
      "security",
      "authentication",
      "authorization",
      "encryption",
      "argos",
      "security",
      "authentication",
      "rbac",
      "encryption",
      "audit"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/security",
      "summary": "Argos Security Architecture",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "Authentication",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 11,
    "content": "Testing Infrastructure: Comprehensive test suite with unit tests (vitest), integration tests, E2E tests (Playwright), visual regression tests, performance benchmarks. Test organization follows feature structure. Includes mock data, test helpers, and simulation tools for drone scenarios.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:27:19.877Z",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "playwright",
      "argos",
      "testing",
      "vitest",
      "playwright",
      "e2e",
      "unit-tests"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/testing",
      "summary": "Argos Testing Infrastructure",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "Vitest",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 10,
    "content": "Deployment and Operations: Supports Docker deployment with docker-compose, systemd services for process management, includes scripts for Dragon OS deployment. Features CPU protection, memory optimization, network resilience services. Comprehensive installation scripts for both online and offline deployments.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:27:10.043Z",
    "tags": [
      "deployment",
      "docker",
      "systemd",
      "operations",
      "dragon-os",
      "argos",
      "docker",
      "deployment",
      "systemd",
      "dragon-os",
      "operations"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/deployment",
      "summary": "Argos Deployment and Operations",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "Docker",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 9,
    "content": "Database Architecture: Uses SQLite with better-sqlite3 for Node.js integration. Database files include rf_signals.db for signal data, towers.db for cell tower information. Implements migrations system in src/lib/database/migrations. Features cleanup strategies and optimization services for performance.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:26:59.521Z",
    "tags": [
      "database",
      "sqlite",
      "data-storage",
      "migrations",
      "argos",
      "sqlite",
      "database",
      "migrations",
      "optimization",
      "storage"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/database",
      "summary": "Argos Database Architecture",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "SQLite",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 8,
    "content": "BMad-Method subsystem: Universal AI Agent Framework for Agentic Agile Development. Not directly integrated but included in project. Uses specialized AI agents (Analyst, PM, Architect, Dev, QA) for software development workflow. Supports expansion packs for different domains beyond software.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:26:48.574Z",
    "tags": [
      "bmad",
      "ai-agents",
      "agile",
      "development-tools",
      "argos",
      "ai",
      "agents",
      "agile",
      "development",
      "automation"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/tools",
      "summary": "BMad-Method AI Agent Framework",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "BMadMethod",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 7,
    "content": "HackRF Emitter subsystem: Professional RF signal generation platform with React frontend and Flask/Python backend. Features universal signal cache for instant transmission, supports multiple protocols (ELRS, GPS, ADS-B, basic modulations). Pre-generates 500+ signals on startup for zero-delay activation. WebSocket integration for real-time control.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:26:37.269Z",
    "tags": [
      "hackrf",
      "emitter",
      "rf-generation",
      "signal-cache",
      "react",
      "flask",
      "argos",
      "hackrf",
      "rf-emitter",
      "signal-generation",
      "cache",
      "protocols"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/subsystems",
      "summary": "HackRF Emitter RF Signal Generation Platform",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "HackRFEmitter",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 6,
    "content": "RemoteIDReceiver subsystem: Python backend for drone Remote ID monitoring via WiFi broadcasts. Implements ASD-STAN prEN 4709-002 standard. Features real-time monitoring and replay mode, VueJS frontend with MapLibre for visualization. Developed as bachelor thesis at Lucerne University with Cyber Defence Campus.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:26:24.359Z",
    "tags": [
      "remoteid",
      "drone",
      "monitoring",
      "python",
      "vue",
      "argos",
      "drone",
      "remoteid",
      "monitoring",
      "wifi",
      "real-time"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/subsystems",
      "summary": "RemoteIDReceiver Drone Monitoring Subsystem",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "RemoteIDReceiver",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 5,
    "content": "Key Services: hackrfService manages spectrum analysis and device control, kismetService handles WiFi discovery and device tracking, gsmEvilStore manages cellular analysis, tacticalMapService provides GPS and map integration, websocket services enable real-time data streaming. Service pattern uses TypeScript classes with proper error handling and state management.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:26:11.683Z",
    "tags": [
      "services",
      "api",
      "business-logic",
      "argos",
      "service-layer",
      "api",
      "websocket",
      "real-time"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/services",
      "summary": "Argos Service Layer Architecture",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "hackrfService",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 4,
    "content": "Project Structure: /src contains all source code with /routes for SvelteKit pages, /lib for shared libraries including components, server utilities, services, stores, and types. Key routes include hackrf, kismet, tactical-map-simple, gsm-evil, fusion, rtl-433, droneid. Component organization follows feature-based structure (drone/, fusion/, hackrf/, kismet/, map/, tactical-map/).",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:26:00.924Z",
    "tags": [
      "project-structure",
      "directory-layout",
      "organization",
      "argos",
      "sveltekit",
      "routes",
      "components",
      "services",
      "project-structure"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/structure",
      "summary": "Argos Project Structure and Organization",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "src",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 3,
    "content": "Main Components: 1) HackRF integration for spectrum analysis, 2) Kismet for WiFi network discovery, 3) GPS/TAK integration for tactical awareness, 4) GSM Evil for cellular analysis, 5) RTL-433 for signal decoding, 6) USRP Sweep for spectrum analysis, 7) DroneID for Remote ID detection, 8) Fusion Security Center as unified intelligence platform, 9) Tactical Map for signal visualization.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:25:47.925Z",
    "tags": [
      "components",
      "features",
      "modules",
      "argos",
      "hackrf",
      "kismet",
      "gsm",
      "drone",
      "tactical-map"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/components",
      "summary": "Argos Main Components and Features",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "HackRF",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 2,
    "content": "Technology Stack: Frontend - SvelteKit 2.0+, TypeScript 5.0+, Tailwind CSS, Leaflet/MapLibre for maps, WebSocket for real-time. Backend - Node.js 18+, Python 3.8+ for SDR tools, SQLite/Better-SQLite3 for database. Key dependencies: deck.gl for visualizations, cytoscape for network graphs, ws for websockets.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:25:35.084Z",
    "tags": [
      "technology-stack",
      "frontend",
      "backend",
      "dependencies",
      "argos",
      "sveltekit",
      "typescript",
      "sqlite",
      "websocket",
      "real-time"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/tech-stack",
      "summary": "Argos Technology Stack and Dependencies",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "SvelteKit",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  },
  {
    "id": 1,
    "content": "Argos is a comprehensive web-based control center for Software Defined Radio (SDR) operations, WiFi network scanning, and GPS tracking with Team Awareness Kit (TAK) integration. Built for professional defense and research applications.",
    "memory_type": "observation",
    "session_id": null,
    "timestamp": "2025-07-23T11:25:23.011Z",
    "tags": [
      "architecture",
      "sdr",
      "wifi",
      "gps",
      "tak",
      "defense",
      "research",
      "argos",
      "project-overview",
      "SDR",
      "network-analysis",
      "real-time",
      "tactical",
      "intelligence"
    ],
    "tool_used": null,
    "confidence_score": 1,
    "metadata": {
      "structured_data_used": true,
      "category": "architecture/overview",
      "summary": "Argos - Professional SDR & Network Analysis Console",
      "entity_extraction_version": "2.0-structured",
      "project": "/home/ubuntu/projects/Argos"
    },
    "embedding": null,
    "entity_key": "Argos",
    "version": 1,
    "previous_id": null,
    "is_latest": 1,
    "archived": 0,
    "consolidated_from": null
  }
]