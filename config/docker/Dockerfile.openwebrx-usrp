# Custom OpenWebRX with UHD support and JSON config auto-start
FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV UHD_IMAGES_DIR=/usr/share/uhd/images

# Install dependencies
RUN apt-get update && apt-get install -y \
    # Basic system utilities
    wget curl git build-essential cmake pkg-config \
    # Python and development libraries
    python3 python3-pip python3-dev python3-setuptools \
    # UHD dependencies
    libuhd-dev uhd-host \
    # Audio and signal processing
    libfftw3-dev librtlsdr-dev libairspy-dev libhackrf-dev \
    libsoapysdr-dev soapysdr-tools \
    && rm -rf /var/lib/apt/lists/*

# Download UHD images
RUN uhd_images_downloader

# Install Python dependencies for OpenWebRX
RUN pip3 install \
    psutil

# Clone and build OpenWebRX from source with UHD support
WORKDIR /opt
RUN git clone https://github.com/jketterl/openwebrx.git
WORKDIR /opt/openwebrx

# Install OpenWebRX
RUN python3 setup.py install

# Create OpenWebRX user and directories
RUN useradd --system openwebrx
RUN mkdir -p /var/lib/openwebrx /etc/openwebrx
RUN chown -R openwebrx:openwebrx /var/lib/openwebrx

# Copy configuration files (we'll mount these from host)
VOLUME ["/var/lib/openwebrx"]

# Create entrypoint script that handles JSON config format
RUN cat > /usr/local/bin/openwebrx-start.sh << 'EOF'
#!/bin/bash
set -e

# Ensure config directory exists
mkdir -p /var/lib/openwebrx

# If JSON config exists, use it; otherwise create minimal config
if [ -f "/var/lib/openwebrx/settings.json" ] && [ -f "/var/lib/openwebrx/sdrs.json" ]; then
    echo "Using JSON configuration files"
    
    # Create Python config from JSON (simplified conversion)
    cat > /etc/openwebrx/config_webrx.py << PYEOF
# Auto-generated from JSON config
import json

# Load settings
with open('/var/lib/openwebrx/settings.json', 'r') as f:
    settings = json.load(f)

# Load SDRs
with open('/var/lib/openwebrx/sdrs.json', 'r') as f:
    sdr_config = json.load(f)

# Apply settings
receiver_name = settings.get('receiver_name', 'OpenWebRX')
receiver_location = settings.get('receiver_location', 'Unknown')
waterfall_scheme = settings.get('waterfall_scheme', 'GoogleTurboWaterfall')
fft_fps = settings.get('fft_fps', 25)
audio_compression = settings.get('audio_compression', 'none')

# SDR configuration
sdrs = {}
for sdr_id, sdr_data in sdr_config.get('sdrs', {}).items():
    if sdr_data.get('enabled', False):
        sdr_config_dict = {
            "name": sdr_data.get('name', sdr_id),
            "type": sdr_data.get('type'),
            "enabled": True,
        }
        
        # Add device-specific parameters
        if 'device' in sdr_data:
            sdr_config_dict['device'] = sdr_data['device']
        if 'ppm' in sdr_data:
            sdr_config_dict['ppm'] = sdr_data['ppm']
        
        # Add profiles
        if 'profiles' in sdr_data:
            sdr_config_dict['profiles'] = {}
            for profile_id, profile_data in sdr_data['profiles'].items():
                sdr_config_dict['profiles'][profile_id] = {
                    'name': profile_data.get('name', profile_id),
                    'center_freq': profile_data.get('center_freq'),
                    'samp_rate': profile_data.get('samp_rate'),
                    'start_freq': profile_data.get('start_freq'),
                    'start_mod': profile_data.get('start_mod', 'nfm')
                }
                if 'rf_gain' in profile_data:
                    sdr_config_dict['profiles'][profile_id]['rf_gain'] = profile_data['rf_gain']
        
        sdrs[sdr_id] = sdr_config_dict

# Web server settings
web_port = 8073
PYEOF

else
    echo "No JSON config found, creating minimal Python config"
    
    cat > /etc/openwebrx/config_webrx.py << PYEOF
# Minimal OpenWebRX configuration
receiver_name = "OpenWebRX - USRP B205 Mini"
receiver_location = "Tactical Operations"
waterfall_scheme = "GoogleTurboWaterfall"
fft_fps = 25
audio_compression = "none"
web_port = 8073

# USRP configuration
sdrs = {
    "usrp": {
        "name": "USRP B205 Mini",
        "type": "uhd",
        "enabled": True,
        "device": "serial=32B0765",
        "profiles": {
            "fm": {
                "name": "FM Broadcast",
                "center_freq": 100000000,
                "samp_rate": 10000000,
                "start_freq": 100300000,
                "start_mod": "wfm",
                "rf_gain": 40
            }
        }
    }
}
PYEOF
fi

echo "Starting OpenWebRX..."
exec python3 /usr/local/bin/openwebrx
EOF

RUN chmod +x /usr/local/bin/openwebrx-start.sh

# Expose port
EXPOSE 8073

# Run as openwebrx user
USER openwebrx

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/openwebrx-start.sh"]