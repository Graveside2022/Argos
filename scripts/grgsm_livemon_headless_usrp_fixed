#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# USRP-compatible version of grgsm_livemon_headless
# This version actually works with USRP B205 Mini by using UHD directly

from gnuradio import blocks
from gnuradio import gr
from gnuradio import uhd
import sys
import signal
from gnuradio import eng_notation
from gnuradio.eng_arg import eng_float, intx
from gnuradio import gsm
import pmt
from gnuradio import network
from gnuradio.gsm import arfcn
from math import pi
import argparse

class grgsm_livemon_headless(gr.top_block):

    def __init__(self, args="", collector="localhost", collectorport='4729', 
                 fc=947.2e6, gain=30, osr=4, ppm=0, rec_len=1000000, 
                 samp_rate=2000000.052982, serverport='4729', shiftoff=400e3):
        
        gr.top_block.__init__(self, "Gr-gsm Livemon USRP", catch_exceptions=True)

        ##################################################
        # Parameters
        ##################################################
        self.args = args
        self.collector = collector
        self.collectorport = collectorport
        self.fc = fc
        self.gain = gain
        self.osr = osr
        self.ppm = ppm
        self.rec_len = rec_len
        self.samp_rate = samp_rate
        self.serverport = serverport
        self.shiftoff = shiftoff

        ##################################################
        # Blocks
        ##################################################
        
        # USRP Source - THE KEY DIFFERENCE FROM ORIGINAL
        print(f"Initializing USRP B205 Mini...")
        self.usrp_source = uhd.usrp_source(
            ",".join(("", "")),
            uhd.stream_args(
                cpu_format="fc32",
                args='',
                channels=list(range(0,1)),
            ),
        )
        
        self.usrp_source.set_samp_rate(samp_rate)
        self.usrp_source.set_center_freq(fc - shiftoff, 0)
        self.usrp_source.set_gain(gain, 0)
        self.usrp_source.set_antenna("RX2", 0)  # Use RX2 on B205 Mini
        
        print(f"USRP configured: {fc/1e6:.1f} MHz, gain {gain} dB, {samp_rate/1e6:.1f} Msps")
        
        # Rest of the blocks (same as original)
        self.network_socket_pdu_1 = network.socket_pdu('UDP_SERVER', '127.0.0.1', serverport, 1500, False)
        self.network_socket_pdu_0 = network.socket_pdu('UDP_CLIENT', collector, collectorport, 1500, False)
        self.gsm_sdcch8_demapper_0 = gsm.gsm_sdcch8_demapper(
            timeslot_nr=1,
        )
        self.gsm_receiver_0 = gsm.receiver(osr, [arfcn.downlink2arfcn(fc)], [], False)
        self.gsm_message_printer_1 = gsm.message_printer(pmt.intern(""), False,
            False, False)
        self.gsm_input_0 = gsm.gsm_input(
            ppm=ppm-int(ppm),
            osr=osr,
            fc=fc,
            samp_rate_in=samp_rate,
        )
        self.gsm_decryption_0 = gsm.decryption([], 1)
        self.gsm_control_channels_decoder_0_0 = gsm.control_channels_decoder()
        self.gsm_control_channels_decoder_0 = gsm.control_channels_decoder()
        self.gsm_clock_offset_control_0 = gsm.clock_offset_control(fc-shiftoff, samp_rate, osr)
        self.gsm_bcch_ccch_sdcch4_demapper_0 = gsm.gsm_bcch_ccch_sdcch4_demapper(
            timeslot_nr=0,
        )
        self.blocks_rotator_cc_0 = blocks.rotator_cc((-2*pi*shiftoff/samp_rate), False)
        self.blocks_head_0 = blocks.head(gr.sizeof_gr_complex*1, (int(rec_len*samp_rate)))

        ##################################################
        # Connections
        ##################################################
        self.msg_connect((self.gsm_bcch_ccch_sdcch4_demapper_0, 'bursts'), (self.gsm_control_channels_decoder_0, 'bursts'))
        self.msg_connect((self.gsm_clock_offset_control_0, 'ctrl'), (self.gsm_input_0, 'ctrl_in'))
        self.msg_connect((self.gsm_control_channels_decoder_0, 'msgs'), (self.gsm_message_printer_1, 'msgs'))
        self.msg_connect((self.gsm_control_channels_decoder_0, 'msgs'), (self.network_socket_pdu_0, 'pdus'))
        self.msg_connect((self.gsm_control_channels_decoder_0, 'msgs'), (self.network_socket_pdu_1, 'pdus'))
        self.msg_connect((self.gsm_control_channels_decoder_0_0, 'msgs'), (self.gsm_message_printer_1, 'msgs'))
        self.msg_connect((self.gsm_control_channels_decoder_0_0, 'msgs'), (self.network_socket_pdu_0, 'pdus'))
        self.msg_connect((self.gsm_control_channels_decoder_0_0, 'msgs'), (self.network_socket_pdu_1, 'pdus'))
        self.msg_connect((self.gsm_decryption_0, 'bursts'), (self.gsm_control_channels_decoder_0_0, 'bursts'))
        self.msg_connect((self.gsm_receiver_0, 'C0'), (self.gsm_bcch_ccch_sdcch4_demapper_0, 'bursts'))
        self.msg_connect((self.gsm_receiver_0, 'C0'), (self.gsm_sdcch8_demapper_0, 'bursts'))
        self.msg_connect((self.gsm_receiver_0, 'measurements'), (self.gsm_clock_offset_control_0, 'measurements'))
        self.msg_connect((self.gsm_sdcch8_demapper_0, 'bursts'), (self.gsm_decryption_0, 'bursts'))
        self.connect((self.blocks_head_0, 0), (self.blocks_rotator_cc_0, 0))
        self.connect((self.blocks_rotator_cc_0, 0), (self.gsm_input_0, 0))
        self.connect((self.gsm_input_0, 0), (self.gsm_receiver_0, 0))
        self.connect((self.usrp_source, 0), (self.blocks_head_0, 0))

def main():
    parser = argparse.ArgumentParser(description='USRP-compatible grgsm_livemon_headless')
    
    # Keep same interface as original for compatibility
    parser.add_argument('--args', type=str, default='', 
                       help='Device arguments (ignored - USRP auto-detected)')
    parser.add_argument('-f', '--fc', type=eng_float, default=947.2e6,
                       help='Set center frequency in Hz (e.g., 947.2M)')
    parser.add_argument('-g', '--gain', type=eng_float, default=50,
                       help='Set gain in dB')
    parser.add_argument('-s', '--samp-rate', type=eng_float, default=2000000.052982,
                       help='Set sample rate')
    parser.add_argument('-o', '--serverport', type=str, default='4729',
                       help='Set server port')
    parser.add_argument('-p', '--ppm', type=eng_float, default=0,
                       help='Set frequency correction in ppm')
    parser.add_argument('-r', '--rec-len', type=eng_float, default=1000000,
                       help='Set recording length in seconds')
    parser.add_argument('-c', '--collector', type=str, default='localhost',
                       help='Set collector address')
    parser.add_argument('--collectorport', type=str, default='4729',
                       help='Set collector port')
    parser.add_argument('-b', '--shiftoff', type=eng_float, default=400e3,
                       help='Set shift offset')
    parser.add_argument('--osr', type=intx, default=4,
                       help='Set oversampling ratio')
    
    args = parser.parse_args()
    
    # Create the top block
    tb = grgsm_livemon_headless(
        args=args.args,
        collector=args.collector,
        collectorport=args.collectorport,
        fc=args.fc,
        gain=args.gain,
        osr=args.osr,
        ppm=args.ppm,
        rec_len=args.rec_len,
        samp_rate=args.samp_rate,
        serverport=args.serverport,
        shiftoff=args.shiftoff
    )
    
    def sig_handler(sig=None, frame=None):
        tb.stop()
        tb.wait()
        sys.exit(0)

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    print("Starting GSM receiver...")
    tb.start()
    
    try:
        tb.wait()
    except KeyboardInterrupt:
        pass
    
    tb.stop()
    tb.wait()

if __name__ == '__main__':
    main()