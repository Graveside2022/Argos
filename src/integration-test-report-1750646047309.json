{
  "services": {
    "kismet": {
      "success": true,
      "data": {
        "status": "healthy",
        "service": "kismet-operations",
        "timestamp": "2025-06-23T02:34:04.108Z",
        "uptime": 271.464541303,
        "memory": {
          "rss": 76320768,
          "heapTotal": 20815872,
          "heapUsed": 18345976,
          "external": 3563319,
          "arrayBuffers": 205664
        },
        "port": 8003,
        "version": "2.0.0",
        "openwebrx_connected": false,
        "fft_buffer_size": 0,
        "connected_clients": 0
      }
    },
    "wigle": {
      "success": true,
      "data": {
        "status": "healthy",
        "service": "kismet-operations",
        "timestamp": "2025-06-23T02:34:04.130Z",
        "uptime": 12604.575573546,
        "memory": {
          "rss": 95907840,
          "heapTotal": 33042432,
          "heapUsed": 23644096,
          "external": 3607702,
          "arrayBuffers": 239742
        },
        "port": 8002,
        "version": "2.0.0",
        "openwebrx_connected": false,
        "fft_buffer_size": 0,
        "connected_clients": 0
      }
    },
    "spectrum": {
      "success": false,
      "error": ""
    }
  },
  "apis": {
    "Kismet Operations root": {
      "success": true,
      "statusCode": 200,
      "data": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n    <meta name=\"format-detection\" content=\"telephone=no\">\n    <meta http-equiv=\"cache-control\" content=\"no-cache, no-store, must-revalidate\">\n    <meta http-equiv=\"pragma\" content=\"no-cache\">\n    <meta http-equiv=\"expires\" content=\"0\">\n    <title>Kismet Operations Center</title>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        /* CSS Custom Properties for Theme Support */\n        :root {\n            /* Default Blue Cyber Theme */\n            --bg-primary: #030610;\n            --bg-secondary: rgba(12, 22, 48, 0.65);\n            --bg-tertiary: rgba(12, 22, 48, 0.85);\n            --bg-panel: rgba(12, 22, 48, 0.95);\n            \n            --text-primary: #d0d8f0;\n            --text-secondary: rgba(0, 220, 255, 0.8);\n            --text-muted: #737373;\n            \n            --border-primary: rgba(0, 190, 215, 0.35);\n            --border-secondary: rgba(0, 190, 215, 0.25);\n            \n            --accent-primary: #00d2ff;    /* Cyan accent */\n            --accent-success: #44ff44;    /* Green accent */\n            --accent-error: #ff4444;      /* Red accent */\n            --accent-warning: #f59e0b;    /* Amber accent */\n            \n            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.3);\n            --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.2);\n            --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);\n            \n            /* Original glow effects */\n            --glow-primary: 0 0 20px rgba(0, 220, 255, 0.5);\n            --glow-success: 0 0 20px rgba(68, 255, 68, 0.5);\n            --glow-error: 0 0 20px rgba(255, 68, 68, 0.5);\n        }\n        \n        /* Cursor.directory Dark Theme */\n        [data-theme=\"dark\"] {\n            --bg-primary: #0f172a;\n            --bg-secondary: rgba(30, 41, 59, 0.65);\n            --bg-tertiary: rgba(51, 65, 85, 0.85);\n            --bg-panel: rgba(30, 41, 59, 0.95);\n            \n            --text-primary: #f8fafc;\n            --text-secondary: #cbd5e1;\n            --text-muted: #94a3b8;\n            \n            --border-primary: rgba(71, 85, 105, 0.35);\n            --border-secondary: rgba(56, 189, 248, 0.25);\n            \n            --accent-primary: #38bdf8;\n            --accent-success: #10b981;\n            --accent-error: #ef4444;\n            --accent-warning: #f59e0b;\n            \n            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.4);\n            --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.3);\n            --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.2);\n            \n            --glow-primary: 0 0 20px rgba(56, 189, 248, 0.6);\n            --glow-success: 0 0 20px rgba(16, 185, 129, 0.5);\n            --glow-error: 0 0 20px rgba(239, 68, 68, 0.5);\n        }\n        \n        /* Phase 3.1: Foundation Changes - CSS Reset and Box Sizing */\n        *, *::before, *::after {\n            box-sizing: border-box;\n        }\n        \n        html {\n            height: 100%;\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            -webkit-text-size-adjust: 100%;\n            touch-action: manipulation;\n        }\n\n        body {\n            height: 100%;\n            margin: 0;\n            padding: 0;\n            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: var(--bg-primary);\n            color: var(--text-primary);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            overflow: hidden; /* Prevent body itself from scrolling */\n            box-sizing: border-box;\n            transition: background-color 0.3s ease, color 0.3s ease;\n        }\n        \n        /* Phase 3.2: Layout Transformation - Mobile body overflow fix */\n        @media (max-width: 768px) {\n            body {\n                overflow: auto;\n                height: auto;\n                min-height: 100vh;\n            }\n        }\n\n        body::before {\n            content: \"\";\n            position: fixed;\n            top: 0; left: 0;\n            width: 100%; height: 100%;\n            background:\n                linear-gradient(45deg, rgba(14, 165, 233, 0.02) 25%, transparent 25%, transparent 75%, rgba(14, 165, 233, 0.02) 75%),\n                linear-gradient(-45deg, rgba(14, 165, 233, 0.02) 25%, transparent 25%, transparent 75%, rgba(14, 165, 233, 0.02) 75%);\n            background-size: 70px 70px; /* Slightly larger grid */\n            z-index: -2; /* Ensure it's behind potential new layers */\n            opacity: 0.4; /* Subtler grid */\n            animation: background-pan 80s linear infinite; /* Slower pan */\n        }\n\n        /* Optional: Add a subtle static starfield or noise layer */\n        body::after {\n            content: \"\";\n            position: fixed;\n            top: 0; left: 0;\n            width: 100%; height: 100%;\n            background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><circle fill=\"%23203050\" cx=\"10\" cy=\"10\" r=\"0.3\"/><circle fill=\"%23203050\" cx=\"30\" cy=\"30\" r=\"0.2\"/><circle fill=\"%23203050\" cx=\"50\" cy=\"50\" r=\"0.4\"/><circle fill=\"%23203050\" cx=\"70\" cy=\"70\" r=\"0.1\"/><circle fill=\"%23203050\" cx=\"90\" cy=\"90\" r=\"0.3\"/><circle fill=\"%23203050\" cx=\"10\" cy=\"90\" r=\"0.2\"/><circle fill=\"%23203050\" cx=\"90\" cy=\"10\" r=\"0.4\"/><circle fill=\"%23203050\" cx=\"50\" cy=\"10\" r=\"0.1\"/><circle fill=\"%23203050\" cx=\"10\" cy=\"50\" r=\"0.3\"/><circle fill=\"%23203050\" cx=\"30\" cy=\"70\" r=\"0.2\"/><circle fill=\"%23203050\" cx=\"70\" cy=\"30\" r=\"0.3\"/></svg>');\n            background-size: 100px 100px;\n            opacity: 0.08;\n            z-index: -1;\n        }\n\n\n        @keyframes background-pan {\n            0% { background-position: 0% 0%; }\n            100% { background-position: 1200px 1200px; } /* Ensure it pans a large distance */\n        }\n\n        .top-banner {\n            width: 100%;\n            background: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-bottom: 2px solid var(--accent-primary);\n            box-shadow: var(--glow-primary);\n            padding: 15px 25px;\n            text-align: center;\n            box-sizing: border-box;\n            flex-shrink: 0;\n            z-index: 10;\n            position: relative;\n            transition: all 0.3s ease;\n            overflow: hidden;\n        }\n\n        .top-banner::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 200%;\n            height: 100%;\n            background: linear-gradient(90deg,\n                transparent 0%,\n                rgba(124, 58, 237, 0.1) 25%,\n                rgba(124, 58, 237, 0.2) 50%,\n                rgba(124, 58, 237, 0.1) 75%,\n                transparent 100%);\n            animation: banner-scan 4s linear infinite;\n        }\n\n        .top-banner::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: \n                radial-gradient(circle at 20% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%),\n                radial-gradient(circle at 80% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%);\n            animation: radial-pulse 4s ease-in-out infinite;\n        }\n\n        @keyframes radial-pulse {\n            0%, 100% { opacity: 0.5; }\n            50% { opacity: 1; }\n        }\n\n        .top-banner h1 {\n            color: var(--text-primary);\n            text-transform: uppercase;\n            letter-spacing: 12px;\n            font-size: 2.4em;\n            font-weight: 800;\n            margin: 0;\n            text-shadow: var(--glow-primary);\n            position: relative;\n            font-family: 'Inter', sans-serif;\n            background: linear-gradient(90deg, \n                var(--text-primary) 0%,\n                var(--accent-primary) 25%,\n                var(--text-primary) 50%,\n                var(--accent-primary) 75%,\n                var(--text-primary) 100%);\n            -webkit-background-clip: text;\n            background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-size: 200% auto;\n            animation: shine 3s linear infinite;\n        }\n        \n        /* Phase 3.3: Top Banner Mobile Optimization */\n        @media (max-width: 768px) {\n            .top-banner {\n                padding: 10px 15px;\n            }\n            \n            .top-banner h1 {\n                font-size: clamp(1.2rem, 4vw, 2rem);\n                letter-spacing: 4px;\n            }\n            \n            .top-banner::before,\n            .top-banner::after {\n                animation: none; /* Disable complex animations on mobile */\n            }\n        }\n\n        @keyframes shine {\n            to {\n                background-position: 200% center;\n            }\n        }\n\n        .minimized-tabs {\n            background-color: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-bottom: 1px solid rgba(0, 190, 215, 0.35);\n            box-shadow: 0 2px 10px rgba(0, 150, 180, 0.1);\n            padding: 2px 20px;\n            display: flex;\n            gap: 10px;\n            position: fixed;\n            top: 60px;\n            left: 0;\n            right: 0;\n            z-index: 999;\n            height: 15px;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n        \n        /* Phase 3.2: Fixed Positioning Removal for Mobile */\n        @media (max-width: 768px) {\n            .minimized-tabs {\n                position: relative;\n                width: 100%;\n                top: auto;\n            }\n        }\n\n        .minimized-tab {\n            background-color: rgba(0, 190, 215, 0.15);\n            border: 1px solid rgba(0, 190, 215, 0.35);\n            padding: 0 10px;\n            border-radius: 3px;\n            display: flex;\n            align-items: center;\n            gap: 5px;\n            font-size: 0.8em;\n            color: rgba(124, 58, 237, 0.8);\n            cursor: pointer;\n            height: 15px;\n            line-height: 15px;\n        }\n\n        .minimized-tab:hover {\n            background-color: rgba(0, 190, 215, 0.25);\n        }\n\n        .restore-button {\n            background: none;\n            border: none;\n            color: rgba(124, 58, 237, 0.8);\n            cursor: pointer;\n            padding: 0;\n            font-size: 0.8em;\n            line-height: 1;\n        }\n\n        .restore-button:hover {\n            color: rgba(124, 58, 237, 1);\n        }\n\n        .page-container {\n            position: fixed;\n            top: 100px;\n            left: 0;\n            right: 0;\n            bottom: 30px;\n            height: calc(100vh - 130px);\n            overflow: hidden;\n        }\n\n        .main-content-area {\n            display: grid;\n            grid-template-columns: 300px 1.2fr 0.8fr; /* Three columns: left-stack(300px), middle(larger), right(smaller) */\n            grid-template-rows: 1fr; /* Single row, all items same height */\n            align-items: start; /* Align all items to top */\n            align-content: start; /* Align grid content to top */\n            gap: 20px; /* Consistent spacing between all columns */\n            width: 100%;\n            height: 100%;\n            padding: 20px;\n            margin: 0;\n            box-sizing: border-box;\n            overflow-y: auto;\n        }\n        \n        /* Phase 3.2: Grid System Transformation - Mobile First */\n        @media (max-width: 600px) {\n            .main-content-area {\n                grid-template-columns: 1fr; /* Mobile: single column */\n                grid-template-rows: auto;\n                height: auto;\n                overflow: visible;\n                gap: 8px;\n            }\n            \n            .side-stack,\n            .middle-long-box,\n            .right-stack {\n                width: 100%;\n            }\n        }\n        \n        @media (min-width: 601px) and (max-width: 1023px) {\n            .main-content-area {\n                grid-template-columns: 1fr; /* Tablet: single column for better readability */\n                grid-template-rows: auto;\n                height: auto;\n                overflow: visible;\n                gap: 12px;\n                padding: 12px;\n            }\n            \n            .side-stack,\n            .middle-long-box,\n            .right-stack {\n                width: 100%;\n            }\n        }\n\n        .container {\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            width: 100vw;\n            background: linear-gradient(135deg, #0a192f 0%, #020c1b 100%);\n            color: var(--accent-primary);\n            font-family: 'Courier New', monospace;\n            padding: 0;\n            margin: 0;\n            box-sizing: border-box;\n            overflow: hidden;\n            padding-bottom: 20px; /* Reduced padding for smaller footer */\n        }\n\n        .header {\n            background-color: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-bottom: 1px solid rgba(0, 190, 215, 0.35);\n            padding: 0;\n            margin: 0;\n            box-sizing: border-box;\n            height: 60px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n        \n        /* Phase 3.2: Priority 2 - Convert Fixed Heights to Responsive */\n        @media (max-width: 768px) {\n            .header {\n                height: auto;\n                min-height: 60px;\n                padding: 0.75rem;\n            }\n        }\n\n        .grid-item {\n            background-color: var(--bg-secondary);\n            backdrop-filter: blur(12px);\n            border: 1px solid var(--border-primary);\n            box-shadow: var(--shadow-md);\n            border-radius: 0;\n            padding: 0;\n            position: relative;\n            transition: all 0.3s ease;\n        }\n        \n        /* Phase 3.2: Grid Item Responsive Heights */\n        @media (max-width: 768px) {\n            .grid-item {\n                height: auto;\n                min-height: 200px;\n                max-height: 90vh;\n            }\n        }\n\n        .grid-item::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            border: 2px solid transparent;\n            pointer-events: none;\n        }\n\n        .grid-item:hover::before {\n            border-color: rgba(0, 190, 215, 0.35);\n        }\n\n        .grid-item .resize-handle {\n            position: absolute;\n            background: rgba(0, 190, 215, 0.35);\n            pointer-events: all;\n            z-index: 1000;\n            opacity: 0;\n            transition: opacity 0.2s;\n        }\n\n        .grid-item:hover .resize-handle {\n            opacity: 1;\n        }\n        \n        /* Phase 3.4: Mobile-Specific Controls - Hide resize handles */\n        @media (max-width: 768px) {\n            .resize-handle {\n                display: none !important;\n            }\n        }\n\n        .grid-item .resize-handle.top {\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 3px;\n            cursor: ns-resize;\n        }\n\n        .grid-item .resize-handle.bottom {\n            bottom: 0;\n            left: 0;\n            right: 0;\n            height: 3px;\n            cursor: ns-resize;\n        }\n\n        .grid-item .resize-handle.left {\n            left: 0;\n            top: 0;\n            bottom: 0;\n            width: 3px;\n            cursor: ew-resize;\n        }\n\n        .grid-item .resize-handle.right {\n            right: 0;\n            top: 0;\n            bottom: 0;\n            width: 3px;\n            cursor: ew-resize;\n        }\n\n        .grid-item .resize-handle.top-left {\n            top: 0;\n            left: 0;\n            width: 6px;\n            height: 6px;\n            cursor: nw-resize;\n        }\n\n        .grid-item .resize-handle.top-right {\n            top: 0;\n            right: 0;\n            width: 6px;\n            height: 6px;\n            cursor: ne-resize;\n        }\n\n        .grid-item .resize-handle.bottom-left {\n            bottom: 0;\n            left: 0;\n            width: 6px;\n            height: 6px;\n            cursor: sw-resize;\n        }\n\n        .grid-item .resize-handle.bottom-right {\n            bottom: 0;\n            right: 0;\n            width: 6px;\n            height: 6px;\n            cursor: se-resize;\n        }\n\n        .grid-item * {\n            resize: none;\n            cursor: default !important;\n        }\n        \n        /* Override cursor for control buttons */\n        .grid-item .control-button-small {\n            cursor: pointer !important;\n        }\n        \n        /* Enable move cursor on desktop for draggable headers */\n        @media (min-width: 769px) {\n            .grid-item .box-header {\n                cursor: move !important;\n            }\n            \n            /* Remove position override to allow dragging */\n        }\n\n        .grid-item.expanded {\n            display: none;\n        }\n\n        .grid-item.expanded.middle {\n            display: none;\n        }\n\n        .grid-item.minimized {\n            display: none;\n        }\n\n        .grid-placeholder {\n            display: none;\n        }\n\n        .grid-item.dragging {\n            display: none;\n        }\n\n        .box-content {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            height: 100%;\n            overflow: hidden;\n            padding: 4px;\n            width: 100%;\n        }\n\n        .box-header {\n            background: var(--bg-tertiary);\n            border: 1px solid var(--border-primary);\n            border-bottom: 2px solid var(--accent-primary);\n            padding: 5px 20px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            position: relative;\n            height: 20px;\n            box-shadow: var(--shadow-sm);\n            backdrop-filter: blur(8px);\n            overflow: hidden;\n            transition: all 0.3s ease;\n        }\n\n        .box-header::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 200%;\n            height: 100%;\n            background: linear-gradient(90deg,\n                transparent 0%,\n                rgba(124, 58, 237, 0.1) 25%,\n                rgba(124, 58, 237, 0.2) 50%,\n                rgba(124, 58, 237, 0.1) 75%,\n                transparent 100%);\n            animation: header-scan 3s linear infinite;\n        }\n\n        .box-header::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: \n                radial-gradient(circle at 20% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%),\n                radial-gradient(circle at 80% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%);\n            animation: radial-pulse 4s ease-in-out infinite;\n        }\n\n        .box-header h2 {\n            color: #fff;\n            margin: 0;\n            font-size: 1em;\n            font-weight: 700;\n            text-align: center;\n            width: 100%;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n            text-shadow: \n                0 0 10px rgba(124, 58, 237, 0.8),\n                0 0 20px rgba(124, 58, 237, 0.5),\n                0 0 30px rgba(124, 58, 237, 0.3);\n            font-family: 'Inter', sans-serif;\n            position: relative;\n            background: linear-gradient(90deg, \n                #fff 0%,\n                #00d2ff 25%,\n                #fff 50%,\n                #00d2ff 75%,\n                #fff 100%);\n            -webkit-background-clip: text;\n            background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-size: 200% auto;\n            animation: shine 3s linear infinite;\n        }\n\n        .box-header h2::before,\n        .box-header h2::after {\n            content: '';\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 8px;\n            height: 8px;\n            background: rgba(124, 58, 237, 0.9);\n            border-radius: 50%;\n            box-shadow: \n                0 0 10px rgba(124, 58, 237, 0.8),\n                0 0 20px rgba(124, 58, 237, 0.6),\n                0 0 30px rgba(124, 58, 237, 0.4);\n            animation: dot-pulse 2s ease-in-out infinite;\n            will-change: transform, opacity;\n            z-index: 1;\n        }\n\n        .box-header h2::before {\n            left: -20px;\n            animation-delay: 0s;\n        }\n\n        .box-header h2::after {\n            right: -20px;\n            animation-delay: 1s;\n        }\n\n        @keyframes dot-pulse {\n            0% { \n                transform: translateY(-50%) scale(1); \n                opacity: 0.8;\n                box-shadow: \n                    0 0 10px rgba(124, 58, 237, 0.8),\n                    0 0 20px rgba(124, 58, 237, 0.6),\n                    0 0 30px rgba(124, 58, 237, 0.4);\n            }\n            50% { \n                transform: translateY(-50%) scale(1.2); \n                opacity: 1;\n                box-shadow: \n                    0 0 15px rgba(124, 58, 237, 0.9),\n                    0 0 30px rgba(124, 58, 237, 0.7),\n                    0 0 45px rgba(124, 58, 237, 0.5);\n            }\n            100% { \n                transform: translateY(-50%) scale(1); \n                opacity: 0.8;\n                box-shadow: \n                    0 0 10px rgba(124, 58, 237, 0.8),\n                    0 0 20px rgba(124, 58, 237, 0.6),\n                    0 0 30px rgba(124, 58, 237, 0.4);\n            }\n        }\n\n        .box-controls {\n            position: absolute;\n            right: 8px;\n            top: 50%;\n            transform: translateY(-50%);\n            display: flex;\n            gap: 5px;\n            align-items: center;\n            z-index: 100;\n        }\n\n        .control-button-small {\n            background: rgba(0, 0, 0, 0.5);\n            border: 1px solid var(--accent-primary);\n            border-radius: 4px;\n            color: var(--accent-primary);\n            cursor: pointer !important;\n            font-size: 1.2em;\n            padding: 8px 12px;\n            transition: all 0.3s ease;\n            z-index: 101;\n            text-shadow: var(--glow-primary);\n            pointer-events: auto !important;\n            position: relative;\n            min-width: 44px;\n            min-height: 44px;\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            -webkit-tap-highlight-color: transparent;\n        }\n\n        .control-button-small:hover {\n            color: var(--text-primary);\n            text-shadow: var(--glow-primary);\n            transform: translateY(-2px);\n            background: rgba(0, 210, 255, 0.2);\n            border-color: var(--text-primary);\n        }\n        \n        .control-button-small:active {\n            transform: scale(0.95);\n            background: rgba(0, 210, 255, 0.3);\n        }\n\n        .grid-item h2 {\n            color: #a0e0ff;\n            border-bottom: none;\n            padding-bottom: 0;\n            margin: 0;\n            letter-spacing: 1.5px;\n            font-weight: 500;\n            font-size: 1.1em;\n            text-shadow: 0 0 5px rgba(0, 200, 220, 0.3);\n        }\n\n        .minimize-button {\n            background: none;\n            border: none;\n            color: var(--accent-primary);\n            cursor: pointer;\n            font-size: 1.2em;\n            padding: 0 5px;\n            transition: transform 0.3s ease;\n        }\n\n        .minimize-button:hover {\n            color: #00f2ff;\n            text-shadow: 0 0 8px rgba(124, 58, 237, 0.6);\n        }\n\n        .minimize-button.minimized {\n            transform: rotate(180deg);\n        }\n\n        .grid-item.minimized .grid-item-content {\n            display: none;\n        }\n\n        .grid-item-content {\n            flex-grow: 1;\n            overflow-y: auto;\n            padding-right: 5px;\n            scrollbar-width: thin;\n            scrollbar-color: rgba(124, 58, 237, 0.5) rgba(3, 6, 16, 0.5);\n        }\n        \n        /* Special styling for instructions box content */\n        #instructions .grid-item-content {\n            overflow-y: visible; /* Don't scroll the content */\n            padding: 15px;\n        }\n        \n        /* Custom scrollbar for Webkit browsers */\n        .grid-item-content::-webkit-scrollbar {\n            width: 6px;\n        }\n        .grid-item-content::-webkit-scrollbar-track {\n            background: rgba(3, 6, 16, 0.3);\n            border-radius: 3px;\n        }\n        .grid-item-content::-webkit-scrollbar-thumb {\n            background-color: rgba(124, 58, 237, 0.4);\n            border-radius: 3px;\n            border: 1px solid rgba(124, 58, 237, 0.2);\n        }\n        .grid-item-content::-webkit-scrollbar-thumb:hover {\n            background-color: rgba(124, 58, 237, 0.6);\n        }\n\n\n        .middle-long-box, .right-long-box {\n            /* Inherits .grid-item styles, full height from grid row */\n            width: 100%;\n            height: 100%;\n            box-sizing: border-box;\n        }\n\n        /* Kismet data feed goes in middle column - keep its current size */\n        #wifi-data-feed.middle-long-box {\n            grid-column: 2;\n            grid-row: 1;\n            width: 100%; /* Fill available space */\n            height: 100%; /* Full height of grid cell */\n        }\n\n        /* Globe box goes in right column - fill remaining space */\n        #cesium-globe {\n            grid-column: 3;\n            grid-row: 1;\n            width: 100%; /* Fill all remaining white space */\n            height: 100%; /* Match middle column height */\n        }\n\n        /* Ensure proper grid positioning for all columns */\n        .main-content-area > .side-stack {\n            grid-column: 1;\n            grid-row: 1;\n            align-self: start;\n            margin-top: 0;\n        }\n        \n        .main-content-area > .middle-long-box {\n            grid-column: 2;\n            grid-row: 1;\n            align-self: start;\n            margin-top: 0;\n        }\n        \n        .main-content-area > .right-long-box {\n            grid-column: 3;\n            grid-row: 1;\n            align-self: start;\n            margin-top: 0;\n        }\n\n        .side-stack {\n            display: flex;\n            flex-direction: column;\n            gap: 10px; /* Increased gap to match main grid */\n            height: 100%; \n        }\n\n\n        /* Right long box styles - matches middle-long-box structure */\n        .right-long-box {\n            /* Same as middle-long-box - no flex, just a container */\n        }\n\n        /* Cesium globe specific styles */\n        #cesium-globe {\n            height: calc(100% + 15px); /* Extend bottom of box */\n            flex: 1;\n            margin-top: -10px; /* Move globe box up slightly to align with Kismet data feed */\n            margin-bottom: -15px; /* Allow box to extend beyond normal bounds */\n        }\n\n        #cesium-container {\n            background: #000;\n            border-radius: 4px;\n            overflow: hidden;\n        }\n\n        /* Cesium widget overrides */\n        .cesium-viewer .cesium-widget-credits {\n            display: none !important;\n        }\n\n        .cesium-viewer {\n            font-family: 'Inter', sans-serif;\n        }\n\n        .cesium-controls button {\n            width: 30px;\n            height: 30px;\n            font-size: 18px;\n            font-weight: bold;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        /* Position info styling */\n        #position-info {\n            pointer-events: none;\n            max-width: 200px;\n        }\n\n        /* Three-column responsive adjustments */\n        @media (max-width: 1400px) {\n            .main-content-area {\n                grid-template-columns: 280px 1.2fr 0.8fr;\n            }\n        }\n\n        @media (max-width: 1200px) {\n            .main-content-area {\n                grid-template-columns: 1fr;\n            }\n            \n            .side-stack,\n            .right-long-box {\n                width: 100%;\n            }\n            \n            .side-stack {\n                order: 1;\n            }\n            \n            .middle-long-box {\n                order: 2;\n            }\n            \n            .right-long-box {\n                order: 3;\n            }\n        }\n\n        #system-message {\n            font-size: 1.1em;\n            color: #00e2ff;\n            transition: opacity 0.5s ease-in-out, text-shadow 0.3s ease;\n            font-weight: 400;\n            text-align: center;\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 10px;\n            text-shadow: 0 0 6px rgba(124, 58, 237, 0.6);\n            animation: pulse-glow 2s infinite alternate;\n        }\n\n        @keyframes pulse-glow {\n            from { text-shadow: 0 0 6px rgba(124, 58, 237, 0.6); opacity: 0.8; }\n            to { text-shadow: 0 0 12px rgba(124, 58, 237, 0.9), 0 0 20px rgba(124, 58, 237, 0.4); opacity: 1; }\n        }\n\n        .status-found {\n            animation: none !important;\n            text-shadow: 0 0 8px rgba(124, 58, 237, 0.8);\n            color: #00ff00;\n        }\n\n        .data-feed .feed-item {\n            background-color: rgba(0, 50, 80, 0.55); /* Adjusted for glassmorphism */\n            border-left: 3px solid #00bcd4; /* Slightly thicker, different cyan */\n            padding: 7px 10px; /* More padding */\n            margin-bottom: 6px; /* Slightly more margin */\n            border-radius: 0 4px 4px 0; /* More rounded */\n            font-size: 0.85em; /* Slightly larger */\n            color: #c0e8ff; /* Softer blue */\n            text-align: left;\n            transition: background-color 0.3s ease, border-left-color 0.3s ease, transform 0.2s ease;\n        }\n        \n        /* Phase 3.3: Data Feeds - Improve scrolling and readability */\n        .device-item-wrapper,\n        #wifi-feed {\n            max-height: 300px;\n            -webkit-overflow-scrolling: touch;\n        }\n        \n        @media (max-width: 768px) {\n            .feed-item {\n                font-size: 0.875rem;\n                padding: 0.5rem;\n            }\n        }\n        \n        .data-feed .feed-item:hover {\n            background-color: rgba(0, 70, 100, 0.75);\n            border-left-color: #00f2ff; /* Brighter on hover */\n            transform: translateX(3px);\n        }\n\n        .feed-item-blink {\n            animation: blink-animation 1.5s infinite ease-in-out; /* Smoother blink */\n        }\n\n        @keyframes blink-animation {\n            0%, 100% { border-left-color: #ffdd57; color: #ffdd57; box-shadow: 0 0 5px rgba(255,221,87,0.3); }\n            50% { border-left-color: #00bcd4; color: #c0e8ff; box-shadow: none; }\n        }\n\n        /* Tab Styles */\n        .tab-nav {\n            display: flex;\n            flex-direction: column; \n            margin-bottom: 10px;\n            flex-shrink: 0; /* Prevent tab nav from shrinking if content is too large */\n        }\n        \n        /* Phase 3.3: Navigation Tabs - Mobile scrollable */\n        @media (max-width: 600px) {\n            .tabs {\n                overflow-x: auto;\n                -webkit-overflow-scrolling: touch;\n            }\n            \n            .tab {\n                flex-shrink: 0;\n                min-width: 100px;\n            }\n        }\n\n        .tab-button {\n            background-color: rgba(0, 50, 80, 0.55);\n            border: none; \n            outline: none;\n            border-left: 3px solid #00bcd4;\n            padding: 8px 12px; /* Slightly more padding for clickable area */\n            margin-bottom: 6px; \n            border-radius: 0 4px 4px 0;\n            font-size: 0.9em; /* Slightly larger than feed items for clarity */\n            color: #c0e8ff;\n            text-align: left;\n            cursor: pointer;\n            transition: background-color 0.3s ease, border-left-color 0.3s ease, transform 0.2s ease, color 0.3s ease;\n            width: 100%; \n            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; \n            font-weight: 400;\n        }\n\n        .tab-button:hover {\n            background-color: rgba(0, 70, 100, 0.75);\n            border-left-color: #00f2ff;\n            transform: translateX(3px);\n            color: #e0f8ff;\n        }\n\n        .tab-button.active-tab {\n            background-color: rgba(0, 80, 120, 0.85); \n            border-left-color: #00f2ff; \n            color: #ffffff; \n            font-weight: 500; /* Bolder active tab */\n        }\n\n        .tab-content {\n            display: none;\n            padding: 10px;\n            background-color: rgba(0, 50, 80, 0.55);\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n\n        .tab-content.active {\n            display: block;\n        }\n\n        .tab-pane {\n            display: none; \n            padding: 5px 2px; /* Minimal padding for content area */\n            animation: fadeIn 0.4s ease-in-out;\n            /* The parent .grid-item-content already handles overflow-y: auto */\n        }\n        \n        .tab-pane p {\n            margin-bottom: 8px;\n            line-height: 1.5;\n        }\n        .tab-pane p strong {\n            color: #a0e0ff; /* Match h2 color */\n            font-weight: 500;\n        }\n        .tab-pane code {\n            background-color: rgba(0, 30, 50, 0.7);\n            padding: 2px 5px;\n            border-radius: 3px;\n            font-family: 'Courier New', Courier, monospace;\n            font-size: 0.9em;\n            color: #86cfff;\n            display: block; /* Make code blocks take full width */\n            margin-top: 3px;\n            white-space: pre-wrap; /* Allow wrapping for long commands */\n            border: 1px solid rgba(0, 190, 215, 0.2);\n        }\n\n\n        .tab-pane.active-pane {\n            display: block; \n        }\n\n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(8px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        /* End Tab Styles */\n\n        .footer {\n            background-color: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-top: 1px solid rgba(0, 190, 215, 0.35);\n            box-shadow: 0 -2px 10px rgba(0, 150, 180, 0.1);\n            padding: 5px 20px;\n            text-align: center;\n            color: rgba(124, 58, 237, 0.8);\n            font-size: 0.8em;\n            position: fixed;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            z-index: 1000;\n            height: 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-family: 'Courier New', monospace;\n        }\n        \n        /* Phase 3.2: Footer Mobile Positioning */\n        @media (max-width: 768px) {\n            .footer {\n                position: relative;\n                bottom: auto;\n            }\n        }\n\n        .footer-content {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            max-width: 1200px;\n            margin: 0 auto;\n            gap: 15px;\n        }\n\n        .footer-text {\n            color: rgba(124, 58, 237, 0.8);\n            font-size: 0.9em;\n            letter-spacing: 0.5px;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n\n        .footer-separator {\n            color: rgba(0, 190, 215, 0.5);\n            font-size: 0.8em;\n        }\n\n        .footer-symbol {\n            color: rgba(124, 58, 237, 0.9);\n            font-size: 0.9em;\n            margin: 0 2px;\n        }\n        \n        /* ENHANCED MOBILE OPTIMIZATIONS */\n        \n        /* iOS Specific Fixes */\n        @supports (-webkit-touch-callout: none) {\n            /* iOS Safari specific styles */\n            body {\n                -webkit-touch-callout: none;\n                -webkit-user-select: none;\n                -webkit-tap-highlight-color: transparent;\n            }\n            \n            /* Fix for iOS Safari bounce scrolling */\n            .main-content-area {\n                -webkit-overflow-scrolling: touch;\n            }\n            \n            /* Prevent iOS zoom on input focus */\n            input, select, textarea, button {\n                font-size: 16px !important;\n            }\n            \n            /* Safe area insets for iPhone X and newer */\n            .top-banner {\n                padding-top: max(15px, env(safe-area-inset-top));\n            }\n            \n            .footer {\n                padding-bottom: max(5px, env(safe-area-inset-bottom));\n            }\n            \n            .page-container {\n                padding-left: env(safe-area-inset-left);\n                padding-right: env(safe-area-inset-right);\n            }\n        }\n        \n        /* iPhone-specific media queries */\n        /* iPhone SE, 6/7/8 */\n        @media only screen \n        and (min-device-width: 375px) \n        and (max-device-width: 667px) \n        and (-webkit-min-device-pixel-ratio: 2) {\n            .top-banner h1 {\n                font-size: 1.3rem;\n                letter-spacing: 3px;\n            }\n            \n            .control-button {\n                padding: 12px 16px;\n                font-size: 0.875rem;\n            }\n            \n            .box-header h2 {\n                font-size: 0.85rem;\n            }\n        }\n        \n        /* iPhone 6/7/8 Plus */\n        @media only screen \n        and (min-device-width: 414px) \n        and (max-device-width: 736px) \n        and (-webkit-min-device-pixel-ratio: 3) {\n            .top-banner h1 {\n                font-size: 1.4rem;\n            }\n        }\n        \n        /* iPhone X, XS, 11 Pro */\n        @media only screen \n        and (min-device-width: 375px) \n        and (max-device-width: 812px) \n        and (-webkit-min-device-pixel-ratio: 3) {\n            .page-container {\n                top: calc(100px + env(safe-area-inset-top)) !important;\n                bottom: calc(60px + env(safe-area-inset-bottom)) !important;\n            }\n        }\n        \n        /* iPhone 12/13/14 Mini */\n        @media only screen \n        and (min-device-width: 360px) \n        and (max-device-width: 780px) \n        and (-webkit-min-device-pixel-ratio: 3) {\n            .control-button {\n                padding: 11px 14px;\n                font-size: 0.85rem;\n            }\n        }\n        \n        /* iPhone 12/13/14 Pro Max */\n        @media only screen \n        and (min-device-width: 428px) \n        and (max-device-width: 926px) \n        and (-webkit-min-device-pixel-ratio: 3) {\n            .top-banner h1 {\n                font-size: 1.5rem;\n            }\n        }\n        \n        /* Mobile Layout Adjustments */\n        @media (max-width: 768px) {\n            /* Prevent horizontal scroll */\n            html, body {\n                overflow-x: hidden;\n                width: 100%;\n            }\n            \n            /* Page container adjustment */\n            .page-container {\n                position: static !important;\n                top: auto !important;\n                bottom: auto !important;\n                min-height: 100vh;\n                padding-bottom: 60px; /* Space for footer */\n                width: 100%;\n                max-width: 100vw;\n            }\n            \n            /* Main content area improvements */\n            .main-content-area {\n                flex: none !important;\n                overflow-y: visible !important;\n                position: static !important;\n                padding: 4px;\n            }\n            \n            /* Grid items mobile layout */\n            .side-stack {\n                display: block;\n                margin-bottom: 8px;\n            }\n            \n            .side-stack .grid-item {\n                margin-bottom: 8px;\n                min-height: 150px;\n            }\n            \n            /* Adjust header sizes for mobile */\n            .box-header h2 {\n                font-size: 0.9em;\n                letter-spacing: 1px;\n            }\n            \n            .box-header h2::before,\n            .box-header h2::after {\n                display: none; /* Hide decorative dots on mobile */\n            }\n            \n            /* Button adjustments */\n            .control-button {\n                padding: 12px 16px;\n                font-size: 0.9em;\n                min-height: 44px; /* iOS touch target size */\n                -webkit-appearance: none;\n                border-radius: 8px;\n                touch-action: manipulation; /* Prevent double-tap zoom */\n                position: relative;\n                overflow: hidden;\n            }\n            \n            /* iOS button active state */\n            .control-button:active {\n                transform: scale(0.98);\n                opacity: 0.9;\n            }\n            \n            .button-group {\n                grid-template-columns: 1fr !important;\n                gap: 8px !important;\n            }\n            \n            /* Service status indicators */\n            .service-status {\n                margin-top: 10px !important;\n                padding-top: 10px !important;\n            }\n            \n            /* GPS info text size */\n            #gps-info {\n                font-size: 0.85em;\n            }\n            \n            /* Feed items */\n            #devices-list,\n            #wifi-feed {\n                max-height: 150px !important;\n                -webkit-overflow-scrolling: touch;\n                overflow-y: auto;\n                overscroll-behavior: contain;\n            }\n            \n            /* Better scrolling for grid items on iOS */\n            .grid-item-content {\n                -webkit-overflow-scrolling: touch;\n                overscroll-behavior: contain;\n            }\n            \n            /* Footer adjustments */\n            .footer-text {\n                font-size: 0.75em;\n                flex-wrap: wrap;\n                justify-content: center;\n            }\n            \n            .footer-separator {\n                display: none;\n            }\n            \n            /* Mobile adjustments */\n            \n            .resizable-frame .resize-handle {\n                display: none !important;\n            }\n            \n            /* Hide dragging on mobile */\n            .box-header {\n                cursor: default !important;\n            }\n            \n            /* Tab navigation improvements */\n            .tab-nav {\n                flex-direction: row;\n                overflow-x: auto;\n                -webkit-overflow-scrolling: touch;\n                gap: 5px;\n            }\n            \n            .tab-button {\n                flex: 0 0 auto;\n                min-width: 80px;\n                padding: 6px 10px;\n                margin-bottom: 0;\n            }\n            \n            /* System message */\n            #system-message {\n                font-size: 0.9em;\n                padding: 8px;\n            }\n            \n            /* Notification positioning */\n            .notification {\n                top: 10px;\n                left: 10px;\n                right: 10px;\n                transform: none;\n                font-size: 0.9em;\n                padding: 10px 20px;\n            }\n            \n            /* Status message positioning */\n            .status-message {\n                top: 10px;\n                right: 10px;\n                left: 10px;\n                font-size: 0.85em;\n                padding: 10px 15px;\n            }\n        }\n        \n        /* Small mobile devices */\n        @media (max-width: 480px) {\n            .top-banner h1 {\n                font-size: 1rem;\n                letter-spacing: 2px;\n            }\n            \n            .box-header {\n                padding: 5px 10px;\n            }\n            \n            .control-button {\n                font-size: 0.85em;\n                padding: 8px 12px;\n            }\n            \n            #gps-info {\n                font-size: 0.8em;\n            }\n        }\n        \n        /* iPhone landscape mode */\n        @media only screen \n        and (max-device-height: 428px) \n        and (orientation: landscape) {\n            .top-banner {\n                padding: 5px 15px;\n                padding-left: max(15px, env(safe-area-inset-left));\n                padding-right: max(15px, env(safe-area-inset-right));\n            }\n            \n            .top-banner h1 {\n                font-size: 1.1rem;\n            }\n            \n            .main-content-area {\n                grid-template-columns: repeat(2, 1fr);\n                gap: 4px;\n                padding: 4px;\n            }\n            \n            .grid-item {\n                min-height: 120px;\n            }\n            \n            \n            .minimized-tabs {\n                display: none; /* Hide in landscape to save space */\n            }\n        }\n        \n        /* Touch-friendly hover states */\n        @media (hover: none) and (pointer: coarse) {\n            .control-button:active {\n                background: linear-gradient(90deg, #222 0%, #00d2ff 100%);\n                transform: translateY(-1px);\n            }\n            \n            .tab-button:active {\n                background-color: rgba(0, 70, 100, 0.75);\n                border-left-color: #00f2ff;\n            }\n            \n            .feed-item:active {\n                background-color: rgba(0, 70, 100, 0.75);\n                border-left-color: #00f2ff;\n            }\n        }\n\n        .control-button {\n            background: linear-gradient(90deg, #00d2ff 0%, #222 100%);\n            color: #fff;\n            border: none;\n            border-radius: 8px;\n            padding: 12px 20px;\n            font-size: 1em;\n            font-family: inherit;\n            font-weight: 500;\n            cursor: pointer;\n            box-shadow: 0 4px 16px rgba(0, 210, 255, 0.15);\n            transition: all 0.3s ease;\n            text-align: center;\n            text-decoration: none;\n        }\n        \n        /* Phase 3.2: Touch Target Enhancement for Mobile */\n        @media (max-width: 768px) {\n            .control-button, .control-button-small {\n                min-width: 48px;\n                min-height: 48px;\n                padding: 12px;\n            }\n        }\n        \n        /* Phase 3.3: Control Buttons - Stack vertically on mobile */\n        @media (max-width: 480px) {\n            .control-buttons {\n                flex-direction: column;\n                gap: 8px;\n            }\n            \n            .control-buttons button {\n                width: 100%;\n            }\n        }\n\n        .control-button:hover {\n            background: linear-gradient(90deg, #222 0%, #00d2ff 100%);\n            transform: translateY(-2px);\n            box-shadow: 0 8px 32px rgba(0, 210, 255, 0.25);\n        }\n\n        .notification {\n            position: fixed;\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            background: var(--bg-panel);\n            border: 1px solid rgba(124, 58, 237, 0.4);\n            color: var(--accent-primary);\n            padding: 15px 30px;\n            border-radius: 8px;\n            font-size: 1.1em;\n            z-index: 1000;\n            opacity: 0;\n            transition: opacity 0.3s ease-in-out;\n            box-shadow: 0 0 20px rgba(124, 58, 237, 0.2);\n            backdrop-filter: blur(8px);\n        }\n\n        .notification.show {\n            opacity: 1;\n        }\n\n        .notification.success {\n            border-color: rgba(68, 255, 68, 0.4);\n            color: #44ff44;\n            box-shadow: 0 0 20px rgba(68, 255, 68, 0.2);\n        }\n\n        .notification.error {\n            border-color: rgba(255, 68, 68, 0.4);\n            color: #ff4444;\n            box-shadow: 0 0 20px rgba(255, 68, 68, 0.2);\n        }\n\n        /* Initial layout positions */\n        #instructions {\n            position: absolute;\n            top: 8px;\n            left: 8px;\n            width: calc(4 * (100vw / 12) - 16px);\n            height: auto; /* Let it size to content initially */\n            min-height: 180px; /* Minimum height to show header and tabs */\n        }\n\n        #wifi-data-feed {\n            position: absolute;\n            top: 8px;\n            left: calc(4 * (100vw / 12) + 8px);\n            width: calc(4 * (100vw / 12) - 16px);\n            height: calc(100vh - 140px - 8px);\n        }\n\n        #start-menu {\n            position: absolute;\n            top: auto; /* Will be set dynamically */\n            left: 8px;\n            width: calc(4 * (100vw / 12) - 16px);\n            height: auto; /* Will be set dynamically */\n            min-height: 300px; /* Increased to ensure all content fits */\n            overflow: visible; /* Allow glow effects to show */\n        }\n        \n        /* Ensure start menu content doesn't clip glow effects */\n        #start-menu .grid-item-content {\n            overflow: visible;\n            padding-bottom: 25px; /* Extra padding for glow */\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n        \n        /* Status dot styles with glow effect */\n        .status-dot {\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background: #ff4444;\n            transition: all 0.3s ease;\n        }\n        \n        .status-dot.active {\n            background: #44ff44;\n            box-shadow: 0 0 15px #44ff44, 0 0 25px #44ff44;\n        }\n        \n        /* Ensure status indicators have room for glow */\n        .status-indicator {\n            position: relative;\n            overflow: visible;\n            margin: 5px 0; /* Add margin for glow space */\n        }\n\n        #system-status {\n            position: absolute;\n            top: auto; /* Will be set dynamically */\n            left: 8px;\n            width: calc(4 * (100vw / 12) - 16px);\n            height: auto; /* Will be set dynamically */\n            min-height: 280px; /* Balanced to accommodate GPS fields */\n            overflow: visible; /* Allow resize handles to show properly */\n        }\n        \n        /* Ensure system status content has proper overflow */\n        #system-status .grid-item-content {\n            overflow-y: auto;\n            max-height: calc(100% - 40px); /* Account for header */\n        }\n        \n        /* Phase 3.2: Responsive layout positions */\n        @media (max-width: 768px) {\n            #instructions, #wifi-data-feed, #start-menu, #system-status {\n                position: relative;\n                top: auto;\n                left: auto;\n                right: auto;\n                width: 100%;\n                height: auto;\n                min-height: 200px;\n                margin-bottom: 8px;\n            }\n        }\n\n        /* Update the HTML structure for all boxes */\n        #instructions h2, #wifi-data-feed h2, #start-menu h2, #system-status h2 {\n            display: inline-block;\n            width: 100%;\n            text-align: center;\n        }\n\n        .status-message {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 15px 25px;\n            border-radius: 4px;\n            color: #fff;\n            font-size: 14px;\n            z-index: 1000;\n            opacity: 1;\n            transition: opacity 0.3s ease-in-out;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n        }\n\n        .status-message.hidden {\n            opacity: 0;\n            pointer-events: none;\n        }\n\n        .status-success {\n            background-color: rgba(0, 200, 100, 0.9);\n            border: 1px solid rgba(0, 200, 100, 0.3);\n        }\n\n        .status-error {\n            background-color: rgba(255, 68, 68, 0.9);\n            border: 1px solid rgba(255, 68, 68, 0.3);\n        }\n\n        .status-warning {\n            background-color: rgba(255, 170, 0, 0.9);\n            border: 1px solid rgba(255, 170, 0, 0.3);\n        }\n\n        .feed-item {\n            background-color: var(--bg-panel);\n            border: 1px solid rgba(0, 190, 215, 0.35);\n            padding: 10px;\n            margin-bottom: 8px;\n            border-radius: 4px;\n            box-shadow: 0 2px 8px rgba(0, 150, 180, 0.1);\n        }\n\n        .device-info {\n            color: var(--accent-primary);\n            font-family: 'Courier New', monospace;\n            font-size: 0.9em;\n            line-height: 1.4;\n        }\n\n        .device-info strong {\n            color: #fff;\n            font-weight: 500;\n        }\n\n        .error-message {\n            color: #ff4444;\n            background-color: rgba(255, 68, 68, 0.1);\n            border: 1px solid rgba(255, 68, 68, 0.3);\n            padding: 10px;\n            margin: 10px 0;\n            border-radius: 4px;\n            font-family: 'Courier New', monospace;\n        }\n\n        /* Resizable iframe styles */\n        .resizable-frame {\n            transition: height 0.3s ease, width 0.3s ease, bottom 0.3s ease, left 0.3s ease, right 0.3s ease;\n        }\n\n        .resizable-frame .resize-handle {\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 10px; /* Increased from 5px for easier grabbing */\n            background: linear-gradient(90deg, transparent 20%, rgba(124, 58, 237, 0.4) 50%, transparent 80%);\n            cursor: ns-resize;\n            z-index: 1001;\n            opacity: 0;\n            transition: opacity 0.3s ease;\n        }\n\n        .resizable-frame:hover .resize-handle {\n            opacity: 1;\n        }\n\n        .resizable-frame .resize-handle:hover {\n            background: linear-gradient(90deg, transparent 10%, rgba(124, 58, 237, 0.6) 50%, transparent 90%);\n        }\n\n        .resizable-frame .resize-handle:active {\n            background: linear-gradient(90deg, transparent 10%, rgba(124, 58, 237, 0.8) 50%, transparent 90%);\n        }\n        \n        \n        /* Spinner animation for offline screen */\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n\n        /* Minimized box style */\n        .grid-item.minimized {\n            display: none !important;\n        }\n\n        /* Minimized tabs container */\n        #minimized-tabs {\n            position: fixed;\n            top: 60px;\n            left: 0;\n            right: 0;\n            z-index: 90;\n            height: 40px;\n            background: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-bottom: 1px solid rgba(0, 210, 255, 0.35);\n            padding: 0.25rem 0.5rem;\n            display: flex;\n            gap: 0.5rem;\n            overflow-x: auto;\n        }\n\n        .minimized-tab {\n            background: rgba(0, 210, 255, 0.2);\n            border: 1px solid rgba(0, 210, 255, 0.5);\n            border-radius: 4px;\n            padding: 0.25rem 0.75rem;\n            color: var(--accent-primary);\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            font-size: 0.875rem;\n        }\n\n        .minimized-tab:hover {\n            background: rgba(0, 210, 255, 0.3);\n            border-color: #00d2ff;\n        }\n\n        .restore-button {\n            background: none;\n            border: none;\n            color: #10b981;\n            cursor: pointer;\n            font-size: 1rem;\n            padding: 0;\n            margin-left: 0.5rem;\n        }\n\n        .restore-button:hover {\n            color: #44ff44;\n        }\n        \n        /* Theme Toggle Button */\n        .theme-toggle {\n            position: fixed;\n            bottom: 2rem;\n            right: 2rem;\n            z-index: 1000;\n            background: var(--bg-secondary);\n            border: 1px solid var(--border-primary);\n            border-radius: 50%;\n            width: 48px;\n            height: 48px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            box-shadow: var(--shadow-md);\n        }\n        \n        .theme-toggle:hover {\n            transform: scale(1.1);\n            border-color: var(--accent-primary);\n            box-shadow: var(--glow-primary);\n        }\n        \n        .theme-toggle svg {\n            width: 24px;\n            height: 24px;\n            fill: var(--accent-primary);\n            transition: all 0.3s ease;\n        }\n        \n        /* Mobile adjustments for theme toggle */\n        @media (max-width: 768px) {\n            .theme-toggle {\n                bottom: 1rem;\n                right: 1rem;\n                width: 44px;\n                height: 44px;\n            }\n        }\n\n        /* Map Control Buttons */\n        .map-control-btn {\n            background: var(--bg-secondary);\n            border: 1px solid var(--border-primary);\n            border-radius: 4px;\n            padding: 0.5rem;\n            color: var(--accent-primary);\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: all 0.2s ease;\n            font-size: 0.875rem;\n            min-width: 44px;\n            min-height: 44px;\n        }\n\n        .map-control-btn:hover {\n            background: var(--bg-hover);\n            border-color: var(--accent-primary);\n            box-shadow: var(--glow-primary);\n        }\n\n        .map-control-btn:active {\n            transform: scale(0.95);\n        }\n\n        .map-control-btn.active {\n            background: rgba(0, 210, 255, 0.2);\n            border-color: var(--accent-primary);\n            color: var(--accent-primary);\n            box-shadow: var(--glow-primary);\n        }\n\n        /* Center on Me Button */\n        #center-on-me {\n            gap: 0.5rem;\n            padding: 0.5rem 1rem;\n            width: auto;\n        }\n\n        #center-on-me.tracking {\n            background: rgba(0, 255, 136, 0.2);\n            border-color: #00ff88;\n            color: #00ff88;\n        }\n\n        #center-on-me svg {\n            width: 20px;\n            height: 20px;\n        }\n\n        /* 2D/3D Toggle Button */\n        #toggle-2d-3d {\n            gap: 0.5rem;\n            padding: 0.5rem 1rem;\n            width: auto;\n        }\n\n        #toggle-2d-3d svg {\n            width: 20px;\n            height: 20px;\n            transition: transform 0.3s ease;\n        }\n\n        #toggle-2d-3d.mode-2d svg {\n            transform: rotateY(180deg);\n        }\n\n        /* Map Controls Container */\n        .map-controls {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n            z-index: 10;\n        }\n\n        /* Zoom Controls */\n        #zoom-in, #zoom-out {\n            width: 44px;\n            height: 44px;\n            padding: 0.5rem;\n        }\n\n        /* Signal Dot Styles */\n        .signal-dot {\n            position: absolute;\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background: rgba(255, 0, 0, 0.8);\n            border: 2px solid rgba(255, 255, 255, 0.9);\n            cursor: pointer;\n            transition: all 0.2s ease;\n            z-index: 5;\n        }\n\n        .signal-dot:hover {\n            transform: scale(1.5);\n            box-shadow: 0 0 20px rgba(255, 0, 0, 0.8);\n            z-index: 6;\n        }\n\n        .signal-dot.strong-signal {\n            background: rgba(255, 255, 0, 0.9);\n            box-shadow: 0 0 15px rgba(255, 255, 0, 0.6);\n        }\n\n        .signal-dot.weak-signal {\n            background: rgba(255, 100, 100, 0.6);\n            box-shadow: 0 0 10px rgba(255, 100, 100, 0.4);\n        }\n\n        /* Tooltip Styles */\n        .signal-tooltip {\n            position: absolute;\n            background: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border: 1px solid var(--border-accent);\n            border-radius: 4px;\n            padding: 0.5rem;\n            font-size: 0.75rem;\n            color: var(--text-primary);\n            white-space: nowrap;\n            pointer-events: none;\n            opacity: 0;\n            transition: opacity 0.2s ease;\n            z-index: 100;\n        }\n\n        .signal-tooltip.visible {\n            opacity: 1;\n        }\n\n        .signal-tooltip::before {\n            content: '';\n            position: absolute;\n            bottom: -5px;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 0;\n            height: 0;\n            border-left: 5px solid transparent;\n            border-right: 5px solid transparent;\n            border-top: 5px solid var(--border-accent);\n        }\n\n        /* GPS Status Indicator */\n        .gps-status-indicator {\n            position: absolute;\n            bottom: 10px;\n            right: 10px;\n            background: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border: 1px solid var(--border-primary);\n            border-radius: 4px;\n            padding: 0.5rem;\n            font-size: 0.75rem;\n            color: var(--text-secondary);\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n\n        .gps-status-indicator .status-dot {\n            width: 10px;\n            height: 10px;\n        }\n\n        /* Position Display Enhancement */\n        #globe-position {\n            display: flex;\n            flex-direction: column;\n            gap: 0.25rem;\n        }\n\n        #globe-position .coord {\n            font-family: 'Courier New', monospace;\n            color: var(--accent-primary);\n        }\n\n        /* Mobile-specific adjustments for map controls */\n        @media (max-width: 768px) {\n            .map-controls {\n                top: 5px;\n                right: 5px;\n                gap: 5px;\n            }\n            \n            #center-on-me span,\n            #toggle-2d-3d span {\n                display: none; /* Hide text on mobile to save space */\n            }\n            \n            #center-on-me,\n            #toggle-2d-3d {\n                padding: 0.5rem;\n                width: 44px;\n                height: 44px;\n            }\n        }\n    </style>\n    <!-- Cesium CSS and JS -->\n    <link href=\"https://cesium.com/downloads/cesiumjs/releases/1.119/Build/Cesium/Widgets/widgets.css\" rel=\"stylesheet\">\n    <script src=\"https://cesium.com/downloads/cesiumjs/releases/1.119/Build/Cesium/Cesium.js\"></script>\n    <!-- Cesium Offline Configuration -->\n    <script src=\"/js/cesium-offline-config.js\"></script>\n</head>\n<body data-theme=\"dark\">\n    <div id=\"notification\" class=\"notification\"></div>\n    <div id=\"status-message\" class=\"status-message hidden\"></div>\n    <header class=\"top-banner\">\n        <h1>Kismet Operations Center</h1>\n    </header>\n    <div id=\"minimized-tabs\" class=\"minimized-tabs\"></div>\n\n\n    <div class=\"page-container\">\n        <main class=\"main-content-area\">\n        <div class=\"side-stack left-stack\">\n            <div id=\"instructions\" class=\"grid-item\">\n                <div class=\"box-header\">\n                <h2>Setup Instructions</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\">\n                    <div class=\"tab-nav\">\n                        <a href=\"wigle.html\" class=\"tab-button active-tab\" target=\"_blank\">Wigle</a>\n                        <a href=\"atak.html\" class=\"tab-button\" target=\"_blank\">ATAK</a>\n                        <a href=\"kismet2.html\" class=\"tab-button\" target=\"_blank\">Kismet</a>\n                    </div>\n                </div>\n            </div>\n            <div id=\"start-menu\" class=\"grid-item\">\n                <div class=\"box-header\">\n                <h2>Start Menu</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\">\n                    <div class=\"button-group\" style=\"display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin-bottom: 15px;\">\n                        <button class=\"control-button\" data-action=\"startKismet\">Start Kismet</button>\n                        <button class=\"control-button\" data-action=\"stopKismet\">Stop Kismet</button>\n                        <a href=\"#\" onclick=\"window.open('http://' + window.location.hostname + ':2501', '_blank'); return false;\" class=\"control-button\">Open Kismet Web UI</a>\n                        <a href=\"#\" onclick=\"window.open('http://' + window.location.hostname + ':8000', '_blank'); return false;\" class=\"control-button\">Open WigletoTak</a>\n                        <a href=\"#\" onclick=\"window.open('http://' + window.location.hostname + ':8073', '_blank'); return false;\" class=\"control-button\">Open WebRX UI</a>\n                        <a href=\"#\" onclick=\"window.open('http://' + window.location.hostname + ':8092', '_blank'); return false;\" class=\"control-button\">Open HackRF Sweep</a>\n                    </div>\n                    <div class=\"service-status\" style=\"margin-top: 15px; padding: 15px 0; border-top: 1px solid rgba(0, 200, 220, 0.3); overflow: visible;\">\n                        <div class=\"status-indicator\" style=\"display: flex; align-items: center; gap: 10px; padding: 10px; background: rgba(0, 0, 0, 0.2); border-radius: 6px; margin-bottom: 10px;\">\n                            <div class=\"status-dot\" id=\"kismet-status\"></div>\n                            <span style=\"color: #d0d8f0; font-size: 0.9em;\">Kismet</span>\n                        </div>\n                        <div class=\"status-indicator\" style=\"display: flex; align-items: center; gap: 10px; padding: 10px; background: rgba(0, 0, 0, 0.2); border-radius: 6px; margin-bottom: 10px;\">\n                            <div class=\"status-dot\" id=\"wigle-status\"></div>\n                            <span style=\"color: #d0d8f0; font-size: 0.9em;\">WigletoTak</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div id=\"system-status\" class=\"grid-item\">\n                <div class=\"box-header\">\n                <h2>System Status</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\">\n                    <div id=\"system-message\" style=\"margin-bottom: 1rem;\">Loading system status...</div>\n                    <div id=\"gps-info\" style=\"color: #d0d8f0; line-height: 1.6;\">\n                        <p><strong style=\"color: #00d2ff;\">IP Address:</strong> <span id=\"ip-address\">Loading...</span></p>\n                        <p><strong style=\"color: #00d2ff;\">GPS Status:</strong> <span id=\"gps-status\">Loading...</span></p>\n                        <p><strong style=\"color: #00d2ff;\">Latitude:</strong> <span id=\"gps-lat\">--</span></p>\n                        <p><strong style=\"color: #00d2ff;\">Longitude:</strong> <span id=\"gps-lon\">--</span></p>\n                        <p><strong style=\"color: #00d2ff;\">Altitude:</strong> <span id=\"gps-alt\">--</span></p>\n                        <p><strong style=\"color: #00d2ff;\">MGRS Grid:</strong> <span id=\"gps-mgrs\">--</span></p>\n                        <p><strong style=\"color: #00d2ff;\">GPS Time:</strong> <span id=\"gps-time\">--</span></p>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Middle column: Main content area -->\n        <div class=\"middle-long-box\">\n            <div id=\"wifi-data-feed\" class=\"grid-item\">\n                <div class=\"box-header\">\n                    <h2>Kismet Data Feed</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\" style=\"padding: 10px; overflow-y: auto;\">\n                    <div style=\"display: flex; justify-content: space-between; margin-bottom: 15px; padding: 10px; background: rgba(0, 0, 0, 0.2); border-radius: 4px;\">\n                        <div style=\"text-align: center;\">\n                            <div style=\"color: #00d2ff; font-size: 0.9em;\">Devices</div>\n                            <div id=\"devices-count\" style=\"color: #fff; font-size: 1.2em; font-weight: bold;\">0</div>\n                        </div>\n                        <div style=\"text-align: center;\">\n                            <div style=\"color: #00d2ff; font-size: 0.9em;\">Networks</div>\n                            <div id=\"networks-count\" style=\"color: #fff; font-size: 1.2em; font-weight: bold;\">0</div>\n                        </div>\n                        <div style=\"text-align: center;\">\n                            <div style=\"color: #00d2ff; font-size: 0.9em;\">Last Update</div>\n                            <div id=\"last-update\" style=\"color: #fff; font-size: 0.8em;\">--</div>\n                        </div>\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <h3 style=\"color: #00d2ff; margin: 0 0 10px 0; font-size: 1em;\">Recent Devices</h3>\n                        <div id=\"devices-list\" style=\"max-height: 200px; overflow-y: auto;\">\n                            <div class=\"feed-item\">No devices detected</div>\n                        </div>\n                    </div>\n                    <div>\n                        <h3 style=\"color: #00d2ff; margin: 0 0 10px 0; font-size: 1em;\">Activity Feed</h3>\n                        <div id=\"wifi-feed\" style=\"max-height: 200px; overflow-y: auto;\">\n                            <div class=\"feed-item\">Waiting for activity...</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Right column: Globe and additional tools -->\n        <div class=\"right-long-box\">\n            <div id=\"cesium-globe\" class=\"grid-item\">\n                <div class=\"box-header\">\n                    <h2>Location Globe</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\" style=\"position: relative; padding: 10px; overflow: hidden;\">\n                    <div id=\"cesium-container\" style=\"width: 100%; height: 100%;\"></div>\n                    <div class=\"map-controls\">\n                        <button id=\"center-on-me\" class=\"map-control-btn\" title=\"Center on GPS location\">\n                            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\n                            </svg>\n                            <span>Center on Me</span>\n                        </button>\n                        <button id=\"toggle-2d-3d\" class=\"map-control-btn\" title=\"Toggle 2D/3D view\">\n                            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9\"></path>\n                            </svg>\n                            <span>3D View</span>\n                        </button>\n                        <button id=\"zoom-in\" class=\"map-control-btn\" title=\"Zoom in\">\n                            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\n                            </svg>\n                        </button>\n                        <button id=\"zoom-out\" class=\"map-control-btn\" title=\"Zoom out\">\n                            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 12H4\"></path>\n                            </svg>\n                        </button>\n                    </div>\n                    <div id=\"position-info\" style=\"position: absolute; bottom: 20px; left: 20px; background: rgba(0, 0, 0, 0.7); padding: 5px 10px; border-radius: 4px; color: #00d2ff; font-size: 0.8em; z-index: 100;\">\n                        <span id=\"globe-position\">Waiting for GPS...</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </main>\n    </div> <!-- End of page-container -->\n\n    <!-- Socket.io for real-time updates -->\n    <script src=\"/socket.io/socket.io.js\"></script>\n    <!-- MGRS Library -->\n    <script src=\"/mgrs.min.js\"></script>\n    <!-- Signal Visualization -->\n    <script src=\"/js/signal-visualization.js\"></script>\n    <script>\n    // Kismet iframe functionality has been removed\n\n    \n\n\n    </script>\n\n    <footer class=\"footer\">\n        <div class=\"footer-content\">\n            <div class=\"footer-text\">\n                <span class=\"footer-symbol\">⚡</span>\n                Property of\n                <span class=\"footer-separator\">|</span>\n                SSG Malone, Darren\n                <span class=\"footer-separator\">|</span>\n                SPC Peirson, Christian\n                <span class=\"footer-symbol\">⚡</span>\n            </div>\n        </div>\n    </footer>\n\n    <script>\n        const messages = [\n            \"Calibrating Chroniton Emitters...\",\n            \"Quantum Field Sync: 99.97%\",\n            \"Reality Matrix Stabilized.\",\n            \"Interface Online. Welcome, Commander.\"\n        ];\n        let messageIndex = 0;\n        const planetaryMessageElement = document.getElementById('planetary-message');\n        const systemMessageElement = document.getElementById('system-message');\n        const dynamicTextElements = document.querySelectorAll('.dynamic-text');\n\n        function updateSystemMessage() {\n            if (planetaryMessageElement) {\n                planetaryMessageElement.style.opacity = 0;\n                setTimeout(() => {\n                    planetaryMessageElement.textContent = messages[messageIndex];\n                    planetaryMessageElement.style.opacity = 1;\n                    messageIndex = (messageIndex + 1) % messages.length;\n                }, 500);\n            }\n        }\n\n        // Initial call and interval\n        if (messages.length > 0) {\n            updateSystemMessage();\n            setInterval(updateSystemMessage, 7000); // Change message every 7 seconds\n        }\n\n        // Convert lat/lon to MGRS using the mgrs.js library\n        function latLonToMGRS(lat, lon) {\n            if (!lat || !lon || lat === 'N/A' || lon === 'N/A') return '--';\n            \n            try {\n                const latNum = parseFloat(lat);\n                const lonNum = parseFloat(lon);\n                \n                // Use mgrs.forward to convert lat/lon to MGRS\n                // The second parameter (4) specifies 8-digit precision (4 digits each for easting/northing)\n                const mgrsString = mgrs.forward([lonNum, latNum], 4);\n                \n                // Format the MGRS string with spaces for readability\n                // Example: 18TWL8456123456 becomes 18T WL 8456 3456\n                const formatted = mgrsString.replace(/^(\\d+[A-Z])([A-Z]{2})(\\d{4})(\\d{4})$/, '$1 $2 $3 $4');\n                \n                return formatted;\n            } catch (e) {\n                console.error('MGRS conversion error:', e);\n                return '--';\n            }\n        }\n\n        // Update system status\n        function updateSystemStatus() {\n            fetch('/info', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    const gps = data.gps;\n                    document.getElementById('ip-address').textContent = data.ip;\n                    document.getElementById('gps-status').textContent = gps.status;\n                    document.getElementById('gps-lat').textContent = gps.lat ?? 'N/A';\n                    document.getElementById('gps-lon').textContent = gps.lon ?? 'N/A';\n                    document.getElementById('gps-alt').textContent = gps.alt ?? 'N/A';\n                    \n                    // Calculate and display MGRS\n                    const mgrs = latLonToMGRS(gps.lat, gps.lon);\n                    document.getElementById('gps-mgrs').textContent = mgrs;\n                    \n                    document.getElementById('gps-time').textContent = gps.time ?? 'N/A';\n                })\n                .catch(error => {\n                    document.getElementById('system-message').textContent = 'Error loading system status';\n                });\n        }\n\n        // Cesium Globe Initialization\n        let cesiumViewer = null;\n        let positionEntity = null;\n        let lastGpsUpdate = null;\n        let is3DMode = true;\n        let signalVisualization = null;\n        \n        // Initialize Socket.io connection\n        const socket = io();\n        \n        // Socket event handlers\n        socket.on('connect', () => {\n            console.log('Connected to WebSocket server');\n        });\n        \n        socket.on('disconnect', () => {\n            console.log('Disconnected from WebSocket server');\n        });\n        \n        socket.on('signal-update', (data) => {\n            if (signalVisualization && data.signals) {\n                signalVisualization.updateSignals(data.signals);\n            }\n        });\n        \n        socket.on('gps-update', (data) => {\n            if (data.lat && data.lon) {\n                updateGlobePosition(data.lat, data.lon);\n            }\n        });\n        \n        socket.on('kismet-data', (data) => {\n            updateKismetDataDisplay(data);\n        });\n\n        function initializeCesiumGlobe() {\n            console.log('Initializing Cesium Globe...');\n            try {\n                // Prevent multiple initialization\n                if (cesiumViewer) {\n                    console.log('Cesium viewer already initialized');\n                    return;\n                }\n                \n                // Check if Cesium is loaded\n                if (typeof Cesium === 'undefined') {\n                    console.error('Cesium library not loaded!');\n                    return;\n                }\n                console.log('Cesium library is available');\n                \n                // Set Cesium Ion default access token (this is a free token)\n                Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlYWE1OWUxNy1mMWZiLTQzYjYtYTQ0OS1kMWFjYmFkNjc5YzAiLCJpZCI6NTc3MzMsImlhdCI6MTYyNzg0NTE4Mn0.XcKpgANiY19MC4bdFUXMVEBToBmqS8kuYpUlxJHYZxk';\n                \n                // Initialize Cesium viewer with minimal, compatible settings\n                console.log('Creating Cesium viewer...');\n                cesiumViewer = new Cesium.Viewer('cesium-container', {\n                    terrainProvider: new Cesium.EllipsoidTerrainProvider(),\n                    imageryProvider: false, // We'll add it manually\n                    baseLayerPicker: false,\n                    geocoder: false,\n                    homeButton: false,\n                    sceneModePicker: false,\n                    navigationHelpButton: false,\n                    animation: false,\n                    timeline: false,\n                    fullscreenButton: false,\n                    vrButton: false,\n                    selectionIndicator: false,\n                    infoBox: false,\n                    scene3DOnly: false, // Allow 2D/3D switching\n                    sceneMode: Cesium.SceneMode.SCENE3D // Start in 3D mode\n                });\n\n                // Try multiple imagery providers until one works\n                const imageryProviders = [\n                    {\n                        name: 'Local Offline Tiles',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: '/offline-tiles/{z}/{x}/{y}.png',\n                            credit: 'Offline Natural Earth Data',\n                            maximumLevel: 4,\n                            minimumLevel: 0,\n                            hasAlphaChannel: false,\n                            rectangle: Cesium.Rectangle.fromDegrees(-180, -85.05112877980659, 180, 85.05112877980659)\n                        })\n                    },\n                    {\n                        name: 'Esri World Imagery',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n                            credit: 'Tiles © Esri',\n                            maximumLevel: 19\n                        })\n                    },\n                    {\n                        name: 'CartoDB Positron',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',\n                            credit: 'Map tiles by CartoDB, under CC BY 3.0',\n                            maximumLevel: 18\n                        })\n                    },\n                    {\n                        name: 'Stamen Terrain',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://stamen-tiles.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png',\n                            credit: 'Map tiles by Stamen Design, under CC BY 3.0',\n                            maximumLevel: 18\n                        })\n                    },\n                    {\n                        name: 'OpenTopoMap',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://a.tile.opentopomap.org/{z}/{x}/{y}.png',\n                            credit: 'Map data © OpenStreetMap contributors, SRTM | Map style © OpenTopoMap',\n                            maximumLevel: 17\n                        })\n                    }\n                ];\n\n                // Remove existing imagery and try providers\n                cesiumViewer.imageryLayers.removeAll();\n                let imageryAdded = false;\n\n                for (const providerInfo of imageryProviders) {\n                    try {\n                        const provider = providerInfo.provider();\n                        cesiumViewer.imageryLayers.addImageryProvider(provider);\n                        console.log(`Successfully loaded imagery: ${providerInfo.name}`);\n                        imageryAdded = true;\n                        break;\n                    } catch (error) {\n                        console.warn(`Failed to load ${providerInfo.name}:`, error);\n                    }\n                }\n\n                if (!imageryAdded) {\n                    console.error('All imagery providers failed, using Cesium default');\n                }\n\n                // Set initial view - use compatible lighting settings\n                try {\n                    cesiumViewer.scene.globe.enableLighting = true;\n                } catch (e) {\n                    console.log('Lighting not supported in this Cesium version');\n                }\n                cesiumViewer.scene.globe.depthTestAgainstTerrain = false; // Disable for better performance\n                \n                // Add a more visible position marker (start hidden until GPS data available)\n                positionEntity = cesiumViewer.entities.add({\n                    position: Cesium.Cartesian3.fromDegrees(0, 0),\n                    show: false, // Hide until we get real GPS data\n                    point: {\n                        pixelSize: 15,\n                        color: Cesium.Color.CYAN,\n                        outlineColor: Cesium.Color.WHITE,\n                        outlineWidth: 3,\n                        heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,\n                        disableDepthTestDistance: Number.POSITIVE_INFINITY\n                    },\n                    label: {\n                        text: 'System Location',\n                        font: '14pt Inter',\n                        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n                        pixelOffset: new Cesium.Cartesian2(0, -20),\n                        fillColor: Cesium.Color.CYAN,\n                        outlineColor: Cesium.Color.BLACK,\n                        outlineWidth: 2,\n                        style: Cesium.LabelStyle.FILL_AND_OUTLINE,\n                        disableDepthTestDistance: Number.POSITIVE_INFINITY\n                    }\n                });\n\n                // Set initial camera view\n                cesiumViewer.camera.setView({\n                    destination: Cesium.Cartesian3.fromDegrees(0, 0, 10000000),\n                    orientation: {\n                        heading: 0.0,\n                        pitch: -Cesium.Math.PI_OVER_TWO,\n                        roll: 0.0\n                    }\n                });\n\n                // Zoom controls\n                document.getElementById('zoom-in').addEventListener('click', () => {\n                    const camera = cesiumViewer.camera;\n                    camera.zoomIn(camera.positionCartographic.height * 0.5);\n                });\n\n                document.getElementById('zoom-out').addEventListener('click', () => {\n                    const camera = cesiumViewer.camera;\n                    camera.zoomOut(camera.positionCartographic.height * 0.5);\n                });\n\n                // 2D/3D toggle control\n                let currentSceneMode = Cesium.SceneMode.SCENE3D;\n                const toggle2D3DButton = document.getElementById('toggle-2d-3d');\n                \n                toggle2D3DButton.addEventListener('click', () => {\n                    if (!cesiumViewer) return;\n                    \n                    // Store current camera position before switching\n                    const camera = cesiumViewer.camera;\n                    const position = camera.positionCartographic;\n                    const centerPosition = {\n                        longitude: position ? position.longitude : 0,\n                        latitude: position ? position.latitude : 0,\n                        height: position ? position.height : 10000000\n                    };\n                    \n                    if (currentSceneMode === Cesium.SceneMode.SCENE3D) {\n                        // Switch to 2D\n                        cesiumViewer.scene.morphTo2D(1.0); // 1 second transition\n                        currentSceneMode = Cesium.SceneMode.SCENE2D;\n                        toggle2D3DButton.textContent = '2D';\n                    } else {\n                        // Switch to 3D\n                        cesiumViewer.scene.morphTo3D(1.0); // 1 second transition\n                        currentSceneMode = Cesium.SceneMode.SCENE3D;\n                        toggle2D3DButton.textContent = '3D';\n                    }\n                    \n                    // After morphing completes, restore camera position\n                    setTimeout(() => {\n                        if (cesiumViewer && centerPosition) {\n                            if (currentSceneMode === Cesium.SceneMode.SCENE2D) {\n                                // Set view for 2D mode\n                                cesiumViewer.camera.setView({\n                                    destination: Cesium.Rectangle.fromDegrees(\n                                        Cesium.Math.toDegrees(centerPosition.longitude) - 10,\n                                        Cesium.Math.toDegrees(centerPosition.latitude) - 10,\n                                        Cesium.Math.toDegrees(centerPosition.longitude) + 10,\n                                        Cesium.Math.toDegrees(centerPosition.latitude) + 10\n                                    )\n                                });\n                            } else {\n                                // Set view for 3D mode\n                                cesiumViewer.camera.setView({\n                                    destination: Cesium.Cartesian3.fromRadians(\n                                        centerPosition.longitude,\n                                        centerPosition.latitude,\n                                        centerPosition.height\n                                    )\n                                });\n                            }\n                        }\n                    }, 1100); // Wait slightly longer than morph duration\n                });\n                \n                // Center on Me button functionality\n                document.getElementById('center-on-me').addEventListener('click', () => {\n                    if (lastGpsUpdate && cesiumViewer) {\n                        const height = currentSceneMode === Cesium.SceneMode.SCENE3D ? 50000 : 1000000;\n                        cesiumViewer.camera.flyTo({\n                            destination: Cesium.Cartesian3.fromDegrees(\n                                lastGpsUpdate.lon, \n                                lastGpsUpdate.lat, \n                                height\n                            ),\n                            duration: 1.5\n                        });\n                        console.log('Centering on GPS location:', lastGpsUpdate);\n                    } else {\n                        console.log('No GPS position available to center on');\n                        // Show a message to the user\n                        const positionInfo = document.getElementById('globe-position');\n                        if (positionInfo) {\n                            const originalText = positionInfo.textContent;\n                            positionInfo.textContent = 'No GPS position available';\n                            setTimeout(() => {\n                                positionInfo.textContent = originalText;\n                            }, 2000);\n                        }\n                    }\n                });\n                \n                // Initialize signal visualization\n                if (window.SignalVisualization) {\n                    signalVisualization = new window.SignalVisualization(cesiumViewer);\n                    console.log('Signal visualization initialized');\n                    \n                    // Connect to WebSocket for real-time signal updates\n                    socket.emit('subscribe-signals');\n                } else {\n                    console.log('Signal visualization library not loaded');\n                }\n\n                console.log('Cesium globe initialized successfully');\n                document.getElementById('globe-position').textContent = 'Globe Ready - Waiting for GPS...';\n            } catch (error) {\n                console.error('Failed to initialize Cesium globe:', error);\n                document.getElementById('cesium-container').innerHTML = \n                    `<div style=\"color: #ff4444; padding: 20px; text-align: center;\">\n                        Failed to load globe<br>\n                        <small>${error.message}</small>\n                    </div>`;\n            }\n        }\n\n        // Update globe position from GPS data\n        function updateGlobePosition(lat, lon) {\n            if (!cesiumViewer || !positionEntity) return;\n            \n            try {\n                const latNum = parseFloat(lat);\n                const lonNum = parseFloat(lon);\n                \n                // Only update if we have valid, non-zero coordinates\n                if (isNaN(latNum) || isNaN(lonNum) || (latNum === 0 && lonNum === 0)) {\n                    return;\n                }\n                \n                // Show the entity now that we have real GPS data\n                positionEntity.show = true;\n                \n                // Update entity position\n                const position = Cesium.Cartesian3.fromDegrees(lonNum, latNum);\n                positionEntity.position = position;\n                \n                // Update position display\n                document.getElementById('globe-position').textContent = \n                    `${latNum.toFixed(6)}°, ${lonNum.toFixed(6)}°`;\n                \n                // Fly to position if it's the first update or significant change\n                if (!lastGpsUpdate || \n                    Math.abs(lastGpsUpdate.lat - latNum) > 0.1 || \n                    Math.abs(lastGpsUpdate.lon - lonNum) > 0.1) {\n                    \n                    cesiumViewer.camera.flyTo({\n                        destination: Cesium.Cartesian3.fromDegrees(lonNum, latNum, 50000),\n                        duration: 2.0\n                    });\n                    \n                    lastGpsUpdate = { lat: latNum, lon: lonNum };\n                }\n                \n                // Request render\n                cesiumViewer.scene.requestRender();\n            } catch (error) {\n                console.error('Error updating globe position:', error);\n            }\n        }\n\n        // Modify the existing updateSystemStatus function to call updateGlobePosition\n        const originalUpdateSystemStatus = updateSystemStatus;\n        updateSystemStatus = function() {\n            originalUpdateSystemStatus();\n            \n            // Also fetch GPS data for globe update\n            fetch('/info', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.gps && data.gps.lat && data.gps.lon) {\n                    updateGlobePosition(data.gps.lat, data.gps.lon);\n                }\n            })\n            .catch(error => {\n                console.error('Error fetching GPS for globe:', error);\n            });\n        };\n\n        // Initialize Cesium when page loads\n        document.addEventListener('DOMContentLoaded', () => {\n            setTimeout(initializeCesiumGlobe, 1000); // Delay to ensure Cesium is loaded\n        });\n\n        // Update Kismet data display from WebSocket\n        function updateKismetDataDisplay(data) {\n            console.log('Kismet data update:', data);\n            \n            // Update device counts\n            const devicesCountEl = document.getElementById('devices-count');\n            const networksCountEl = document.getElementById('networks-count');\n            const lastUpdateEl = document.getElementById('last-update');\n            \n            if (devicesCountEl) devicesCountEl.textContent = data.devices_count || '0';\n            if (networksCountEl) networksCountEl.textContent = data.networks_count || '0';\n            if (lastUpdateEl) {\n                const now = new Date();\n                lastUpdateEl.textContent = now.toLocaleTimeString('en-US', { \n                    hour: '2-digit', \n                    minute: '2-digit' \n                });\n            }\n            \n            // Update devices list\n            const devicesList = document.getElementById('devices-list');\n            if (devicesList && data.recent_devices && data.recent_devices.length > 0) {\n                devicesList.innerHTML = '';\n                data.recent_devices.slice(0, 10).forEach(device => {\n                    const deviceItem = document.createElement('div');\n                    deviceItem.className = 'feed-item';\n                    deviceItem.innerHTML = `\n                        <strong>${device.ssid || 'Hidden'}</strong> - \n                        ${device.mac || 'Unknown'} \n                        (${device.signal || '--'} dBm)\n                    `;\n                    devicesList.appendChild(deviceItem);\n                });\n            }\n            \n            // Update activity feed\n            const feedContainer = document.getElementById('wifi-feed');\n            if (feedContainer && data.feed_items && data.feed_items.length > 0) {\n                feedContainer.innerHTML = '';\n                data.feed_items.slice(0, 5).forEach(item => {\n                    const feedItem = document.createElement('div');\n                    feedItem.className = 'feed-item feed-item-blink';\n                    feedItem.textContent = `${item.type || 'Activity'}: ${item.message || ''}`;\n                    feedContainer.appendChild(feedItem);\n                    \n                    // Remove blink animation after 2 seconds\n                    setTimeout(() => feedItem.classList.remove('feed-item-blink'), 2000);\n                });\n            }\n        }\n\n        // Update Kismet data\n        function updateKismetData() {\n            fetch('/kismet-data', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    console.log('Kismet data received:', data);  // Debug log\n                    \n                    // Update device counts\n                    document.getElementById('devices-count').textContent = data.devices_count || '0';\n                    document.getElementById('networks-count').textContent = data.networks_count || '0';\n                    document.getElementById('last-update').textContent = new Date().toLocaleTimeString();\n                    \n                    // Update recent devices\n                    const recentDevicesList = document.getElementById('devices-list');\n                    recentDevicesList.innerHTML = '';\n                    \n                    if (data.recent_devices && data.recent_devices.length > 0) {\n                        data.recent_devices.forEach(device => {\n                            const deviceElement = document.createElement('div');\n                            deviceElement.className = 'feed-item';\n                            deviceElement.innerHTML = `\n                                <strong>${device.name || 'Unknown Device'}</strong><br>\n                                Type: ${device.type || 'Unknown'}<br>\n                                Channel: ${device.channel || 'Unknown'}<br>\n                                Signal: ${device.signal || 'Unknown'} dBm\n                            `;\n                            recentDevicesList.appendChild(deviceElement);\n                        });\n                    } else {\n                        recentDevicesList.innerHTML = '<div class=\"feed-item\">No devices detected</div>';\n                    }\n                    \n                    // Update feed\n                    const feedContainer = document.getElementById('kismet-feed');\n                    feedContainer.innerHTML = ''; // Clear existing feed items\n                    \n                    if (data.feed_items && data.feed_items.length > 0) {\n                        data.feed_items.forEach(item => {\n                            const feedItem = document.createElement('div');\n                            feedItem.className = 'feed-item';\n                            feedItem.innerHTML = `\n                                <strong>${item.type || 'Activity'}</strong>: ${item.message || 'Unknown activity'}\n                            `;\n                            feedContainer.appendChild(feedItem);\n                            \n                            // Add highlight effect for new items\n                            feedItem.classList.add('feed-item-blink');\n                            setTimeout(() => feedItem.classList.remove('feed-item-blink'), 2000);\n                        });\n                        \n                        // Keep only last 10 items\n                        while (feedContainer.children.length > 10) {\n                            feedContainer.removeChild(feedContainer.firstChild);\n                        }\n                        \n                        // Scroll to bottom\n                        feedContainer.scrollTop = feedContainer.scrollHeight;\n                    } else {\n                        feedContainer.innerHTML = '<div class=\"feed-item\">Waiting for activity...</div>';\n                    }\n                })\n                .catch(error => {\n                    // Only log error if not during stop operations (network reset causes temporary errors)\n                    const isStopping = window.servicesStopping || false;\n                    if (!isStopping) {\n                        console.error('Error fetching Kismet data:', error);\n                        document.getElementById('devices-count').textContent = '0';\n                        document.getElementById('networks-count').textContent = '0';\n                        document.getElementById('last-update').textContent = 'Error';\n                        document.getElementById('devices-list').innerHTML = '<div class=\"feed-item\">Failed to get data from Kismet</div>';\n                        document.getElementById('kismet-feed').innerHTML = '<div class=\"feed-item\">Failed to get data from Kismet</div>';\n                    }\n                });\n        }\n\n        // Start periodic updates - moved to DOMContentLoaded\n        // setInterval(updateSystemStatus, 5000);\n        // setInterval(updateKismetData, 2000);\n\n        // Initial updates - moved to DOMContentLoaded\n        // updateSystemStatus();\n        // updateKismetData();\n        \n        function updateServiceStatus() {\n            // Just call updateKismetStatus which checks the actual service status\n            updateKismetStatus();\n        }\n\n        function showNotification(message, type = 'info') {\n            const notification = document.getElementById('notification');\n            notification.textContent = message;\n            notification.className = 'notification show ' + type;\n            \n            // Hide notification after 5 seconds\n            setTimeout(() => {\n                notification.className = 'notification';\n            }, 5000);\n        }\n\n        function updateKismetStatus() {\n            fetch('/script-status')\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    console.log('Kismet status response:', data); // Debug log\n                    const kismetStatus = document.getElementById('kismet-status');\n                    const wigleStatus = document.getElementById('wigle-status');\n                    \n                    // Get startup status from window object (set when start button clicked)\n                    const isStarting = window.servicesStarting || false;\n                    \n                    // Update Kismet status based on state\n                    if (data && data.kismet_running === true && !isStarting) {\n                        // Service is fully running - GREEN\n                        console.log('Setting Kismet status to running (green)');\n                        kismetStatus.style.background = '#44ff44';\n                        kismetStatus.style.boxShadow = '0 0 10px #44ff44';\n                    } else if (isStarting) {\n                        // Services are starting up - YELLOW\n                        console.log('Keeping Kismet status as starting (yellow)');\n                        kismetStatus.style.background = '#ffaa00';\n                        kismetStatus.style.boxShadow = '0 0 10px #ffaa00';\n                    } else {\n                        // Services not started - RED\n                        console.log('Setting Kismet status to not running (red)');\n                        kismetStatus.style.background = '#ff4444';\n                        kismetStatus.style.boxShadow = 'none';\n                    }\n\n                    // Update WigletoTak status based on state\n                    if (data && data.wigle_running === true && !isStarting) {\n                        // Service is fully running - GREEN\n                        wigleStatus.style.background = '#44ff44';\n                        wigleStatus.style.boxShadow = '0 0 10px #44ff44';\n                    } else if (isStarting) {\n                        // Services are starting up - YELLOW\n                        wigleStatus.style.background = '#ffaa00';\n                        wigleStatus.style.boxShadow = '0 0 10px #ffaa00';\n                    } else {\n                        // Services not started - RED\n                        wigleStatus.style.background = '#ff4444';\n                        wigleStatus.style.boxShadow = 'none';\n                    }\n                })\n                .catch(error => {\n                    console.error('Error checking Kismet status:', error);\n                    \n                    // Get startup status to determine if this is expected\n                    const isStarting = window.servicesStarting || false;\n                    const isStopping = window.servicesStopping || false;\n                    \n                    // Only show error state if not during start/stop operations\n                    if (!isStarting && !isStopping) {\n                        // Set both indicators to error state\n                        const kismetStatus = document.getElementById('kismet-status');\n                        const wigleStatus = document.getElementById('wigle-status');\n                        \n                        kismetStatus.style.background = '#ff4444';\n                        wigleStatus.style.background = '#ff4444';\n                        kismetStatus.style.boxShadow = 'none';\n                        wigleStatus.style.boxShadow = 'none';\n                    }\n                    // During stop operations, this is expected due to network reset\n                });\n        }\n\n        // Update status more frequently when starting/stopping\n        let statusUpdateInterval;\n        let normalUpdateInterval;\n        \n        function startStatusUpdates() {\n            // Clear any existing intervals\n            if (statusUpdateInterval) {\n                clearInterval(statusUpdateInterval);\n            }\n            if (normalUpdateInterval) {\n                clearInterval(normalUpdateInterval);\n            }\n            \n            // Wait 5 seconds before first update to avoid false positives\n            setTimeout(() => {\n                // Then update every 2 seconds for 70 seconds\n                statusUpdateInterval = setInterval(updateKismetStatus, 2000);\n                \n                // Stop rapid updates after 70 seconds\n                setTimeout(() => {\n                    clearInterval(statusUpdateInterval);\n                    // Return to normal update interval\n                    normalUpdateInterval = setInterval(updateKismetStatus, 5000);\n                }, 70000);\n            }, 5000);\n        }\n\n        async function startKismet() {\n            console.log('startKismet function called');\n            showNotification('Starting Kismet services...', 'info');\n            try {\n                console.log('Attempting to call /api/start-script endpoint');\n                const response = await fetch('/run-script', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ script_name: 'kismet' })\n                });\n                \n                console.log('Response received:', response.status, response.statusText);\n                \n                if (!response.ok) {\n                    console.error('Response not OK, attempting to read error data');\n                    const errorData = await response.json();\n                    console.error('Error data:', errorData);\n                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n                }\n                \n                const data = await response.json();\n                \n                if(data.success === true) {\n                    // Don't show success immediately - wait for services to actually start\n                    showNotification('Kismet services are starting up, please wait...', 'info');\n                    \n                    // Set global flag to indicate services are starting\n                    window.servicesStarting = true;\n                    \n                    // Set status indicators to yellow immediately to show starting\n                    const kismetStatus = document.getElementById('kismet-status');\n                    const wigleStatus = document.getElementById('wigle-status');\n                    if (kismetStatus) {\n                        kismetStatus.style.background = '#ffaa00';\n                        kismetStatus.style.boxShadow = '0 0 10px #ffaa00';\n                    }\n                    if (wigleStatus) {\n                        wigleStatus.style.background = '#ffaa00';\n                        wigleStatus.style.boxShadow = '0 0 10px #ffaa00';\n                    }\n                    \n                    startStatusUpdates(); // Start frequent status updates\n                    \n                    // Check service status periodically\n                    let checkCount = 0;\n                    const maxChecks = 65; // 65 seconds max (accounting for 60 second startup + buffer)\n                    const minChecks = 46; // Don't report success before 46 seconds (actual startup time)\n                    \n                    const checkInterval = setInterval(async () => {\n                        checkCount++;\n                        \n                        try {\n                            const statusResponse = await fetch('/script-status');\n                            const statusData = await statusResponse.json();\n                            \n                            // Only report success after minimum time has passed\n                            if (statusData.kismet_running && statusData.wigle_running && checkCount >= minChecks) {\n                                // Both services are running - wait for iframe to load\n                                clearInterval(checkInterval);\n                                \n                                // Show almost ready message\n                                showNotification('Services started, loading Kismet interface...', 'info');\n                                \n                                // Just show success\n                                showNotification('Kismet services started successfully!', 'success');\n                                window.servicesStarting = false; // Clear startup flag\n                                \n                                updateKismetStatus();\n                            } else if (checkCount >= maxChecks) {\n                                // Timeout\n                                clearInterval(checkInterval);\n                                showNotification('Services are taking longer than expected to start', 'warning');\n                                window.servicesStarting = false; // Clear startup flag on timeout\n                            } else if (checkCount % 10 === 0) {\n                                // Update progress every 10 seconds\n                                const elapsed = checkCount;\n                                const stage = elapsed < 12 ? 'Initializing GPS and configuring GPSD...' :\n                                            elapsed < 21 ? 'Starting cgps and preparing network...' :\n                                            elapsed < 36 ? 'Starting Kismet server (15s initialization)...' :\n                                            elapsed < 46 ? 'Launching WigleToTAK service...' :\n                                            'Verifying services and loading interface...';\n                                showNotification(`${stage} ${elapsed}s elapsed`, 'info');\n                            }\n                        } catch (error) {\n                            // Keep checking\n                            if (checkCount >= maxChecks) {\n                                clearInterval(checkInterval);\n                                showNotification('Failed to verify service status', 'error');\n                            }\n                        }\n                    }, 1000);\n                } else {\n                    throw new Error(data.message || 'Failed to start Kismet');\n                }\n            } catch (error) {\n                console.error('Error in startKismet:', error);\n                console.error('Error stack:', error.stack);\n                showNotification(`Failed to start Kismet services: ${error.message}`, 'error');\n                window.servicesStarting = false; // Clear startup flag on error\n            }\n        }\n\n        function stopKismet() {\n            showNotification('Stopping Kismet services...', 'info');\n            window.servicesStopping = true; // Set flag to suppress network errors\n            \n            fetch('/stop-script', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    if(data.status === 'success') {\n                        showNotification('Kismet services stopped successfully!', 'success');\n                        \n                        // Clear flags\n                        window.servicesStarting = false;\n                        window.servicesStopping = false;\n                        \n                        // Set indicators to red immediately\n                        const kismetStatus = document.getElementById('kismet-status');\n                        const wigleStatus = document.getElementById('wigle-status');\n                        if (kismetStatus) {\n                            kismetStatus.style.background = '#ff4444';\n                            kismetStatus.style.boxShadow = 'none';\n                        }\n                        if (wigleStatus) {\n                            wigleStatus.style.background = '#ff4444';\n                            wigleStatus.style.boxShadow = 'none';\n                        }\n                        \n                        // Start frequent status updates to show services stopping\n                        startStatusUpdates();\n                    } else {\n                        showNotification('Error stopping Kismet services: ' + (data.message || 'Unknown error'), 'error');\n                        window.servicesStopping = false; // Clear flag on error\n                    }\n                })\n                .catch(error => {\n                    console.error('Error:', error);\n                    showNotification('Failed to stop Kismet services. Please try again.', 'error');\n                    window.servicesStopping = false; // Clear flag on error\n                });\n        }\n\n        function toggleMinimize(button) {\n            const gridItem = button.closest('.grid-item');\n            const isMinimized = gridItem.classList.toggle('minimized');\n            \n            if (isMinimized) {\n                // Add to minimized tabs\n                const tab = document.createElement('div');\n                tab.className = 'minimized-tab';\n                tab.innerHTML = `\n                    ${gridItem.querySelector('h2').textContent.replace('▼', '').replace('▲', '')}\n                    <button class=\"restore-button\" onclick=\"restoreBox('${gridItem.id}')\">▲</button>\n                `;\n                document.getElementById('minimized-tabs').appendChild(tab);\n\n                // Enable resizing for other boxes\n                const otherBoxes = document.querySelectorAll('.grid-item:not(.minimized)');\n                otherBoxes.forEach(box => {\n                    box.style.minWidth = '200px';\n                    box.style.minHeight = '150px';\n                });\n            } else {\n                // Remove from minimized tabs\n                const tabs = document.querySelectorAll('.minimized-tab');\n                tabs.forEach(tab => {\n                    if (tab.textContent.includes(gridItem.querySelector('h2').textContent.replace('▼', '').replace('▲', ''))) {\n                        tab.remove();\n                    }\n                });\n\n                // Disable resizing if no boxes are minimized\n                const minimizedBoxes = document.querySelectorAll('.grid-item.minimized');\n                if (minimizedBoxes.length === 0) {\n                    const allBoxes = document.querySelectorAll('.grid-item');\n                    allBoxes.forEach(box => {\n                        box.style.minWidth = '';\n                        box.style.minHeight = '';\n                        // Reset to original position and size\n                        resetBoxPosition(box);\n                    });\n                }\n            }\n        }\n\n        function resetBoxPosition(box) {\n            switch(box.id) {\n                case 'instructions':\n                    box.style.top = '8px';\n                    box.style.left = '8px';\n                    box.style.width = `calc(4 * (100vw / 12) - 16px)`;\n                    // Reset to auto height to fit content\n                    box.style.height = 'auto';\n                    setTimeout(() => {\n                        const contentHeight = box.offsetHeight;\n                        box.style.height = contentHeight + 'px';\n                    }, 100);\n                    break;\n                case 'wifi-data-feed':\n                    box.style.top = '8px';\n                    box.style.left = `calc(4 * (100vw / 12) + 8px)`;\n                    box.style.width = `calc(4 * (100vw / 12) - 16px)`;\n                    box.style.height = `calc(100vh - 140px - 8px)`;\n                    break;\n                case 'start-menu':\n                case 'system-status':\n                    // Reposition these boxes under instructions\n                    const instructionsBox = document.getElementById('instructions');\n                    if (instructionsBox) {\n                        setTimeout(() => {\n                            const instructionsHeight = instructionsBox.offsetHeight;\n                            const instructionsBottom = instructionsBox.offsetTop + instructionsHeight;\n                            const remainingHeight = window.innerHeight - instructionsBottom - 130 - 16;\n                            const startMenuHeight = (remainingHeight * 0.5) - 8;\n                            const systemStatusHeight = (remainingHeight * 0.5) - 8;\n                            \n                            box.style.left = '8px';\n                            box.style.width = `calc(4 * (100vw / 12) - 16px)`;\n                            \n                            if (box.id === 'start-menu') {\n                                box.style.top = (instructionsBottom + 8) + 'px';\n                                box.style.height = startMenuHeight + 'px';\n                            } else if (box.id === 'system-status') {\n                                box.style.top = (instructionsBottom + startMenuHeight + 16) + 'px';\n                                box.style.height = systemStatusHeight + 'px';\n                                // Refresh resize handles for system status box\n                                refreshResizeHandles(box);\n                            }\n                        }, 100);\n                    }\n                    break;\n            }\n        }\n\n        function restoreBox(boxId) {\n            const box = document.getElementById(boxId);\n            box.classList.remove('minimized');\n            \n            // Remove from minimized tabs\n            const tabs = document.querySelectorAll('.minimized-tab');\n            tabs.forEach(tab => {\n                if (tab.textContent.includes(box.querySelector('h2').textContent.replace('▼', '').replace('▲', ''))) {\n                    tab.remove();\n                }\n            });\n\n            // Disable resizing if no boxes are minimized\n            const minimizedBoxes = document.querySelectorAll('.grid-item.minimized');\n            if (minimizedBoxes.length === 0) {\n                const allBoxes = document.querySelectorAll('.grid-item');\n                allBoxes.forEach(box => {\n                    box.style.minWidth = '';\n                    box.style.minHeight = '';\n                    // Reset to original position and size\n                    resetBoxPosition(box);\n                });\n            }\n        }\n\n        // Initialize draggable functionality\n        function initializeGrid() {\n            const gridItems = document.querySelectorAll('.grid-item');\n            gridItems.forEach(item => {\n                // Allow all boxes including Kismet iframe to be draggable\n                \n                const header = item.querySelector('.box-header');\n                if (header) {\n                    // Remove the click handler that was blocking minimize buttons\n                    // The document-level click handler will handle control buttons\n                }\n\n                // Make box draggable - DISABLED ON MOBILE\n                if (header && window.innerWidth > 768) {\n                    header.addEventListener('mousedown', function(e) {\n                        if (e.target.classList.contains('control-button-small')) return;\n                        \n                        const box = this.closest('.grid-item');\n                        const startX = e.clientX;\n                        const startY = e.clientY;\n                        const startLeft = box.offsetLeft;\n                        const startTop = box.offsetTop;\n                        \n                        // Set position absolute for dragging and preserve dimensions\n                        if (box.style.position !== 'absolute') {\n                            // Store current dimensions before changing position\n                            const currentWidth = box.offsetWidth;\n                            const currentHeight = box.offsetHeight;\n                            \n                            box.style.position = 'absolute';\n                            box.style.left = startLeft + 'px';\n                            box.style.top = startTop + 'px';\n                            \n                            // Preserve the original dimensions\n                            box.style.width = currentWidth + 'px';\n                            box.style.height = currentHeight + 'px';\n                        }\n                        \n                        function onMouseMove(e) {\n                            const newLeft = startLeft + (e.clientX - startX);\n                            const newTop = startTop + (e.clientY - startY);\n                            \n                            box.style.left = `${newLeft}px`;\n                            box.style.top = `${newTop}px`;\n                        }\n                        \n                        function onMouseUp() {\n                            document.removeEventListener('mousemove', onMouseMove);\n                            document.removeEventListener('mouseup', onMouseUp);\n                        }\n                        \n                        document.addEventListener('mousemove', onMouseMove);\n                        document.addEventListener('mouseup', onMouseUp);\n                    });\n                }\n            });\n        }\n\n        function createResizeHandles(box) {\n            // Skip resize handles on mobile\n            if (window.innerWidth <= 768) return;\n            \n            const positions = ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right'];\n            positions.forEach(pos => {\n                const handle = document.createElement('div');\n                handle.className = `resize-handle ${pos}`;\n                handle.style.zIndex = '1000';  // Ensure handles are on top\n                handle.onmousedown = function(e) { \n                    e.stopPropagation();\n                    e.preventDefault();\n                    console.log('Resize handle clicked:', pos, 'on box:', box.id);\n                    initResize(e, this); \n                };\n                box.appendChild(handle);\n            });\n        }\n        \n        function refreshResizeHandles(box) {\n            // Remove existing handles\n            const existingHandles = box.querySelectorAll('.resize-handle');\n            existingHandles.forEach(handle => handle.remove());\n            \n            // Recreate handles\n            createResizeHandles(box);\n        }\n\n        function initResize(e, handle) {\n            e.preventDefault();\n            const box = handle.closest('.grid-item');\n            console.log('Starting resize for box:', box.id);\n            \n            // Ensure box has absolute positioning for resize\n            if (box.style.position !== 'absolute') {\n                box.style.position = 'absolute';\n                box.style.left = box.offsetLeft + 'px';\n                box.style.top = box.offsetTop + 'px';\n            }\n            \n            const startX = e.clientX;\n            const startY = e.clientY;\n            const startWidth = box.offsetWidth;\n            const startHeight = box.offsetHeight;\n            const startLeft = box.offsetLeft;\n            const startTop = box.offsetTop;\n\n            function doResize(e) {\n                const pos = handle.className.split(' ')[1];\n                let newWidth = startWidth;\n                let newHeight = startHeight;\n                let newLeft = startLeft;\n                let newTop = startTop;\n\n                if (pos.includes('right')) {\n                    newWidth = startWidth + (e.clientX - startX);\n                }\n                if (pos.includes('left')) {\n                    newWidth = startWidth - (e.clientX - startX);\n                    newLeft = startLeft + (e.clientX - startX);\n                }\n                if (pos.includes('bottom')) {\n                    newHeight = startHeight + (e.clientY - startY);\n                }\n                if (pos.includes('top')) {\n                    newHeight = startHeight - (e.clientY - startY);\n                    newTop = startTop + (e.clientY - startY);\n                }\n\n                // Apply minimum size constraints\n                newWidth = Math.max(200, newWidth);\n                newHeight = Math.max(150, newHeight);\n\n                box.style.width = `${newWidth}px`;\n                \n                box.style.height = `${newHeight}px`;\n                \n                box.style.left = `${newLeft}px`;\n                box.style.top = `${newTop}px`;\n            }\n\n            function stopResize() {\n                document.removeEventListener('mousemove', doResize);\n                document.removeEventListener('mouseup', stopResize);\n            }\n\n            document.addEventListener('mousemove', doResize);\n            document.addEventListener('mouseup', stopResize);\n        }\n\n        // Add resize handles to all boxes when the page loads\n        document.addEventListener('DOMContentLoaded', function() {\n            const boxes = document.querySelectorAll('.grid-item');\n            boxes.forEach(box => {\n                // Add resize handles to all boxes including Kismet iframe\n                createResizeHandles(box);\n            });\n            initializeGrid();\n            \n            // Initialize Cesium Globe with a slight delay to ensure library is loaded\n            setTimeout(() => {\n                initializeCesiumGlobe();\n            }, 1000);\n            \n            // Auto-size the instructions box to fit content on page load\n            const instructionsBox = document.getElementById('instructions');\n            const startMenuBox = document.getElementById('start-menu');\n            const systemStatusBox = document.getElementById('system-status');\n            \n            if (instructionsBox && window.innerWidth > 768) {\n                // Let the browser calculate the natural height\n                instructionsBox.style.height = 'auto';\n                \n                // Get the actual height after content is rendered\n                setTimeout(() => {\n                    const contentHeight = instructionsBox.offsetHeight;\n                    // Set the height explicitly to avoid layout issues\n                    instructionsBox.style.height = contentHeight + 'px';\n                    \n                    // Position start-menu and system-status boxes under instructions\n                    if (startMenuBox && systemStatusBox) {\n                        const instructionsBottom = instructionsBox.offsetTop + contentHeight;\n                        const remainingHeight = window.innerHeight - instructionsBottom - 130 - 16; // 100px header + 30px footer, 16px for margins\n                        // Give equal space to both boxes\n                        const startMenuHeight = (remainingHeight * 0.5) - 8;\n                        const systemStatusHeight = (remainingHeight * 0.5) - 8;\n                        \n                        // Position start menu\n                        startMenuBox.style.top = (instructionsBottom + 8) + 'px';\n                        startMenuBox.style.height = startMenuHeight + 'px';\n                        \n                        // Position system status\n                        systemStatusBox.style.top = (instructionsBottom + startMenuHeight + 16) + 'px';\n                        systemStatusBox.style.height = systemStatusHeight + 'px';\n                        \n                        // Refresh resize handles after positioning\n                        refreshResizeHandles(systemStatusBox);\n                    }\n                }, 100);\n            }\n            \n            // Start periodic updates after DOM is loaded\n            setInterval(updateSystemStatus, 5000);\n            setInterval(updateKismetData, 2000);\n\n            // Initial updates after DOM is loaded\n            updateSystemStatus();\n            updateKismetData();\n            \n            // Add event listeners for control buttons\n            document.addEventListener('click', function(e) {\n                const action = e.target.getAttribute('data-action');\n                if (!action) return;\n                \n                console.log('Button clicked with action:', action);\n                \n                switch(action) {\n                    case 'minimize':\n                        toggleMinimize(e.target);\n                        break;\n                    case 'startKismet':\n                        console.log('startKismet action detected, calling function');\n                        startKismet();\n                        break;\n                    case 'stopKismet':\n                        stopKismet();\n                        break;\n                }\n            });\n        });\n\n        // Start periodic updates\n        setInterval(updateKismetStatus, 5000);\n\n        // Initial status update\n        updateKismetStatus();\n        \n        // Handle window resize to maintain proper positioning\n        window.addEventListener('resize', function() {\n            if (window.innerWidth > 768) {\n                const instructionsBox = document.getElementById('instructions');\n                const startMenuBox = document.getElementById('start-menu');\n                const systemStatusBox = document.getElementById('system-status');\n                \n                if (instructionsBox && startMenuBox && systemStatusBox) {\n                    const contentHeight = instructionsBox.offsetHeight;\n                    const instructionsBottom = instructionsBox.offsetTop + contentHeight;\n                    const remainingHeight = window.innerHeight - instructionsBottom - 130 - 16;\n                    const startMenuHeight = (remainingHeight * 0.5) - 8;\n                    const systemStatusHeight = (remainingHeight * 0.5) - 8;\n                    \n                    startMenuBox.style.top = (instructionsBottom + 8) + 'px';\n                    startMenuBox.style.height = startMenuHeight + 'px';\n                    \n                    systemStatusBox.style.top = (instructionsBottom + startMenuHeight + 16) + 'px';\n                    systemStatusBox.style.height = systemStatusHeight + 'px';\n                    \n                    // Refresh resize handles after window resize\n                    refreshResizeHandles(systemStatusBox);\n                }\n            }\n        });\n\n    </script>\n    \n    <!-- Theme Toggle Button -->\n    <button id=\"theme-toggle\" \n            aria-label=\"Toggle dark mode\" \n            aria-pressed=\"false\"\n            style=\"position: fixed; bottom: 80px; right: 20px; width: 48px; height: 48px; border-radius: 50%; background: var(--bg-secondary); border: 1px solid var(--border-primary); color: var(--text-primary); cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.3s ease; z-index: 1000; box-shadow: var(--shadow-lg);\">\n        <!-- Sun icon (for dark mode) -->\n        <svg id=\"sun-icon\" style=\"width: 24px; height: 24px; display: block;\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"></path>\n        </svg>\n        <!-- Moon icon (for light mode) -->\n        <svg id=\"moon-icon\" style=\"width: 24px; height: 24px; display: none;\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"></path>\n        </svg>\n    </button>\n    \n    <!-- Theme Switcher -->\n    <script src=\"/js/theme.js\"></script>\n    \n    <script>\n    // Theme toggle functionality\n    (function() {\n        const themeToggle = document.getElementById('theme-toggle');\n        const sunIcon = document.getElementById('sun-icon');\n        const moonIcon = document.getElementById('moon-icon');\n        const html = document.documentElement;\n        \n        // Check for saved theme preference or default to blue theme\n        const currentTheme = localStorage.getItem('theme') || 'blue';\n        \n        // Apply saved theme on load\n        if (currentTheme === 'dark') {\n            html.setAttribute('data-theme', 'dark');\n            themeToggle.setAttribute('aria-pressed', 'true');\n            sunIcon.style.display = 'none';\n            moonIcon.style.display = 'block';\n        }\n        \n        // Toggle theme\n        themeToggle.addEventListener('click', function() {\n            const isDark = html.getAttribute('data-theme') === 'dark';\n            \n            if (isDark) {\n                // Switch to blue mode (default)\n                html.removeAttribute('data-theme');\n                localStorage.setItem('theme', 'blue');\n                themeToggle.setAttribute('aria-pressed', 'false');\n                sunIcon.style.display = 'block';\n                moonIcon.style.display = 'none';\n            } else {\n                // Switch to dark mode\n                html.setAttribute('data-theme', 'dark');\n                localStorage.setItem('theme', 'dark');\n                themeToggle.setAttribute('aria-pressed', 'true');\n                sunIcon.style.display = 'none';\n                moonIcon.style.display = 'block';\n            }\n        });\n        \n        // Hover effects\n        themeToggle.addEventListener('mouseenter', function() {\n            this.style.transform = 'scale(1.1)';\n            this.style.boxShadow = 'var(--shadow-lg), var(--glow-primary)';\n        });\n        \n        themeToggle.addEventListener('mouseleave', function() {\n            this.style.transform = 'scale(1)';\n            this.style.boxShadow = 'var(--shadow-lg)';\n        });\n    })();\n    </script>\n</body>\n</html>",
      "headers": {
        "referrer-policy": "no-referrer",
        "x-content-type-options": "nosniff",
        "x-dns-prefetch-control": "off",
        "x-download-options": "noopen",
        "x-permitted-cross-domain-policies": "none",
        "x-xss-protection": "0",
        "vary": "Origin",
        "access-control-allow-credentials": "true",
        "access-control-expose-headers": "Content-Length,Content-Type,X-Request-Id,X-Response-Time",
        "accept-ranges": "bytes",
        "cache-control": "public, max-age=0",
        "last-modified": "Sun, 22 Jun 2025 17:01:36 GMT",
        "etag": "W/\"21af0-19798969bbf\"",
        "content-type": "text/html; charset=UTF-8",
        "content-length": "137968",
        "date": "Mon, 23 Jun 2025 02:34:04 GMT",
        "connection": "keep-alive",
        "keep-alive": "timeout=5"
      }
    },
    "Kismet status API": {
      "success": true,
      "statusCode": 200,
      "data": "{\"connected\":false,\"buffer_size\":0,\"config\":{\"fft_size\":0,\"center_freq\":145000000,\"samp_rate\":2400000,\"fft_compression\":\"none\",\"signal_threshold\":-70},\"last_update\":null,\"last_signal_detection\":null,\"signal_history_length\":0,\"reconnect_attempts\":0,\"max_buffer_size\":1000,\"server_uptime\":271.530483618,\"connected_clients\":0,\"mode\":\"DEMO MODE\",\"openwebrx_connected\":false,\"real_data\":false,\"fft_buffer_size\":0,\"last_fft_time\":null}",
      "headers": {
        "referrer-policy": "no-referrer",
        "x-content-type-options": "nosniff",
        "x-dns-prefetch-control": "off",
        "x-download-options": "noopen",
        "x-permitted-cross-domain-policies": "none",
        "x-xss-protection": "0",
        "vary": "Origin",
        "access-control-allow-credentials": "true",
        "access-control-expose-headers": "Content-Length,Content-Type,X-Request-Id,X-Response-Time",
        "content-type": "application/json; charset=utf-8",
        "content-length": "429",
        "etag": "W/\"1ad-+BRLfPRGgwRdzSVHWxMdzLYYquU\"",
        "date": "Mon, 23 Jun 2025 02:34:04 GMT",
        "connection": "keep-alive",
        "keep-alive": "timeout=5"
      }
    },
    "SDR profiles": {
      "success": true,
      "statusCode": 200,
      "data": "{\"vhf\":{\"name\":\"VHF Amateur (144-148 MHz)\",\"ranges\":[[144,148]],\"step\":25,\"description\":\"VHF Amateur Radio Band\"},\"uhf\":{\"name\":\"UHF Amateur (420-450 MHz)\",\"ranges\":[[420,450]],\"step\":25,\"description\":\"UHF Amateur Radio Band\"},\"ism\":{\"name\":\"ISM Band (2.4 GHz)\",\"ranges\":[[2400,2485]],\"step\":1000,\"description\":\"Industrial, Scientific, Medical Band\"}}",
      "headers": {
        "referrer-policy": "no-referrer",
        "x-content-type-options": "nosniff",
        "x-dns-prefetch-control": "off",
        "x-download-options": "noopen",
        "x-permitted-cross-domain-policies": "none",
        "x-xss-protection": "0",
        "vary": "Origin",
        "access-control-allow-credentials": "true",
        "access-control-expose-headers": "Content-Length,Content-Type,X-Request-Id,X-Response-Time",
        "content-type": "application/json; charset=utf-8",
        "content-length": "351",
        "etag": "W/\"15f-vBoV6OwfzR8enSUlPtv4OWd9c6Y\"",
        "date": "Mon, 23 Jun 2025 02:34:04 GMT",
        "connection": "keep-alive",
        "keep-alive": "timeout=5"
      }
    },
    "WigleToTAK root": {
      "success": true,
      "statusCode": 200,
      "data": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n    <meta name=\"format-detection\" content=\"telephone=no\">\n    <meta http-equiv=\"cache-control\" content=\"no-cache, no-store, must-revalidate\">\n    <meta http-equiv=\"pragma\" content=\"no-cache\">\n    <meta http-equiv=\"expires\" content=\"0\">\n    <title>Kismet Operations Center</title>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        /* CSS Custom Properties for Theme Support */\n        :root {\n            /* Default Blue Cyber Theme */\n            --bg-primary: #030610;\n            --bg-secondary: rgba(12, 22, 48, 0.65);\n            --bg-tertiary: rgba(12, 22, 48, 0.85);\n            --bg-panel: rgba(12, 22, 48, 0.95);\n            \n            --text-primary: #d0d8f0;\n            --text-secondary: rgba(0, 220, 255, 0.8);\n            --text-muted: #737373;\n            \n            --border-primary: rgba(0, 190, 215, 0.35);\n            --border-secondary: rgba(0, 190, 215, 0.25);\n            \n            --accent-primary: #00d2ff;    /* Cyan accent */\n            --accent-success: #44ff44;    /* Green accent */\n            --accent-error: #ff4444;      /* Red accent */\n            --accent-warning: #f59e0b;    /* Amber accent */\n            \n            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.3);\n            --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.2);\n            --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);\n            \n            /* Original glow effects */\n            --glow-primary: 0 0 20px rgba(0, 220, 255, 0.5);\n            --glow-success: 0 0 20px rgba(68, 255, 68, 0.5);\n            --glow-error: 0 0 20px rgba(255, 68, 68, 0.5);\n        }\n        \n        /* Cursor.directory Dark Theme */\n        [data-theme=\"dark\"] {\n            --bg-primary: #0f172a;\n            --bg-secondary: rgba(30, 41, 59, 0.65);\n            --bg-tertiary: rgba(51, 65, 85, 0.85);\n            --bg-panel: rgba(30, 41, 59, 0.95);\n            \n            --text-primary: #f8fafc;\n            --text-secondary: #cbd5e1;\n            --text-muted: #94a3b8;\n            \n            --border-primary: rgba(71, 85, 105, 0.35);\n            --border-secondary: rgba(56, 189, 248, 0.25);\n            \n            --accent-primary: #38bdf8;\n            --accent-success: #10b981;\n            --accent-error: #ef4444;\n            --accent-warning: #f59e0b;\n            \n            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.4);\n            --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.3);\n            --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.2);\n            \n            --glow-primary: 0 0 20px rgba(56, 189, 248, 0.6);\n            --glow-success: 0 0 20px rgba(16, 185, 129, 0.5);\n            --glow-error: 0 0 20px rgba(239, 68, 68, 0.5);\n        }\n        \n        /* Phase 3.1: Foundation Changes - CSS Reset and Box Sizing */\n        *, *::before, *::after {\n            box-sizing: border-box;\n        }\n        \n        html {\n            height: 100%;\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            -webkit-text-size-adjust: 100%;\n            touch-action: manipulation;\n        }\n\n        body {\n            height: 100%;\n            margin: 0;\n            padding: 0;\n            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background-color: var(--bg-primary);\n            color: var(--text-primary);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            overflow: hidden; /* Prevent body itself from scrolling */\n            box-sizing: border-box;\n            transition: background-color 0.3s ease, color 0.3s ease;\n        }\n        \n        /* Phase 3.2: Layout Transformation - Mobile body overflow fix */\n        @media (max-width: 768px) {\n            body {\n                overflow: auto;\n                height: auto;\n                min-height: 100vh;\n            }\n        }\n\n        body::before {\n            content: \"\";\n            position: fixed;\n            top: 0; left: 0;\n            width: 100%; height: 100%;\n            background:\n                linear-gradient(45deg, rgba(14, 165, 233, 0.02) 25%, transparent 25%, transparent 75%, rgba(14, 165, 233, 0.02) 75%),\n                linear-gradient(-45deg, rgba(14, 165, 233, 0.02) 25%, transparent 25%, transparent 75%, rgba(14, 165, 233, 0.02) 75%);\n            background-size: 70px 70px; /* Slightly larger grid */\n            z-index: -2; /* Ensure it's behind potential new layers */\n            opacity: 0.4; /* Subtler grid */\n            animation: background-pan 80s linear infinite; /* Slower pan */\n        }\n\n        /* Optional: Add a subtle static starfield or noise layer */\n        body::after {\n            content: \"\";\n            position: fixed;\n            top: 0; left: 0;\n            width: 100%; height: 100%;\n            background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><circle fill=\"%23203050\" cx=\"10\" cy=\"10\" r=\"0.3\"/><circle fill=\"%23203050\" cx=\"30\" cy=\"30\" r=\"0.2\"/><circle fill=\"%23203050\" cx=\"50\" cy=\"50\" r=\"0.4\"/><circle fill=\"%23203050\" cx=\"70\" cy=\"70\" r=\"0.1\"/><circle fill=\"%23203050\" cx=\"90\" cy=\"90\" r=\"0.3\"/><circle fill=\"%23203050\" cx=\"10\" cy=\"90\" r=\"0.2\"/><circle fill=\"%23203050\" cx=\"90\" cy=\"10\" r=\"0.4\"/><circle fill=\"%23203050\" cx=\"50\" cy=\"10\" r=\"0.1\"/><circle fill=\"%23203050\" cx=\"10\" cy=\"50\" r=\"0.3\"/><circle fill=\"%23203050\" cx=\"30\" cy=\"70\" r=\"0.2\"/><circle fill=\"%23203050\" cx=\"70\" cy=\"30\" r=\"0.3\"/></svg>');\n            background-size: 100px 100px;\n            opacity: 0.08;\n            z-index: -1;\n        }\n\n\n        @keyframes background-pan {\n            0% { background-position: 0% 0%; }\n            100% { background-position: 1200px 1200px; } /* Ensure it pans a large distance */\n        }\n\n        .top-banner {\n            width: 100%;\n            background: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-bottom: 2px solid var(--accent-primary);\n            box-shadow: var(--glow-primary);\n            padding: 15px 25px;\n            text-align: center;\n            box-sizing: border-box;\n            flex-shrink: 0;\n            z-index: 10;\n            position: relative;\n            transition: all 0.3s ease;\n            overflow: hidden;\n        }\n\n        .top-banner::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 200%;\n            height: 100%;\n            background: linear-gradient(90deg,\n                transparent 0%,\n                rgba(124, 58, 237, 0.1) 25%,\n                rgba(124, 58, 237, 0.2) 50%,\n                rgba(124, 58, 237, 0.1) 75%,\n                transparent 100%);\n            animation: banner-scan 4s linear infinite;\n        }\n\n        .top-banner::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: \n                radial-gradient(circle at 20% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%),\n                radial-gradient(circle at 80% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%);\n            animation: radial-pulse 4s ease-in-out infinite;\n        }\n\n        @keyframes radial-pulse {\n            0%, 100% { opacity: 0.5; }\n            50% { opacity: 1; }\n        }\n\n        .top-banner h1 {\n            color: var(--text-primary);\n            text-transform: uppercase;\n            letter-spacing: 12px;\n            font-size: 2.4em;\n            font-weight: 800;\n            margin: 0;\n            text-shadow: var(--glow-primary);\n            position: relative;\n            font-family: 'Inter', sans-serif;\n            background: linear-gradient(90deg, \n                var(--text-primary) 0%,\n                var(--accent-primary) 25%,\n                var(--text-primary) 50%,\n                var(--accent-primary) 75%,\n                var(--text-primary) 100%);\n            -webkit-background-clip: text;\n            background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-size: 200% auto;\n            animation: shine 3s linear infinite;\n        }\n        \n        /* Phase 3.3: Top Banner Mobile Optimization */\n        @media (max-width: 768px) {\n            .top-banner {\n                padding: 10px 15px;\n            }\n            \n            .top-banner h1 {\n                font-size: clamp(1.2rem, 4vw, 2rem);\n                letter-spacing: 4px;\n            }\n            \n            .top-banner::before,\n            .top-banner::after {\n                animation: none; /* Disable complex animations on mobile */\n            }\n        }\n\n        @keyframes shine {\n            to {\n                background-position: 200% center;\n            }\n        }\n\n        .minimized-tabs {\n            background-color: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-bottom: 1px solid rgba(0, 190, 215, 0.35);\n            box-shadow: 0 2px 10px rgba(0, 150, 180, 0.1);\n            padding: 2px 20px;\n            display: flex;\n            gap: 10px;\n            position: fixed;\n            top: 60px;\n            left: 0;\n            right: 0;\n            z-index: 999;\n            height: 15px;\n            overflow-x: auto;\n            white-space: nowrap;\n        }\n        \n        /* Phase 3.2: Fixed Positioning Removal for Mobile */\n        @media (max-width: 768px) {\n            .minimized-tabs {\n                position: relative;\n                width: 100%;\n                top: auto;\n            }\n        }\n\n        .minimized-tab {\n            background-color: rgba(0, 190, 215, 0.15);\n            border: 1px solid rgba(0, 190, 215, 0.35);\n            padding: 0 10px;\n            border-radius: 3px;\n            display: flex;\n            align-items: center;\n            gap: 5px;\n            font-size: 0.8em;\n            color: rgba(124, 58, 237, 0.8);\n            cursor: pointer;\n            height: 15px;\n            line-height: 15px;\n        }\n\n        .minimized-tab:hover {\n            background-color: rgba(0, 190, 215, 0.25);\n        }\n\n        .restore-button {\n            background: none;\n            border: none;\n            color: rgba(124, 58, 237, 0.8);\n            cursor: pointer;\n            padding: 0;\n            font-size: 0.8em;\n            line-height: 1;\n        }\n\n        .restore-button:hover {\n            color: rgba(124, 58, 237, 1);\n        }\n\n        .page-container {\n            position: fixed;\n            top: 100px;\n            left: 0;\n            right: 0;\n            bottom: 30px;\n            height: calc(100vh - 130px);\n            overflow: hidden;\n        }\n\n        .main-content-area {\n            display: grid;\n            grid-template-columns: 300px 1.2fr 0.8fr; /* Three columns: left-stack(300px), middle(larger), right(smaller) */\n            grid-template-rows: 1fr; /* Single row, all items same height */\n            align-items: start; /* Align all items to top */\n            align-content: start; /* Align grid content to top */\n            gap: 20px; /* Consistent spacing between all columns */\n            width: 100%;\n            height: 100%;\n            padding: 20px;\n            margin: 0;\n            box-sizing: border-box;\n            overflow-y: auto;\n        }\n        \n        /* Phase 3.2: Grid System Transformation - Mobile First */\n        @media (max-width: 600px) {\n            .main-content-area {\n                grid-template-columns: 1fr; /* Mobile: single column */\n                grid-template-rows: auto;\n                height: auto;\n                overflow: visible;\n                gap: 8px;\n            }\n            \n            .side-stack,\n            .middle-long-box,\n            .right-stack {\n                width: 100%;\n            }\n        }\n        \n        @media (min-width: 601px) and (max-width: 1023px) {\n            .main-content-area {\n                grid-template-columns: 1fr; /* Tablet: single column for better readability */\n                grid-template-rows: auto;\n                height: auto;\n                overflow: visible;\n                gap: 12px;\n                padding: 12px;\n            }\n            \n            .side-stack,\n            .middle-long-box,\n            .right-stack {\n                width: 100%;\n            }\n        }\n\n        .container {\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            width: 100vw;\n            background: linear-gradient(135deg, #0a192f 0%, #020c1b 100%);\n            color: var(--accent-primary);\n            font-family: 'Courier New', monospace;\n            padding: 0;\n            margin: 0;\n            box-sizing: border-box;\n            overflow: hidden;\n            padding-bottom: 20px; /* Reduced padding for smaller footer */\n        }\n\n        .header {\n            background-color: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-bottom: 1px solid rgba(0, 190, 215, 0.35);\n            padding: 0;\n            margin: 0;\n            box-sizing: border-box;\n            height: 60px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n        \n        /* Phase 3.2: Priority 2 - Convert Fixed Heights to Responsive */\n        @media (max-width: 768px) {\n            .header {\n                height: auto;\n                min-height: 60px;\n                padding: 0.75rem;\n            }\n        }\n\n        .grid-item {\n            background-color: var(--bg-secondary);\n            backdrop-filter: blur(12px);\n            border: 1px solid var(--border-primary);\n            box-shadow: var(--shadow-md);\n            border-radius: 0;\n            padding: 0;\n            position: relative;\n            transition: all 0.3s ease;\n        }\n        \n        /* Phase 3.2: Grid Item Responsive Heights */\n        @media (max-width: 768px) {\n            .grid-item {\n                height: auto;\n                min-height: 200px;\n                max-height: 90vh;\n            }\n        }\n\n        .grid-item::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            border: 2px solid transparent;\n            pointer-events: none;\n        }\n\n        .grid-item:hover::before {\n            border-color: rgba(0, 190, 215, 0.35);\n        }\n\n        .grid-item .resize-handle {\n            position: absolute;\n            background: rgba(0, 190, 215, 0.35);\n            pointer-events: all;\n            z-index: 1000;\n            opacity: 0;\n            transition: opacity 0.2s;\n        }\n\n        .grid-item:hover .resize-handle {\n            opacity: 1;\n        }\n        \n        /* Phase 3.4: Mobile-Specific Controls - Hide resize handles */\n        @media (max-width: 768px) {\n            .resize-handle {\n                display: none !important;\n            }\n        }\n\n        .grid-item .resize-handle.top {\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 3px;\n            cursor: ns-resize;\n        }\n\n        .grid-item .resize-handle.bottom {\n            bottom: 0;\n            left: 0;\n            right: 0;\n            height: 3px;\n            cursor: ns-resize;\n        }\n\n        .grid-item .resize-handle.left {\n            left: 0;\n            top: 0;\n            bottom: 0;\n            width: 3px;\n            cursor: ew-resize;\n        }\n\n        .grid-item .resize-handle.right {\n            right: 0;\n            top: 0;\n            bottom: 0;\n            width: 3px;\n            cursor: ew-resize;\n        }\n\n        .grid-item .resize-handle.top-left {\n            top: 0;\n            left: 0;\n            width: 6px;\n            height: 6px;\n            cursor: nw-resize;\n        }\n\n        .grid-item .resize-handle.top-right {\n            top: 0;\n            right: 0;\n            width: 6px;\n            height: 6px;\n            cursor: ne-resize;\n        }\n\n        .grid-item .resize-handle.bottom-left {\n            bottom: 0;\n            left: 0;\n            width: 6px;\n            height: 6px;\n            cursor: sw-resize;\n        }\n\n        .grid-item .resize-handle.bottom-right {\n            bottom: 0;\n            right: 0;\n            width: 6px;\n            height: 6px;\n            cursor: se-resize;\n        }\n\n        .grid-item * {\n            resize: none;\n            cursor: default !important;\n        }\n        \n        /* Override cursor for control buttons */\n        .grid-item .control-button-small {\n            cursor: pointer !important;\n        }\n        \n        /* Enable move cursor on desktop for draggable headers */\n        @media (min-width: 769px) {\n            .grid-item .box-header {\n                cursor: move !important;\n            }\n            \n            /* Remove position override to allow dragging */\n        }\n\n        .grid-item.expanded {\n            display: none;\n        }\n\n        .grid-item.expanded.middle {\n            display: none;\n        }\n\n        .grid-item.minimized {\n            display: none;\n        }\n\n        .grid-placeholder {\n            display: none;\n        }\n\n        .grid-item.dragging {\n            display: none;\n        }\n\n        .box-content {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n            height: 100%;\n            overflow: hidden;\n            padding: 4px;\n            width: 100%;\n        }\n\n        .box-header {\n            background: var(--bg-tertiary);\n            border: 1px solid var(--border-primary);\n            border-bottom: 2px solid var(--accent-primary);\n            padding: 5px 20px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            position: relative;\n            height: 20px;\n            box-shadow: var(--shadow-sm);\n            backdrop-filter: blur(8px);\n            overflow: hidden;\n            transition: all 0.3s ease;\n        }\n\n        .box-header::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: -100%;\n            width: 200%;\n            height: 100%;\n            background: linear-gradient(90deg,\n                transparent 0%,\n                rgba(124, 58, 237, 0.1) 25%,\n                rgba(124, 58, 237, 0.2) 50%,\n                rgba(124, 58, 237, 0.1) 75%,\n                transparent 100%);\n            animation: header-scan 3s linear infinite;\n        }\n\n        .box-header::after {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: \n                radial-gradient(circle at 20% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%),\n                radial-gradient(circle at 80% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%);\n            animation: radial-pulse 4s ease-in-out infinite;\n        }\n\n        .box-header h2 {\n            color: #fff;\n            margin: 0;\n            font-size: 1em;\n            font-weight: 700;\n            text-align: center;\n            width: 100%;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n            text-shadow: \n                0 0 10px rgba(124, 58, 237, 0.8),\n                0 0 20px rgba(124, 58, 237, 0.5),\n                0 0 30px rgba(124, 58, 237, 0.3);\n            font-family: 'Inter', sans-serif;\n            position: relative;\n            background: linear-gradient(90deg, \n                #fff 0%,\n                #00d2ff 25%,\n                #fff 50%,\n                #00d2ff 75%,\n                #fff 100%);\n            -webkit-background-clip: text;\n            background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-size: 200% auto;\n            animation: shine 3s linear infinite;\n        }\n\n        .box-header h2::before,\n        .box-header h2::after {\n            content: '';\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 8px;\n            height: 8px;\n            background: rgba(124, 58, 237, 0.9);\n            border-radius: 50%;\n            box-shadow: \n                0 0 10px rgba(124, 58, 237, 0.8),\n                0 0 20px rgba(124, 58, 237, 0.6),\n                0 0 30px rgba(124, 58, 237, 0.4);\n            animation: dot-pulse 2s ease-in-out infinite;\n            will-change: transform, opacity;\n            z-index: 1;\n        }\n\n        .box-header h2::before {\n            left: -20px;\n            animation-delay: 0s;\n        }\n\n        .box-header h2::after {\n            right: -20px;\n            animation-delay: 1s;\n        }\n\n        @keyframes dot-pulse {\n            0% { \n                transform: translateY(-50%) scale(1); \n                opacity: 0.8;\n                box-shadow: \n                    0 0 10px rgba(124, 58, 237, 0.8),\n                    0 0 20px rgba(124, 58, 237, 0.6),\n                    0 0 30px rgba(124, 58, 237, 0.4);\n            }\n            50% { \n                transform: translateY(-50%) scale(1.2); \n                opacity: 1;\n                box-shadow: \n                    0 0 15px rgba(124, 58, 237, 0.9),\n                    0 0 30px rgba(124, 58, 237, 0.7),\n                    0 0 45px rgba(124, 58, 237, 0.5);\n            }\n            100% { \n                transform: translateY(-50%) scale(1); \n                opacity: 0.8;\n                box-shadow: \n                    0 0 10px rgba(124, 58, 237, 0.8),\n                    0 0 20px rgba(124, 58, 237, 0.6),\n                    0 0 30px rgba(124, 58, 237, 0.4);\n            }\n        }\n\n        .box-controls {\n            position: absolute;\n            right: 8px;\n            top: 50%;\n            transform: translateY(-50%);\n            display: flex;\n            gap: 5px;\n            align-items: center;\n            z-index: 100;\n        }\n\n        .control-button-small {\n            background: rgba(0, 0, 0, 0.5);\n            border: 1px solid var(--accent-primary);\n            border-radius: 4px;\n            color: var(--accent-primary);\n            cursor: pointer !important;\n            font-size: 1.2em;\n            padding: 8px 12px;\n            transition: all 0.3s ease;\n            z-index: 101;\n            text-shadow: var(--glow-primary);\n            pointer-events: auto !important;\n            position: relative;\n            min-width: 44px;\n            min-height: 44px;\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            -webkit-tap-highlight-color: transparent;\n        }\n\n        .control-button-small:hover {\n            color: var(--text-primary);\n            text-shadow: var(--glow-primary);\n            transform: translateY(-2px);\n            background: rgba(0, 210, 255, 0.2);\n            border-color: var(--text-primary);\n        }\n        \n        .control-button-small:active {\n            transform: scale(0.95);\n            background: rgba(0, 210, 255, 0.3);\n        }\n\n        .grid-item h2 {\n            color: #a0e0ff;\n            border-bottom: none;\n            padding-bottom: 0;\n            margin: 0;\n            letter-spacing: 1.5px;\n            font-weight: 500;\n            font-size: 1.1em;\n            text-shadow: 0 0 5px rgba(0, 200, 220, 0.3);\n        }\n\n        .minimize-button {\n            background: none;\n            border: none;\n            color: var(--accent-primary);\n            cursor: pointer;\n            font-size: 1.2em;\n            padding: 0 5px;\n            transition: transform 0.3s ease;\n        }\n\n        .minimize-button:hover {\n            color: #00f2ff;\n            text-shadow: 0 0 8px rgba(124, 58, 237, 0.6);\n        }\n\n        .minimize-button.minimized {\n            transform: rotate(180deg);\n        }\n\n        .grid-item.minimized .grid-item-content {\n            display: none;\n        }\n\n        .grid-item-content {\n            flex-grow: 1;\n            overflow-y: auto;\n            padding-right: 5px;\n            scrollbar-width: thin;\n            scrollbar-color: rgba(124, 58, 237, 0.5) rgba(3, 6, 16, 0.5);\n        }\n        \n        /* Special styling for instructions box content */\n        #instructions .grid-item-content {\n            overflow-y: visible; /* Don't scroll the content */\n            padding: 15px;\n        }\n        \n        /* Custom scrollbar for Webkit browsers */\n        .grid-item-content::-webkit-scrollbar {\n            width: 6px;\n        }\n        .grid-item-content::-webkit-scrollbar-track {\n            background: rgba(3, 6, 16, 0.3);\n            border-radius: 3px;\n        }\n        .grid-item-content::-webkit-scrollbar-thumb {\n            background-color: rgba(124, 58, 237, 0.4);\n            border-radius: 3px;\n            border: 1px solid rgba(124, 58, 237, 0.2);\n        }\n        .grid-item-content::-webkit-scrollbar-thumb:hover {\n            background-color: rgba(124, 58, 237, 0.6);\n        }\n\n\n        .middle-long-box, .right-long-box {\n            /* Inherits .grid-item styles, full height from grid row */\n            width: 100%;\n            height: 100%;\n            box-sizing: border-box;\n        }\n\n        /* Kismet data feed goes in middle column - keep its current size */\n        #wifi-data-feed.middle-long-box {\n            grid-column: 2;\n            grid-row: 1;\n            width: 100%; /* Fill available space */\n            height: 100%; /* Full height of grid cell */\n        }\n\n        /* Globe box goes in right column - fill remaining space */\n        #cesium-globe {\n            grid-column: 3;\n            grid-row: 1;\n            width: 100%; /* Fill all remaining white space */\n            height: 100%; /* Match middle column height */\n        }\n\n        /* Ensure proper grid positioning for all columns */\n        .main-content-area > .side-stack {\n            grid-column: 1;\n            grid-row: 1;\n            align-self: start;\n            margin-top: 0;\n        }\n        \n        .main-content-area > .middle-long-box {\n            grid-column: 2;\n            grid-row: 1;\n            align-self: start;\n            margin-top: 0;\n        }\n        \n        .main-content-area > .right-long-box {\n            grid-column: 3;\n            grid-row: 1;\n            align-self: start;\n            margin-top: 0;\n        }\n\n        .side-stack {\n            display: flex;\n            flex-direction: column;\n            gap: 10px; /* Increased gap to match main grid */\n            height: 100%; \n        }\n\n\n        /* Right long box styles - matches middle-long-box structure */\n        .right-long-box {\n            /* Same as middle-long-box - no flex, just a container */\n        }\n\n        /* Cesium globe specific styles */\n        #cesium-globe {\n            height: calc(100% + 15px); /* Extend bottom of box */\n            flex: 1;\n            margin-top: -10px; /* Move globe box up slightly to align with Kismet data feed */\n            margin-bottom: -15px; /* Allow box to extend beyond normal bounds */\n        }\n\n        #cesium-container {\n            background: #000;\n            border-radius: 4px;\n            overflow: hidden;\n            width: 100%; /* Full width of the container */\n            height: 500px; /* Fixed height to make globe display much taller */\n        }\n\n        /* Cesium widget overrides */\n        .cesium-viewer .cesium-widget-credits {\n            display: none !important;\n        }\n\n        .cesium-viewer {\n            font-family: 'Inter', sans-serif;\n        }\n\n        .cesium-controls button {\n            width: 30px;\n            height: 30px;\n            font-size: 18px;\n            font-weight: bold;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        /* Position info styling */\n        #position-info {\n            pointer-events: none;\n            max-width: 200px;\n        }\n\n        /* Maps dropdown styling */\n        .dropdown-header:hover {\n            background: var(--bg-tertiary) !important;\n        }\n\n        .dropdown-content.expanded {\n            max-height: 300px !important;\n        }\n\n        .map-option:hover {\n            background: var(--bg-tertiary) !important;\n            border-left-color: var(--accent-success) !important;\n        }\n\n        .map-option.active {\n            border-left-color: var(--accent-success) !important;\n            background: var(--bg-tertiary) !important;\n        }\n\n        .map-option.active::after {\n            content: '✓';\n            float: right;\n            color: var(--accent-success);\n            font-weight: bold;\n        }\n\n        /* Three-column responsive adjustments */\n        @media (max-width: 1400px) {\n            .main-content-area {\n                grid-template-columns: 280px 1.2fr 0.8fr;\n            }\n        }\n\n        @media (max-width: 1200px) {\n            .main-content-area {\n                grid-template-columns: 1fr;\n            }\n            \n            .side-stack,\n            .right-long-box {\n                width: 100%;\n            }\n            \n            .side-stack {\n                order: 1;\n            }\n            \n            .middle-long-box {\n                order: 2;\n            }\n            \n            .right-long-box {\n                order: 3;\n            }\n        }\n\n        #system-message {\n            font-size: 1.1em;\n            color: #00e2ff;\n            transition: opacity 0.5s ease-in-out, text-shadow 0.3s ease;\n            font-weight: 400;\n            text-align: center;\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 10px;\n            text-shadow: 0 0 6px rgba(124, 58, 237, 0.6);\n            animation: pulse-glow 2s infinite alternate;\n        }\n\n        @keyframes pulse-glow {\n            from { text-shadow: 0 0 6px rgba(124, 58, 237, 0.6); opacity: 0.8; }\n            to { text-shadow: 0 0 12px rgba(124, 58, 237, 0.9), 0 0 20px rgba(124, 58, 237, 0.4); opacity: 1; }\n        }\n\n        .status-found {\n            animation: none !important;\n            text-shadow: 0 0 8px rgba(124, 58, 237, 0.8);\n            color: #00ff00;\n        }\n\n        .data-feed .feed-item {\n            background-color: rgba(0, 50, 80, 0.55); /* Adjusted for glassmorphism */\n            border-left: 3px solid #00bcd4; /* Slightly thicker, different cyan */\n            padding: 7px 10px; /* More padding */\n            margin-bottom: 6px; /* Slightly more margin */\n            border-radius: 0 4px 4px 0; /* More rounded */\n            font-size: 0.85em; /* Slightly larger */\n            color: #c0e8ff; /* Softer blue */\n            text-align: left;\n            transition: background-color 0.3s ease, border-left-color 0.3s ease, transform 0.2s ease;\n        }\n        \n        /* Phase 3.3: Data Feeds - Improve scrolling and readability */\n        .device-item-wrapper,\n        #wifi-feed {\n            max-height: 300px;\n            -webkit-overflow-scrolling: touch;\n        }\n        \n        @media (max-width: 768px) {\n            .feed-item {\n                font-size: 0.875rem;\n                padding: 0.5rem;\n            }\n        }\n        \n        .data-feed .feed-item:hover {\n            background-color: rgba(0, 70, 100, 0.75);\n            border-left-color: #00f2ff; /* Brighter on hover */\n            transform: translateX(3px);\n        }\n\n        .feed-item-blink {\n            animation: blink-animation 1.5s infinite ease-in-out; /* Smoother blink */\n        }\n\n        @keyframes blink-animation {\n            0%, 100% { border-left-color: #ffdd57; color: #ffdd57; box-shadow: 0 0 5px rgba(255,221,87,0.3); }\n            50% { border-left-color: #00bcd4; color: #c0e8ff; box-shadow: none; }\n        }\n\n        /* Tab Styles */\n        .tab-nav {\n            display: flex;\n            flex-direction: column; \n            margin-bottom: 10px;\n            flex-shrink: 0; /* Prevent tab nav from shrinking if content is too large */\n        }\n        \n        /* Phase 3.3: Navigation Tabs - Mobile scrollable */\n        @media (max-width: 600px) {\n            .tabs {\n                overflow-x: auto;\n                -webkit-overflow-scrolling: touch;\n            }\n            \n            .tab {\n                flex-shrink: 0;\n                min-width: 100px;\n            }\n        }\n\n        .tab-button {\n            background-color: rgba(0, 50, 80, 0.55);\n            border: none; \n            outline: none;\n            border-left: 3px solid #00bcd4;\n            padding: 8px 12px; /* Slightly more padding for clickable area */\n            margin-bottom: 6px; \n            border-radius: 0 4px 4px 0;\n            font-size: 0.9em; /* Slightly larger than feed items for clarity */\n            color: #c0e8ff;\n            text-align: left;\n            cursor: pointer;\n            transition: background-color 0.3s ease, border-left-color 0.3s ease, transform 0.2s ease, color 0.3s ease;\n            width: 100%; \n            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; \n            font-weight: 400;\n        }\n\n        .tab-button:hover {\n            background-color: rgba(0, 70, 100, 0.75);\n            border-left-color: #00f2ff;\n            transform: translateX(3px);\n            color: #e0f8ff;\n        }\n\n        .tab-button.active-tab {\n            background-color: rgba(0, 80, 120, 0.85); \n            border-left-color: #00f2ff; \n            color: #ffffff; \n            font-weight: 500; /* Bolder active tab */\n        }\n\n        .tab-content {\n            display: none;\n            padding: 10px;\n            background-color: rgba(0, 50, 80, 0.55);\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n\n        .tab-content.active {\n            display: block;\n        }\n\n        .tab-pane {\n            display: none; \n            padding: 5px 2px; /* Minimal padding for content area */\n            animation: fadeIn 0.4s ease-in-out;\n            /* The parent .grid-item-content already handles overflow-y: auto */\n        }\n        \n        .tab-pane p {\n            margin-bottom: 8px;\n            line-height: 1.5;\n        }\n        .tab-pane p strong {\n            color: #a0e0ff; /* Match h2 color */\n            font-weight: 500;\n        }\n        .tab-pane code {\n            background-color: rgba(0, 30, 50, 0.7);\n            padding: 2px 5px;\n            border-radius: 3px;\n            font-family: 'Courier New', Courier, monospace;\n            font-size: 0.9em;\n            color: #86cfff;\n            display: block; /* Make code blocks take full width */\n            margin-top: 3px;\n            white-space: pre-wrap; /* Allow wrapping for long commands */\n            border: 1px solid rgba(0, 190, 215, 0.2);\n        }\n\n\n        .tab-pane.active-pane {\n            display: block; \n        }\n\n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(8px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        /* End Tab Styles */\n\n        .footer {\n            background-color: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-top: 1px solid rgba(0, 190, 215, 0.35);\n            box-shadow: 0 -2px 10px rgba(0, 150, 180, 0.1);\n            padding: 5px 20px;\n            text-align: center;\n            color: rgba(124, 58, 237, 0.8);\n            font-size: 0.8em;\n            position: fixed;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            z-index: 1000;\n            height: 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-family: 'Courier New', monospace;\n        }\n        \n        /* Phase 3.2: Footer Mobile Positioning */\n        @media (max-width: 768px) {\n            .footer {\n                position: relative;\n                bottom: auto;\n            }\n        }\n\n        .footer-content {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            max-width: 1200px;\n            margin: 0 auto;\n            gap: 15px;\n        }\n\n        .footer-text {\n            color: rgba(124, 58, 237, 0.8);\n            font-size: 0.9em;\n            letter-spacing: 0.5px;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n\n        .footer-separator {\n            color: rgba(0, 190, 215, 0.5);\n            font-size: 0.8em;\n        }\n\n        .footer-symbol {\n            color: rgba(124, 58, 237, 0.9);\n            font-size: 0.9em;\n            margin: 0 2px;\n        }\n        \n        /* ENHANCED MOBILE OPTIMIZATIONS */\n        \n        /* iOS Specific Fixes */\n        @supports (-webkit-touch-callout: none) {\n            /* iOS Safari specific styles */\n            body {\n                -webkit-touch-callout: none;\n                -webkit-user-select: none;\n                -webkit-tap-highlight-color: transparent;\n            }\n            \n            /* Fix for iOS Safari bounce scrolling */\n            .main-content-area {\n                -webkit-overflow-scrolling: touch;\n            }\n            \n            /* Prevent iOS zoom on input focus */\n            input, select, textarea, button {\n                font-size: 16px !important;\n            }\n            \n            /* Safe area insets for iPhone X and newer */\n            .top-banner {\n                padding-top: max(15px, env(safe-area-inset-top));\n            }\n            \n            .footer {\n                padding-bottom: max(5px, env(safe-area-inset-bottom));\n            }\n            \n            .page-container {\n                padding-left: env(safe-area-inset-left);\n                padding-right: env(safe-area-inset-right);\n            }\n        }\n        \n        /* iPhone-specific media queries */\n        /* iPhone SE, 6/7/8 */\n        @media only screen \n        and (min-device-width: 375px) \n        and (max-device-width: 667px) \n        and (-webkit-min-device-pixel-ratio: 2) {\n            .top-banner h1 {\n                font-size: 1.3rem;\n                letter-spacing: 3px;\n            }\n            \n            .control-button {\n                padding: 12px 16px;\n                font-size: 0.875rem;\n            }\n            \n            .box-header h2 {\n                font-size: 0.85rem;\n            }\n        }\n        \n        /* iPhone 6/7/8 Plus */\n        @media only screen \n        and (min-device-width: 414px) \n        and (max-device-width: 736px) \n        and (-webkit-min-device-pixel-ratio: 3) {\n            .top-banner h1 {\n                font-size: 1.4rem;\n            }\n        }\n        \n        /* iPhone X, XS, 11 Pro */\n        @media only screen \n        and (min-device-width: 375px) \n        and (max-device-width: 812px) \n        and (-webkit-min-device-pixel-ratio: 3) {\n            .page-container {\n                top: calc(100px + env(safe-area-inset-top)) !important;\n                bottom: calc(60px + env(safe-area-inset-bottom)) !important;\n            }\n        }\n        \n        /* iPhone 12/13/14 Mini */\n        @media only screen \n        and (min-device-width: 360px) \n        and (max-device-width: 780px) \n        and (-webkit-min-device-pixel-ratio: 3) {\n            .control-button {\n                padding: 11px 14px;\n                font-size: 0.85rem;\n            }\n        }\n        \n        /* iPhone 12/13/14 Pro Max */\n        @media only screen \n        and (min-device-width: 428px) \n        and (max-device-width: 926px) \n        and (-webkit-min-device-pixel-ratio: 3) {\n            .top-banner h1 {\n                font-size: 1.5rem;\n            }\n        }\n        \n        /* Mobile Layout Adjustments */\n        @media (max-width: 768px) {\n            /* Prevent horizontal scroll */\n            html, body {\n                overflow-x: hidden;\n                width: 100%;\n            }\n            \n            /* Page container adjustment */\n            .page-container {\n                position: static !important;\n                top: auto !important;\n                bottom: auto !important;\n                min-height: 100vh;\n                padding-bottom: 60px; /* Space for footer */\n                width: 100%;\n                max-width: 100vw;\n            }\n            \n            /* Main content area improvements */\n            .main-content-area {\n                flex: none !important;\n                overflow-y: visible !important;\n                position: static !important;\n                padding: 4px;\n            }\n            \n            /* Grid items mobile layout */\n            .side-stack {\n                display: block;\n                margin-bottom: 8px;\n            }\n            \n            .side-stack .grid-item {\n                margin-bottom: 8px;\n                min-height: 150px;\n            }\n            \n            /* Adjust header sizes for mobile */\n            .box-header h2 {\n                font-size: 0.9em;\n                letter-spacing: 1px;\n            }\n            \n            .box-header h2::before,\n            .box-header h2::after {\n                display: none; /* Hide decorative dots on mobile */\n            }\n            \n            /* Button adjustments */\n            .control-button {\n                padding: 12px 16px;\n                font-size: 0.9em;\n                min-height: 44px; /* iOS touch target size */\n                -webkit-appearance: none;\n                border-radius: 8px;\n                touch-action: manipulation; /* Prevent double-tap zoom */\n                position: relative;\n                overflow: hidden;\n            }\n            \n            /* iOS button active state */\n            .control-button:active {\n                transform: scale(0.98);\n                opacity: 0.9;\n            }\n            \n            .button-group {\n                grid-template-columns: 1fr !important;\n                gap: 8px !important;\n            }\n            \n            /* Service status indicators */\n            .service-status {\n                margin-top: 10px !important;\n                padding-top: 10px !important;\n            }\n            \n            /* GPS info text size */\n            #gps-info {\n                font-size: 0.85em;\n            }\n            \n            /* Feed items */\n            #devices-list,\n            #wifi-feed {\n                max-height: 150px !important;\n                -webkit-overflow-scrolling: touch;\n                overflow-y: auto;\n                overscroll-behavior: contain;\n            }\n            \n            /* Better scrolling for grid items on iOS */\n            .grid-item-content {\n                -webkit-overflow-scrolling: touch;\n                overscroll-behavior: contain;\n            }\n            \n            /* Footer adjustments */\n            .footer-text {\n                font-size: 0.75em;\n                flex-wrap: wrap;\n                justify-content: center;\n            }\n            \n            .footer-separator {\n                display: none;\n            }\n            \n            /* Mobile adjustments */\n            \n            .resizable-frame .resize-handle {\n                display: none !important;\n            }\n            \n            /* Hide dragging on mobile */\n            .box-header {\n                cursor: default !important;\n            }\n            \n            /* Tab navigation improvements */\n            .tab-nav {\n                flex-direction: row;\n                overflow-x: auto;\n                -webkit-overflow-scrolling: touch;\n                gap: 5px;\n            }\n            \n            .tab-button {\n                flex: 0 0 auto;\n                min-width: 80px;\n                padding: 6px 10px;\n                margin-bottom: 0;\n            }\n            \n            /* System message */\n            #system-message {\n                font-size: 0.9em;\n                padding: 8px;\n            }\n            \n            /* Notification positioning */\n            .notification {\n                top: 10px;\n                left: 10px;\n                right: 10px;\n                transform: none;\n                font-size: 0.9em;\n                padding: 10px 20px;\n            }\n            \n            /* Status message positioning */\n            .status-message {\n                top: 10px;\n                right: 10px;\n                left: 10px;\n                font-size: 0.85em;\n                padding: 10px 15px;\n            }\n        }\n        \n        /* Small mobile devices */\n        @media (max-width: 480px) {\n            .top-banner h1 {\n                font-size: 1rem;\n                letter-spacing: 2px;\n            }\n            \n            .box-header {\n                padding: 5px 10px;\n            }\n            \n            .control-button {\n                font-size: 0.85em;\n                padding: 8px 12px;\n            }\n            \n            #gps-info {\n                font-size: 0.8em;\n            }\n        }\n        \n        /* iPhone landscape mode */\n        @media only screen \n        and (max-device-height: 428px) \n        and (orientation: landscape) {\n            .top-banner {\n                padding: 5px 15px;\n                padding-left: max(15px, env(safe-area-inset-left));\n                padding-right: max(15px, env(safe-area-inset-right));\n            }\n            \n            .top-banner h1 {\n                font-size: 1.1rem;\n            }\n            \n            .main-content-area {\n                grid-template-columns: repeat(2, 1fr);\n                gap: 4px;\n                padding: 4px;\n            }\n            \n            .grid-item {\n                min-height: 120px;\n            }\n            \n            \n            .minimized-tabs {\n                display: none; /* Hide in landscape to save space */\n            }\n        }\n        \n        /* Touch-friendly hover states */\n        @media (hover: none) and (pointer: coarse) {\n            .control-button:active {\n                background: linear-gradient(90deg, #222 0%, #00d2ff 100%);\n                transform: translateY(-1px);\n            }\n            \n            .tab-button:active {\n                background-color: rgba(0, 70, 100, 0.75);\n                border-left-color: #00f2ff;\n            }\n            \n            .feed-item:active {\n                background-color: rgba(0, 70, 100, 0.75);\n                border-left-color: #00f2ff;\n            }\n        }\n\n        .control-button {\n            background: linear-gradient(90deg, #00d2ff 0%, #222 100%);\n            color: #fff;\n            border: none;\n            border-radius: 8px;\n            padding: 12px 20px;\n            font-size: 1em;\n            font-family: inherit;\n            font-weight: 500;\n            cursor: pointer;\n            box-shadow: 0 4px 16px rgba(0, 210, 255, 0.15);\n            transition: all 0.3s ease;\n            text-align: center;\n            text-decoration: none;\n        }\n        \n        /* Phase 3.2: Touch Target Enhancement for Mobile */\n        @media (max-width: 768px) {\n            .control-button, .control-button-small {\n                min-width: 48px;\n                min-height: 48px;\n                padding: 12px;\n            }\n        }\n        \n        /* Phase 3.3: Control Buttons - Stack vertically on mobile */\n        @media (max-width: 480px) {\n            .control-buttons {\n                flex-direction: column;\n                gap: 8px;\n            }\n            \n            .control-buttons button {\n                width: 100%;\n            }\n        }\n\n        .control-button:hover {\n            background: linear-gradient(90deg, #222 0%, #00d2ff 100%);\n            transform: translateY(-2px);\n            box-shadow: 0 8px 32px rgba(0, 210, 255, 0.25);\n        }\n\n        .notification {\n            position: fixed;\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            background: var(--bg-panel);\n            border: 1px solid rgba(124, 58, 237, 0.4);\n            color: var(--accent-primary);\n            padding: 15px 30px;\n            border-radius: 8px;\n            font-size: 1.1em;\n            z-index: 1000;\n            opacity: 0;\n            transition: opacity 0.3s ease-in-out;\n            box-shadow: 0 0 20px rgba(124, 58, 237, 0.2);\n            backdrop-filter: blur(8px);\n        }\n\n        .notification.show {\n            opacity: 1;\n        }\n\n        .notification.success {\n            border-color: rgba(68, 255, 68, 0.4);\n            color: #44ff44;\n            box-shadow: 0 0 20px rgba(68, 255, 68, 0.2);\n        }\n\n        .notification.error {\n            border-color: rgba(255, 68, 68, 0.4);\n            color: #ff4444;\n            box-shadow: 0 0 20px rgba(255, 68, 68, 0.2);\n        }\n\n        /* Initial layout positions */\n        #instructions {\n            position: absolute;\n            top: 8px;\n            left: 8px;\n            width: calc(4 * (100vw / 12) - 16px);\n            height: auto; /* Let it size to content initially */\n            min-height: 180px; /* Minimum height to show header and tabs */\n        }\n\n        #wifi-data-feed {\n            position: absolute;\n            top: 8px;\n            left: calc(4 * (100vw / 12) + 8px);\n            width: calc(4 * (100vw / 12) - 16px);\n            height: calc(100vh - 140px - 8px);\n        }\n\n        #start-menu {\n            position: absolute;\n            top: auto; /* Will be set dynamically */\n            left: 8px;\n            width: calc(4 * (100vw / 12) - 16px);\n            height: auto; /* Will be set dynamically */\n            min-height: 300px; /* Increased to ensure all content fits */\n            overflow: visible; /* Allow glow effects to show */\n        }\n        \n        /* Ensure start menu content doesn't clip glow effects */\n        #start-menu .grid-item-content {\n            overflow: visible;\n            padding-bottom: 25px; /* Extra padding for glow */\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n        \n        /* Status dot styles with glow effect */\n        .status-dot {\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background: #ff4444;\n            transition: all 0.3s ease;\n        }\n        \n        .status-dot.active {\n            background: #44ff44;\n            box-shadow: 0 0 15px #44ff44, 0 0 25px #44ff44;\n        }\n        \n        /* Ensure status indicators have room for glow */\n        .status-indicator {\n            position: relative;\n            overflow: visible;\n            margin: 5px 0; /* Add margin for glow space */\n        }\n\n        #system-status {\n            position: absolute;\n            top: auto; /* Will be set dynamically */\n            left: 8px;\n            width: calc(4 * (100vw / 12) - 16px);\n            height: auto; /* Will be set dynamically */\n            min-height: 280px; /* Balanced to accommodate GPS fields */\n            overflow: visible; /* Allow resize handles to show properly */\n        }\n        \n        /* Ensure system status content has proper overflow */\n        #system-status .grid-item-content {\n            overflow-y: auto;\n            max-height: calc(100% - 40px); /* Account for header */\n        }\n        \n        /* Phase 3.2: Responsive layout positions */\n        @media (max-width: 768px) {\n            #instructions, #wifi-data-feed, #start-menu, #system-status {\n                position: relative;\n                top: auto;\n                left: auto;\n                right: auto;\n                width: 100%;\n                height: auto;\n                min-height: 200px;\n                margin-bottom: 8px;\n            }\n        }\n\n        /* Update the HTML structure for all boxes */\n        #instructions h2, #wifi-data-feed h2, #start-menu h2, #system-status h2 {\n            display: inline-block;\n            width: 100%;\n            text-align: center;\n        }\n\n        .status-message {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 15px 25px;\n            border-radius: 4px;\n            color: #fff;\n            font-size: 14px;\n            z-index: 1000;\n            opacity: 1;\n            transition: opacity 0.3s ease-in-out;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n        }\n\n        .status-message.hidden {\n            opacity: 0;\n            pointer-events: none;\n        }\n\n        .status-success {\n            background-color: rgba(0, 200, 100, 0.9);\n            border: 1px solid rgba(0, 200, 100, 0.3);\n        }\n\n        .status-error {\n            background-color: rgba(255, 68, 68, 0.9);\n            border: 1px solid rgba(255, 68, 68, 0.3);\n        }\n\n        .status-warning {\n            background-color: rgba(255, 170, 0, 0.9);\n            border: 1px solid rgba(255, 170, 0, 0.3);\n        }\n\n        .feed-item {\n            background-color: var(--bg-panel);\n            border: 1px solid rgba(0, 190, 215, 0.35);\n            padding: 10px;\n            margin-bottom: 8px;\n            border-radius: 4px;\n            box-shadow: 0 2px 8px rgba(0, 150, 180, 0.1);\n        }\n\n        .device-info {\n            color: var(--accent-primary);\n            font-family: 'Courier New', monospace;\n            font-size: 0.9em;\n            line-height: 1.4;\n        }\n\n        .device-info strong {\n            color: #fff;\n            font-weight: 500;\n        }\n\n        .error-message {\n            color: #ff4444;\n            background-color: rgba(255, 68, 68, 0.1);\n            border: 1px solid rgba(255, 68, 68, 0.3);\n            padding: 10px;\n            margin: 10px 0;\n            border-radius: 4px;\n            font-family: 'Courier New', monospace;\n        }\n\n        /* Resizable iframe styles */\n        .resizable-frame {\n            transition: height 0.3s ease, width 0.3s ease, bottom 0.3s ease, left 0.3s ease, right 0.3s ease;\n        }\n\n        .resizable-frame .resize-handle {\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 10px; /* Increased from 5px for easier grabbing */\n            background: linear-gradient(90deg, transparent 20%, rgba(124, 58, 237, 0.4) 50%, transparent 80%);\n            cursor: ns-resize;\n            z-index: 1001;\n            opacity: 0;\n            transition: opacity 0.3s ease;\n        }\n\n        .resizable-frame:hover .resize-handle {\n            opacity: 1;\n        }\n\n        .resizable-frame .resize-handle:hover {\n            background: linear-gradient(90deg, transparent 10%, rgba(124, 58, 237, 0.6) 50%, transparent 90%);\n        }\n\n        .resizable-frame .resize-handle:active {\n            background: linear-gradient(90deg, transparent 10%, rgba(124, 58, 237, 0.8) 50%, transparent 90%);\n        }\n        \n        \n        /* Spinner animation for offline screen */\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n\n\n        /* Minimized box style */\n        .grid-item.minimized {\n            display: none !important;\n        }\n\n        /* Minimized tabs container */\n        #minimized-tabs {\n            position: fixed;\n            top: 60px;\n            left: 0;\n            right: 0;\n            z-index: 90;\n            height: 40px;\n            background: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border-bottom: 1px solid rgba(0, 210, 255, 0.35);\n            padding: 0.25rem 0.5rem;\n            display: flex;\n            gap: 0.5rem;\n            overflow-x: auto;\n        }\n\n        .minimized-tab {\n            background: rgba(0, 210, 255, 0.2);\n            border: 1px solid rgba(0, 210, 255, 0.5);\n            border-radius: 4px;\n            padding: 0.25rem 0.75rem;\n            color: var(--accent-primary);\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            font-size: 0.875rem;\n        }\n\n        .minimized-tab:hover {\n            background: rgba(0, 210, 255, 0.3);\n            border-color: #00d2ff;\n        }\n\n        .restore-button {\n            background: none;\n            border: none;\n            color: #10b981;\n            cursor: pointer;\n            font-size: 1rem;\n            padding: 0;\n            margin-left: 0.5rem;\n        }\n\n        .restore-button:hover {\n            color: #44ff44;\n        }\n        \n        /* Theme Toggle Button */\n        .theme-toggle {\n            position: fixed;\n            bottom: 2rem;\n            right: 2rem;\n            z-index: 1000;\n            background: var(--bg-secondary);\n            border: 1px solid var(--border-primary);\n            border-radius: 50%;\n            width: 48px;\n            height: 48px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            box-shadow: var(--shadow-md);\n        }\n        \n        .theme-toggle:hover {\n            transform: scale(1.1);\n            border-color: var(--accent-primary);\n            box-shadow: var(--glow-primary);\n        }\n        \n        .theme-toggle svg {\n            width: 24px;\n            height: 24px;\n            fill: var(--accent-primary);\n            transition: all 0.3s ease;\n        }\n        \n        /* Mobile adjustments for theme toggle */\n        @media (max-width: 768px) {\n            .theme-toggle {\n                bottom: 1rem;\n                right: 1rem;\n                width: 44px;\n                height: 44px;\n            }\n        }\n\n        /* Map Control Buttons */\n        .map-control-btn {\n            background: var(--bg-secondary);\n            border: 1px solid var(--border-primary);\n            border-radius: 4px;\n            padding: 0.5rem;\n            color: var(--accent-primary);\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: all 0.2s ease;\n            font-size: 0.875rem;\n            min-width: 44px;\n            min-height: 44px;\n        }\n\n        .map-control-btn:hover {\n            background: var(--bg-hover);\n            border-color: var(--accent-primary);\n            box-shadow: var(--glow-primary);\n        }\n\n        .map-control-btn:active {\n            transform: scale(0.95);\n        }\n\n        .map-control-btn.active {\n            background: rgba(0, 210, 255, 0.2);\n            border-color: var(--accent-primary);\n            color: var(--accent-primary);\n            box-shadow: var(--glow-primary);\n        }\n\n        /* Center on Me Button */\n        #center-on-me {\n            gap: 0.5rem;\n            padding: 0.5rem 1rem;\n            width: auto;\n        }\n\n        #center-on-me.tracking {\n            background: rgba(0, 255, 136, 0.2);\n            border-color: #00ff88;\n            color: #00ff88;\n        }\n\n        #center-on-me svg {\n            width: 20px;\n            height: 20px;\n        }\n\n        /* 2D/3D Toggle Button */\n        #toggle-2d-3d {\n            gap: 0.5rem;\n            padding: 0.5rem 1rem;\n            width: auto;\n        }\n\n        #toggle-2d-3d svg {\n            width: 20px;\n            height: 20px;\n            transition: transform 0.3s ease;\n        }\n\n        #toggle-2d-3d.mode-2d svg {\n            transform: rotateY(180deg);\n        }\n\n        /* Map Controls Container */\n        .map-controls {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n            z-index: 10;\n        }\n\n        /* Zoom Controls */\n        #zoom-in, #zoom-out {\n            width: 44px;\n            height: 44px;\n            padding: 0.5rem;\n        }\n\n        /* Signal Dot Styles */\n        .signal-dot {\n            position: absolute;\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background: rgba(255, 0, 0, 0.8);\n            border: 2px solid rgba(255, 255, 255, 0.9);\n            cursor: pointer;\n            transition: all 0.2s ease;\n            z-index: 5;\n        }\n\n        .signal-dot:hover {\n            transform: scale(1.5);\n            box-shadow: 0 0 20px rgba(255, 0, 0, 0.8);\n            z-index: 6;\n        }\n\n        .signal-dot.strong-signal {\n            background: rgba(255, 255, 0, 0.9);\n            box-shadow: 0 0 15px rgba(255, 255, 0, 0.6);\n        }\n\n        .signal-dot.weak-signal {\n            background: rgba(255, 100, 100, 0.6);\n            box-shadow: 0 0 10px rgba(255, 100, 100, 0.4);\n        }\n\n        /* Tooltip Styles */\n        .signal-tooltip {\n            position: absolute;\n            background: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border: 1px solid var(--border-accent);\n            border-radius: 4px;\n            padding: 0.5rem;\n            font-size: 0.75rem;\n            color: var(--text-primary);\n            white-space: nowrap;\n            pointer-events: none;\n            opacity: 0;\n            transition: opacity 0.2s ease;\n            z-index: 100;\n        }\n\n        .signal-tooltip.visible {\n            opacity: 1;\n        }\n\n        .signal-tooltip::before {\n            content: '';\n            position: absolute;\n            bottom: -5px;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 0;\n            height: 0;\n            border-left: 5px solid transparent;\n            border-right: 5px solid transparent;\n            border-top: 5px solid var(--border-accent);\n        }\n\n        /* GPS Status Indicator */\n        .gps-status-indicator {\n            position: absolute;\n            bottom: 10px;\n            right: 10px;\n            background: var(--bg-panel);\n            backdrop-filter: blur(12px);\n            border: 1px solid var(--border-primary);\n            border-radius: 4px;\n            padding: 0.5rem;\n            font-size: 0.75rem;\n            color: var(--text-secondary);\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n\n        .gps-status-indicator .status-dot {\n            width: 10px;\n            height: 10px;\n        }\n\n        /* Position Display Enhancement */\n        #globe-position {\n            display: flex;\n            flex-direction: column;\n            gap: 0.25rem;\n        }\n\n        #globe-position .coord {\n            font-family: 'Courier New', monospace;\n            color: var(--accent-primary);\n        }\n\n        /* Mobile-specific adjustments for map controls */\n        @media (max-width: 768px) {\n            .map-controls {\n                top: 5px;\n                right: 5px;\n                gap: 5px;\n            }\n            \n            #center-on-me span,\n            #toggle-2d-3d span {\n                display: none; /* Hide text on mobile to save space */\n            }\n            \n            #center-on-me,\n            #toggle-2d-3d {\n                padding: 0.5rem;\n                width: 44px;\n                height: 44px;\n            }\n        }\n    </style>\n    <!-- Cesium CSS and JS -->\n    <link href=\"https://cesium.com/downloads/cesiumjs/releases/1.119/Build/Cesium/Widgets/widgets.css\" rel=\"stylesheet\">\n    <script src=\"https://cesium.com/downloads/cesiumjs/releases/1.119/Build/Cesium/Cesium.js\"></script>\n    <!-- Cesium Offline Configuration -->\n    <script src=\"/js/cesium-offline-config.js\"></script>\n</head>\n<body data-theme=\"dark\">\n    <div id=\"notification\" class=\"notification\"></div>\n    <div id=\"status-message\" class=\"status-message hidden\"></div>\n    <header class=\"top-banner\">\n        <h1>Kismet Operations Center</h1>\n    </header>\n    <div id=\"minimized-tabs\" class=\"minimized-tabs\"></div>\n\n\n    <div class=\"page-container\">\n        <main class=\"main-content-area\">\n        <div class=\"side-stack left-stack\">\n            <div id=\"instructions\" class=\"grid-item\">\n                <div class=\"box-header\">\n                <h2>Setup Instructions</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\">\n                    <div class=\"tab-nav\">\n                        <a href=\"wigle.html\" class=\"tab-button active-tab\" target=\"_blank\">Wigle</a>\n                        <a href=\"atak.html\" class=\"tab-button\" target=\"_blank\">ATAK</a>\n                        <a href=\"kismet2.html\" class=\"tab-button\" target=\"_blank\">Kismet</a>\n                    </div>\n                </div>\n            </div>\n            <div id=\"start-menu\" class=\"grid-item\">\n                <div class=\"box-header\">\n                <h2>Start Menu</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\">\n                    <div class=\"button-group\" style=\"display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin-bottom: 15px;\">\n                        <button class=\"control-button\" data-action=\"startKismet\">Start Kismet</button>\n                        <button class=\"control-button\" data-action=\"stopKismet\">Stop Kismet</button>\n                        <a href=\"#\" onclick=\"window.open('http://' + window.location.hostname + ':2501', '_blank'); return false;\" class=\"control-button\">Open Kismet Web UI</a>\n                        <a href=\"#\" onclick=\"window.open('http://' + window.location.hostname + ':8000', '_blank'); return false;\" class=\"control-button\">Open WigletoTak</a>\n                        <a href=\"#\" onclick=\"window.open('http://' + window.location.hostname + ':8073', '_blank'); return false;\" class=\"control-button\">Open WebRX UI</a>\n                        <a href=\"#\" onclick=\"window.open('http://' + window.location.hostname + ':8092', '_blank'); return false;\" class=\"control-button\">Open HackRF Sweep</a>\n                    </div>\n                    <div class=\"service-status\" style=\"margin-top: 15px; padding: 15px 0; border-top: 1px solid rgba(0, 200, 220, 0.3); overflow: visible;\">\n                        <div class=\"status-indicator\" style=\"display: flex; align-items: center; gap: 10px; padding: 10px; background: rgba(0, 0, 0, 0.2); border-radius: 6px; margin-bottom: 10px;\">\n                            <div class=\"status-dot\" id=\"kismet-status\"></div>\n                            <span style=\"color: #d0d8f0; font-size: 0.9em;\">Kismet</span>\n                        </div>\n                        <div class=\"status-indicator\" style=\"display: flex; align-items: center; gap: 10px; padding: 10px; background: rgba(0, 0, 0, 0.2); border-radius: 6px; margin-bottom: 10px;\">\n                            <div class=\"status-dot\" id=\"wigle-status\"></div>\n                            <span style=\"color: #d0d8f0; font-size: 0.9em;\">WigletoTak</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div id=\"system-status\" class=\"grid-item\">\n                <div class=\"box-header\">\n                <h2>System Status</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\">\n                    <div id=\"system-message\" style=\"margin-bottom: 1rem;\">Loading system status...</div>\n                    <div id=\"gps-info\" style=\"color: #d0d8f0; line-height: 1.6;\">\n                        <p><strong style=\"color: #00d2ff;\">IP Address:</strong> <span id=\"ip-address\">Loading...</span></p>\n                        <p><strong style=\"color: #00d2ff;\">GPS Status:</strong> <span id=\"gps-status\">Loading...</span></p>\n                        <p><strong style=\"color: #00d2ff;\">Latitude:</strong> <span id=\"gps-lat\">--</span></p>\n                        <p><strong style=\"color: #00d2ff;\">Longitude:</strong> <span id=\"gps-lon\">--</span></p>\n                        <p><strong style=\"color: #00d2ff;\">Altitude:</strong> <span id=\"gps-alt\">--</span></p>\n                        <p><strong style=\"color: #00d2ff;\">MGRS Grid:</strong> <span id=\"gps-mgrs\">--</span></p>\n                        <p><strong style=\"color: #00d2ff;\">GPS Time:</strong> <span id=\"gps-time\">--</span></p>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Middle column: Main content area -->\n        <div class=\"middle-long-box\">\n            <div id=\"wifi-data-feed\" class=\"grid-item\">\n                <div class=\"box-header\">\n                    <h2>Kismet Data Feed</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\" style=\"padding: 10px; overflow-y: auto;\">\n                    <div style=\"display: flex; justify-content: space-between; margin-bottom: 15px; padding: 10px; background: rgba(0, 0, 0, 0.2); border-radius: 4px;\">\n                        <div style=\"text-align: center;\">\n                            <div style=\"color: #00d2ff; font-size: 0.9em;\">Devices</div>\n                            <div id=\"devices-count\" style=\"color: #fff; font-size: 1.2em; font-weight: bold;\">0</div>\n                        </div>\n                        <div style=\"text-align: center;\">\n                            <div style=\"color: #00d2ff; font-size: 0.9em;\">Networks</div>\n                            <div id=\"networks-count\" style=\"color: #fff; font-size: 1.2em; font-weight: bold;\">0</div>\n                        </div>\n                        <div style=\"text-align: center;\">\n                            <div style=\"color: #00d2ff; font-size: 0.9em;\">Last Update</div>\n                            <div id=\"last-update\" style=\"color: #fff; font-size: 0.8em;\">--</div>\n                        </div>\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <h3 style=\"color: #00d2ff; margin: 0 0 10px 0; font-size: 1em;\">Recent Devices</h3>\n                        <div id=\"devices-list\" style=\"max-height: 200px; overflow-y: auto;\">\n                            <div class=\"feed-item\">No devices detected</div>\n                        </div>\n                    </div>\n                    <div>\n                        <h3 style=\"color: #00d2ff; margin: 0 0 10px 0; font-size: 1em;\">Activity Feed</h3>\n                        <div id=\"wifi-feed\" style=\"max-height: 200px; overflow-y: auto;\">\n                            <div class=\"feed-item\">Waiting for activity...</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Right column: Globe and additional tools -->\n        <div class=\"right-long-box\">\n            <div id=\"cesium-globe\" class=\"grid-item\">\n                <div class=\"box-header\">\n                    <h2>Location Globe</h2>\n                    <div class=\"box-controls\">\n                        <button class=\"control-button-small\" data-action=\"minimize\">▼</button>\n                    </div>\n                </div>\n                <div class=\"grid-item-content\" style=\"position: relative; padding: 10px; overflow: hidden;\">\n                    <div id=\"cesium-container\"></div>\n                    <div class=\"map-controls\">\n                        <button id=\"center-on-me\" class=\"map-control-btn\" title=\"Center on GPS location\">\n                            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\n                            </svg>\n                            <span>Center on Me</span>\n                        </button>\n                        <button id=\"toggle-2d-3d\" class=\"map-control-btn\" title=\"Toggle 2D/3D view\">\n                            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9\"></path>\n                            </svg>\n                            <span>3D View</span>\n                        </button>\n                        <button id=\"zoom-in\" class=\"map-control-btn\" title=\"Zoom in\">\n                            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path>\n                            </svg>\n                        </button>\n                        <button id=\"zoom-out\" class=\"map-control-btn\" title=\"Zoom out\">\n                            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 12H4\"></path>\n                            </svg>\n                        </button>\n                    </div>\n                    <div id=\"position-info\" style=\"position: absolute; bottom: 20px; left: 20px; background: rgba(0, 0, 0, 0.7); padding: 5px 10px; border-radius: 4px; color: #00d2ff; font-size: 0.8em; z-index: 100;\">\n                        <span id=\"globe-position\">Waiting for GPS...</span>\n                    </div>\n                </div>\n                \n                <!-- Maps Selection Dropdown -->\n                <div id=\"maps-dropdown\" style=\"margin-top: 10px;\">\n                    <div id=\"maps-header\" class=\"dropdown-header\" style=\"background: var(--bg-content); border: 1px solid var(--border-accent); border-radius: 4px; padding: 10px; cursor: pointer; display: flex; justify-content: space-between; align-items: center;\">\n                        <span style=\"color: var(--text-accent); font-weight: 500;\">Maps</span>\n                        <span id=\"maps-arrow\" style=\"color: var(--text-accent); transition: transform 0.3s ease;\">▼</span>\n                    </div>\n                    <div id=\"maps-content\" class=\"dropdown-content\" style=\"max-height: 0; overflow: hidden; transition: max-height 0.3s ease; background: var(--bg-secondary); border: 1px solid var(--border-accent); border-top: none; border-radius: 0 0 4px 4px;\">\n                        <div style=\"padding: 10px;\">\n                            <div class=\"map-option\" data-map=\"offline\" style=\"padding: 8px; margin-bottom: 5px; background: var(--bg-content); border-radius: 3px; cursor: pointer; color: var(--text-primary); border-left: 3px solid var(--accent-primary);\">\n                                <div style=\"font-weight: 500;\">Local Offline Tiles</div>\n                                <div style=\"font-size: 0.8em; color: var(--text-muted);\">Natural Earth Data (Offline)</div>\n                            </div>\n                            <div class=\"map-option\" data-map=\"esri\" style=\"padding: 8px; margin-bottom: 5px; background: var(--bg-content); border-radius: 3px; cursor: pointer; color: var(--text-primary);\">\n                                <div style=\"font-weight: 500;\">Esri World Imagery</div>\n                                <div style=\"font-size: 0.8em; color: var(--text-muted);\">High-resolution satellite imagery</div>\n                            </div>\n                            <div class=\"map-option\" data-map=\"cartodb\" style=\"padding: 8px; margin-bottom: 5px; background: var(--bg-content); border-radius: 3px; cursor: pointer; color: var(--text-primary);\">\n                                <div style=\"font-weight: 500;\">CartoDB Positron</div>\n                                <div style=\"font-size: 0.8em; color: var(--text-muted);\">Clean, minimal street map</div>\n                            </div>\n                            <div class=\"map-option\" data-map=\"terrain\" style=\"padding: 8px; margin-bottom: 5px; background: var(--bg-content); border-radius: 3px; cursor: pointer; color: var(--text-primary);\">\n                                <div style=\"font-weight: 500;\">Stamen Terrain</div>\n                                <div style=\"font-size: 0.8em; color: var(--text-muted);\">Terrain and elevation data</div>\n                            </div>\n                            <div class=\"map-option\" data-map=\"opentopomap\" style=\"padding: 8px; margin-bottom: 5px; background: var(--bg-content); border-radius: 3px; cursor: pointer; color: var(--text-primary);\">\n                                <div style=\"font-weight: 500;\">OpenTopoMap</div>\n                                <div style=\"font-size: 0.8em; color: var(--text-muted);\">Topographic map with contours</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </main>\n    </div> <!-- End of page-container -->\n\n    <!-- Socket.io for real-time updates -->\n    <script src=\"/socket.io/socket.io.js\"></script>\n    <!-- MGRS Library -->\n    <script src=\"/mgrs.min.js\"></script>\n    <!-- Signal Visualization -->\n    <script src=\"/js/signal-visualization.js\"></script>\n    <script>\n    // Kismet iframe functionality has been removed\n\n    \n\n\n    </script>\n\n    <footer class=\"footer\">\n        <div class=\"footer-content\">\n            <div class=\"footer-text\">\n                <span class=\"footer-symbol\">⚡</span>\n                Property of\n                <span class=\"footer-separator\">|</span>\n                SSG Malone, Darren\n                <span class=\"footer-separator\">|</span>\n                SPC Peirson, Christian\n                <span class=\"footer-symbol\">⚡</span>\n            </div>\n        </div>\n    </footer>\n\n    <script>\n        const messages = [\n            \"Calibrating Chroniton Emitters...\",\n            \"Quantum Field Sync: 99.97%\",\n            \"Reality Matrix Stabilized.\",\n            \"Interface Online. Welcome, Commander.\"\n        ];\n        let messageIndex = 0;\n        const planetaryMessageElement = document.getElementById('planetary-message');\n        const systemMessageElement = document.getElementById('system-message');\n        const dynamicTextElements = document.querySelectorAll('.dynamic-text');\n\n        function updateSystemMessage() {\n            if (planetaryMessageElement) {\n                planetaryMessageElement.style.opacity = 0;\n                setTimeout(() => {\n                    planetaryMessageElement.textContent = messages[messageIndex];\n                    planetaryMessageElement.style.opacity = 1;\n                    messageIndex = (messageIndex + 1) % messages.length;\n                }, 500);\n            }\n        }\n\n        // Initial call and interval\n        if (messages.length > 0) {\n            updateSystemMessage();\n            setInterval(updateSystemMessage, 7000); // Change message every 7 seconds\n        }\n\n        // Convert lat/lon to MGRS using the mgrs.js library\n        function latLonToMGRS(lat, lon) {\n            if (!lat || !lon || lat === 'N/A' || lon === 'N/A') return '--';\n            \n            try {\n                const latNum = parseFloat(lat);\n                const lonNum = parseFloat(lon);\n                \n                // Use mgrs.forward to convert lat/lon to MGRS\n                // The second parameter (4) specifies 8-digit precision (4 digits each for easting/northing)\n                const mgrsString = mgrs.forward([lonNum, latNum], 4);\n                \n                // Format the MGRS string with spaces for readability\n                // Example: 18TWL8456123456 becomes 18T WL 8456 3456\n                const formatted = mgrsString.replace(/^(\\d+[A-Z])([A-Z]{2})(\\d{4})(\\d{4})$/, '$1 $2 $3 $4');\n                \n                return formatted;\n            } catch (e) {\n                console.error('MGRS conversion error:', e);\n                return '--';\n            }\n        }\n\n        // Update system status\n        function updateSystemStatus() {\n            fetch('/info', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    const gps = data.gps;\n                    document.getElementById('ip-address').textContent = data.ip;\n                    document.getElementById('gps-status').textContent = gps.status;\n                    document.getElementById('gps-lat').textContent = gps.lat ?? 'N/A';\n                    document.getElementById('gps-lon').textContent = gps.lon ?? 'N/A';\n                    document.getElementById('gps-alt').textContent = gps.alt ?? 'N/A';\n                    \n                    // Calculate and display MGRS\n                    const mgrs = latLonToMGRS(gps.lat, gps.lon);\n                    document.getElementById('gps-mgrs').textContent = mgrs;\n                    \n                    document.getElementById('gps-time').textContent = gps.time ?? 'N/A';\n                })\n                .catch(error => {\n                    document.getElementById('system-message').textContent = 'Error loading system status';\n                });\n        }\n\n        // Cesium Globe Initialization\n        let cesiumViewer = null;\n        let positionEntity = null;\n        let lastGpsUpdate = null;\n        let is3DMode = true;\n        let signalVisualization = null;\n        \n        // Initialize Socket.io connection\n        const socket = io();\n        \n        // Socket event handlers\n        socket.on('connect', () => {\n            console.log('Connected to WebSocket server');\n        });\n        \n        socket.on('disconnect', () => {\n            console.log('Disconnected from WebSocket server');\n        });\n        \n        socket.on('signal-update', (data) => {\n            if (signalVisualization && data.signals) {\n                signalVisualization.updateSignals(data.signals);\n            }\n        });\n        \n        socket.on('gps-update', (data) => {\n            if (data.lat && data.lon) {\n                updateGlobePosition(data.lat, data.lon);\n            }\n        });\n        \n        socket.on('kismet-data', (data) => {\n            updateKismetDataDisplay(data);\n        });\n\n        function initializeCesiumGlobe() {\n            console.log('Initializing Cesium Globe...');\n            try {\n                // Prevent multiple initialization\n                if (cesiumViewer) {\n                    console.log('Cesium viewer already initialized');\n                    return;\n                }\n                \n                // Check if Cesium is loaded\n                if (typeof Cesium === 'undefined') {\n                    console.error('Cesium library not loaded!');\n                    return;\n                }\n                console.log('Cesium library is available');\n                \n                // Set Cesium Ion default access token (this is a free token)\n                Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlYWE1OWUxNy1mMWZiLTQzYjYtYTQ0OS1kMWFjYmFkNjc5YzAiLCJpZCI6NTc3MzMsImlhdCI6MTYyNzg0NTE4Mn0.XcKpgANiY19MC4bdFUXMVEBToBmqS8kuYpUlxJHYZxk';\n                \n                // Initialize Cesium viewer with minimal, compatible settings\n                console.log('Creating Cesium viewer...');\n                cesiumViewer = new Cesium.Viewer('cesium-container', {\n                    terrainProvider: new Cesium.EllipsoidTerrainProvider(),\n                    imageryProvider: false, // We'll add it manually\n                    baseLayerPicker: false,\n                    geocoder: false,\n                    homeButton: false,\n                    sceneModePicker: false,\n                    navigationHelpButton: false,\n                    animation: false,\n                    timeline: false,\n                    fullscreenButton: false,\n                    vrButton: false,\n                    selectionIndicator: false,\n                    infoBox: false,\n                    scene3DOnly: false, // Allow 2D/3D switching\n                    sceneMode: Cesium.SceneMode.SCENE3D // Start in 3D mode\n                });\n\n                // Try multiple imagery providers until one works\n                const imageryProviders = [\n                    {\n                        name: 'Local Offline Tiles',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: '/offline-tiles/{z}/{x}/{y}.png',\n                            credit: 'Offline Natural Earth Data',\n                            maximumLevel: 4,\n                            minimumLevel: 0,\n                            hasAlphaChannel: false,\n                            rectangle: Cesium.Rectangle.fromDegrees(-180, -85.05112877980659, 180, 85.05112877980659)\n                        })\n                    },\n                    {\n                        name: 'Esri World Imagery',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n                            credit: 'Tiles © Esri',\n                            maximumLevel: 19\n                        })\n                    },\n                    {\n                        name: 'CartoDB Positron',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',\n                            credit: 'Map tiles by CartoDB, under CC BY 3.0',\n                            maximumLevel: 18\n                        })\n                    },\n                    {\n                        name: 'Stamen Terrain',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://stamen-tiles.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png',\n                            credit: 'Map tiles by Stamen Design, under CC BY 3.0',\n                            maximumLevel: 18\n                        })\n                    },\n                    {\n                        name: 'OpenTopoMap',\n                        provider: () => new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://a.tile.opentopomap.org/{z}/{x}/{y}.png',\n                            credit: 'Map data © OpenStreetMap contributors, SRTM | Map style © OpenTopoMap',\n                            maximumLevel: 17\n                        })\n                    }\n                ];\n\n                // Remove existing imagery and try providers\n                cesiumViewer.imageryLayers.removeAll();\n                let imageryAdded = false;\n\n                for (const providerInfo of imageryProviders) {\n                    try {\n                        const provider = providerInfo.provider();\n                        cesiumViewer.imageryLayers.addImageryProvider(provider);\n                        console.log(`Successfully loaded imagery: ${providerInfo.name}`);\n                        imageryAdded = true;\n                        break;\n                    } catch (error) {\n                        console.warn(`Failed to load ${providerInfo.name}:`, error);\n                    }\n                }\n\n                if (!imageryAdded) {\n                    console.error('All imagery providers failed, using Cesium default');\n                }\n\n                // Set initial view - use compatible lighting settings\n                try {\n                    cesiumViewer.scene.globe.enableLighting = true;\n                } catch (e) {\n                    console.log('Lighting not supported in this Cesium version');\n                }\n                cesiumViewer.scene.globe.depthTestAgainstTerrain = false; // Disable for better performance\n                \n                // Add a more visible position marker (start hidden until GPS data available)\n                positionEntity = cesiumViewer.entities.add({\n                    position: Cesium.Cartesian3.fromDegrees(0, 0),\n                    show: false, // Hide until we get real GPS data\n                    point: {\n                        pixelSize: 15,\n                        color: Cesium.Color.CYAN,\n                        outlineColor: Cesium.Color.WHITE,\n                        outlineWidth: 3,\n                        heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,\n                        disableDepthTestDistance: Number.POSITIVE_INFINITY\n                    },\n                    label: {\n                        text: 'System Location',\n                        font: '14pt Inter',\n                        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n                        pixelOffset: new Cesium.Cartesian2(0, -20),\n                        fillColor: Cesium.Color.CYAN,\n                        outlineColor: Cesium.Color.BLACK,\n                        outlineWidth: 2,\n                        style: Cesium.LabelStyle.FILL_AND_OUTLINE,\n                        disableDepthTestDistance: Number.POSITIVE_INFINITY\n                    }\n                });\n\n                // Set initial camera view\n                cesiumViewer.camera.setView({\n                    destination: Cesium.Cartesian3.fromDegrees(0, 0, 10000000),\n                    orientation: {\n                        heading: 0.0,\n                        pitch: -Cesium.Math.PI_OVER_TWO,\n                        roll: 0.0\n                    }\n                });\n\n                // Zoom controls\n                document.getElementById('zoom-in').addEventListener('click', () => {\n                    const camera = cesiumViewer.camera;\n                    camera.zoomIn(camera.positionCartographic.height * 0.5);\n                });\n\n                document.getElementById('zoom-out').addEventListener('click', () => {\n                    const camera = cesiumViewer.camera;\n                    camera.zoomOut(camera.positionCartographic.height * 0.5);\n                });\n\n                // 2D/3D toggle control\n                let currentSceneMode = Cesium.SceneMode.SCENE3D;\n                const toggle2D3DButton = document.getElementById('toggle-2d-3d');\n                \n                toggle2D3DButton.addEventListener('click', () => {\n                    if (!cesiumViewer) return;\n                    \n                    // Store current camera position before switching\n                    const camera = cesiumViewer.camera;\n                    const position = camera.positionCartographic;\n                    const centerPosition = {\n                        longitude: position ? position.longitude : 0,\n                        latitude: position ? position.latitude : 0,\n                        height: position ? position.height : 10000000\n                    };\n                    \n                    if (currentSceneMode === Cesium.SceneMode.SCENE3D) {\n                        // Switch to 2D\n                        cesiumViewer.scene.morphTo2D(1.0); // 1 second transition\n                        currentSceneMode = Cesium.SceneMode.SCENE2D;\n                        toggle2D3DButton.textContent = '2D';\n                    } else {\n                        // Switch to 3D\n                        cesiumViewer.scene.morphTo3D(1.0); // 1 second transition\n                        currentSceneMode = Cesium.SceneMode.SCENE3D;\n                        toggle2D3DButton.textContent = '3D';\n                    }\n                    \n                    // After morphing completes, restore camera position\n                    setTimeout(() => {\n                        if (cesiumViewer && centerPosition) {\n                            if (currentSceneMode === Cesium.SceneMode.SCENE2D) {\n                                // Set view for 2D mode\n                                cesiumViewer.camera.setView({\n                                    destination: Cesium.Rectangle.fromDegrees(\n                                        Cesium.Math.toDegrees(centerPosition.longitude) - 10,\n                                        Cesium.Math.toDegrees(centerPosition.latitude) - 10,\n                                        Cesium.Math.toDegrees(centerPosition.longitude) + 10,\n                                        Cesium.Math.toDegrees(centerPosition.latitude) + 10\n                                    )\n                                });\n                            } else {\n                                // Set view for 3D mode\n                                cesiumViewer.camera.setView({\n                                    destination: Cesium.Cartesian3.fromRadians(\n                                        centerPosition.longitude,\n                                        centerPosition.latitude,\n                                        centerPosition.height\n                                    )\n                                });\n                            }\n                        }\n                    }, 1100); // Wait slightly longer than morph duration\n                });\n                \n                // Center on Me button functionality\n                document.getElementById('center-on-me').addEventListener('click', () => {\n                    if (lastGpsUpdate && cesiumViewer) {\n                        const height = currentSceneMode === Cesium.SceneMode.SCENE3D ? 50000 : 1000000;\n                        cesiumViewer.camera.flyTo({\n                            destination: Cesium.Cartesian3.fromDegrees(\n                                lastGpsUpdate.lon, \n                                lastGpsUpdate.lat, \n                                height\n                            ),\n                            duration: 1.5\n                        });\n                        console.log('Centering on GPS location:', lastGpsUpdate);\n                    } else {\n                        console.log('No GPS position available to center on');\n                        // Show a message to the user\n                        const positionInfo = document.getElementById('globe-position');\n                        if (positionInfo) {\n                            const originalText = positionInfo.textContent;\n                            positionInfo.textContent = 'No GPS position available';\n                            setTimeout(() => {\n                                positionInfo.textContent = originalText;\n                            }, 2000);\n                        }\n                    }\n                });\n                \n                // Initialize signal visualization\n                if (window.SignalVisualization && window.SignalVisualization.initialize) {\n                    window.SignalVisualization.initialize(cesiumViewer);\n                    console.log('Signal visualization initialized');\n                    \n                    // Connect to WebSocket for real-time signal updates\n                    socket.emit('subscribe-signals');\n                } else {\n                    console.log('Signal visualization library not loaded');\n                }\n\n                console.log('Cesium globe initialized successfully');\n                document.getElementById('globe-position').textContent = 'Globe Ready - Waiting for GPS...';\n            } catch (error) {\n                console.error('Failed to initialize Cesium globe:', error);\n                document.getElementById('cesium-container').innerHTML = \n                    `<div style=\"color: #ff4444; padding: 20px; text-align: center;\">\n                        Failed to load globe<br>\n                        <small>${error.message}</small>\n                    </div>`;\n            }\n        }\n\n        // Update globe position from GPS data\n        function updateGlobePosition(lat, lon) {\n            if (!cesiumViewer || !positionEntity) return;\n            \n            try {\n                const latNum = parseFloat(lat);\n                const lonNum = parseFloat(lon);\n                \n                // Only update if we have valid, non-zero coordinates\n                if (isNaN(latNum) || isNaN(lonNum) || (latNum === 0 && lonNum === 0)) {\n                    return;\n                }\n                \n                // Show the entity now that we have real GPS data\n                positionEntity.show = true;\n                \n                // Update entity position\n                const position = Cesium.Cartesian3.fromDegrees(lonNum, latNum);\n                positionEntity.position = position;\n                \n                // Update position display\n                document.getElementById('globe-position').textContent = \n                    `${latNum.toFixed(6)}°, ${lonNum.toFixed(6)}°`;\n                \n                // Fly to position if it's the first update or significant change\n                if (!lastGpsUpdate || \n                    Math.abs(lastGpsUpdate.lat - latNum) > 0.1 || \n                    Math.abs(lastGpsUpdate.lon - lonNum) > 0.1) {\n                    \n                    cesiumViewer.camera.flyTo({\n                        destination: Cesium.Cartesian3.fromDegrees(lonNum, latNum, 50000),\n                        duration: 2.0\n                    });\n                    \n                    lastGpsUpdate = { lat: latNum, lon: lonNum };\n                }\n                \n                // Request render\n                cesiumViewer.scene.requestRender();\n            } catch (error) {\n                console.error('Error updating globe position:', error);\n            }\n        }\n\n        // Modify the existing updateSystemStatus function to call updateGlobePosition\n        const originalUpdateSystemStatus = updateSystemStatus;\n        updateSystemStatus = function() {\n            originalUpdateSystemStatus();\n            \n            // Also fetch GPS data for globe update\n            fetch('/info', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.gps && data.gps.lat && data.gps.lon) {\n                    updateGlobePosition(data.gps.lat, data.gps.lon);\n                }\n            })\n            .catch(error => {\n                console.error('Error fetching GPS for globe:', error);\n            });\n        };\n\n        // Initialize Cesium when page loads\n        document.addEventListener('DOMContentLoaded', () => {\n            setTimeout(initializeCesiumGlobe, 1000); // Delay to ensure Cesium is loaded\n            \n            // Initialize maps dropdown functionality\n            initializeMapsDropdown();\n        });\n\n        // Maps dropdown functionality\n        function initializeMapsDropdown() {\n            const mapsHeader = document.getElementById('maps-header');\n            const mapsContent = document.getElementById('maps-content');\n            const mapsArrow = document.getElementById('maps-arrow');\n            const mapOptions = document.querySelectorAll('.map-option');\n            \n            // Set default active map (offline)\n            mapOptions[0].classList.add('active');\n            \n            // Dropdown toggle\n            mapsHeader.addEventListener('click', () => {\n                const isExpanded = mapsContent.classList.contains('expanded');\n                \n                if (isExpanded) {\n                    mapsContent.classList.remove('expanded');\n                    mapsArrow.style.transform = 'rotate(0deg)';\n                } else {\n                    mapsContent.classList.add('expanded');\n                    mapsArrow.style.transform = 'rotate(180deg)';\n                }\n            });\n            \n            // Map option selection\n            mapOptions.forEach(option => {\n                option.addEventListener('click', () => {\n                    const mapType = option.getAttribute('data-map');\n                    \n                    // Remove active class from all options\n                    mapOptions.forEach(opt => opt.classList.remove('active'));\n                    \n                    // Add active class to selected option\n                    option.classList.add('active');\n                    \n                    // Switch map imagery\n                    switchMapImagery(mapType);\n                    \n                    // Close dropdown\n                    mapsContent.classList.remove('expanded');\n                    mapsArrow.style.transform = 'rotate(0deg)';\n                });\n            });\n        }\n\n        // Switch map imagery provider\n        function switchMapImagery(mapType) {\n            if (!cesiumViewer) {\n                console.log('Cesium viewer not initialized yet');\n                return;\n            }\n            \n            // Remove all existing imagery layers\n            cesiumViewer.imageryLayers.removeAll();\n            \n            let provider;\n            \n            try {\n                switch(mapType) {\n                    case 'offline':\n                        provider = new Cesium.UrlTemplateImageryProvider({\n                            url: '/offline-tiles/{z}/{x}/{y}.png',\n                            credit: 'Offline Natural Earth Data',\n                            maximumLevel: 4,\n                            minimumLevel: 0,\n                            hasAlphaChannel: false,\n                            rectangle: Cesium.Rectangle.fromDegrees(-180, -85.05112877980659, 180, 85.05112877980659)\n                        });\n                        break;\n                    case 'esri':\n                        provider = new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n                            credit: 'Tiles © Esri',\n                            maximumLevel: 19\n                        });\n                        break;\n                    case 'cartodb':\n                        provider = new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',\n                            credit: 'Map tiles by CartoDB, under CC BY 3.0',\n                            maximumLevel: 18\n                        });\n                        break;\n                    case 'terrain':\n                        provider = new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://stamen-tiles.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png',\n                            credit: 'Map tiles by Stamen Design, under CC BY 3.0',\n                            maximumLevel: 18\n                        });\n                        break;\n                    case 'opentopomap':\n                        provider = new Cesium.UrlTemplateImageryProvider({\n                            url: 'https://a.tile.opentopomap.org/{z}/{x}/{y}.png',\n                            credit: 'Map data © OpenStreetMap contributors, SRTM | Map style © OpenTopoMap',\n                            maximumLevel: 17\n                        });\n                        break;\n                    default:\n                        console.error('Unknown map type:', mapType);\n                        return;\n                }\n                \n                // Add the new provider\n                cesiumViewer.imageryLayers.addImageryProvider(provider);\n                console.log(`Switched to ${mapType} imagery`);\n                \n            } catch (error) {\n                console.error(`Failed to load ${mapType} imagery:`, error);\n                \n                // Fallback to offline tiles\n                if (mapType !== 'offline') {\n                    switchMapImagery('offline');\n                }\n            }\n        }\n\n        // Update Kismet data display from WebSocket\n        function updateKismetDataDisplay(data) {\n            console.log('Kismet data update:', data);\n            \n            // Update device counts\n            const devicesCountEl = document.getElementById('devices-count');\n            const networksCountEl = document.getElementById('networks-count');\n            const lastUpdateEl = document.getElementById('last-update');\n            \n            if (devicesCountEl) devicesCountEl.textContent = data.devices_count || '0';\n            if (networksCountEl) networksCountEl.textContent = data.networks_count || '0';\n            if (lastUpdateEl) {\n                const now = new Date();\n                lastUpdateEl.textContent = now.toLocaleTimeString('en-US', { \n                    hour: '2-digit', \n                    minute: '2-digit' \n                });\n            }\n            \n            // Update devices list\n            const devicesList = document.getElementById('devices-list');\n            if (devicesList && data.recent_devices && data.recent_devices.length > 0) {\n                devicesList.innerHTML = '';\n                data.recent_devices.slice(0, 10).forEach(device => {\n                    const deviceItem = document.createElement('div');\n                    deviceItem.className = 'feed-item';\n                    deviceItem.innerHTML = `\n                        <strong>${device.ssid || 'Hidden'}</strong> - \n                        ${device.mac || 'Unknown'} \n                        (${device.signal || '--'} dBm)\n                    `;\n                    devicesList.appendChild(deviceItem);\n                });\n            }\n            \n            // Update activity feed\n            const feedContainer = document.getElementById('wifi-feed');\n            if (feedContainer && data.feed_items && data.feed_items.length > 0) {\n                feedContainer.innerHTML = '';\n                data.feed_items.slice(0, 5).forEach(item => {\n                    const feedItem = document.createElement('div');\n                    feedItem.className = 'feed-item feed-item-blink';\n                    feedItem.textContent = `${item.type || 'Activity'}: ${item.message || ''}`;\n                    feedContainer.appendChild(feedItem);\n                    \n                    // Remove blink animation after 2 seconds\n                    setTimeout(() => feedItem.classList.remove('feed-item-blink'), 2000);\n                });\n            }\n        }\n\n        // Update Kismet data\n        function updateKismetData() {\n            fetch('/kismet-data', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    console.log('Kismet data received:', data);  // Debug log\n                    \n                    // Update device counts\n                    document.getElementById('devices-count').textContent = data.devices_count || '0';\n                    document.getElementById('networks-count').textContent = data.networks_count || '0';\n                    document.getElementById('last-update').textContent = new Date().toLocaleTimeString();\n                    \n                    // Update recent devices\n                    const recentDevicesList = document.getElementById('devices-list');\n                    recentDevicesList.innerHTML = '';\n                    \n                    if (data.recent_devices && data.recent_devices.length > 0) {\n                        data.recent_devices.forEach(device => {\n                            const deviceElement = document.createElement('div');\n                            deviceElement.className = 'feed-item';\n                            deviceElement.innerHTML = `\n                                <strong>${device.name || 'Unknown Device'}</strong><br>\n                                Type: ${device.type || 'Unknown'}<br>\n                                Channel: ${device.channel || 'Unknown'}<br>\n                                Signal: ${device.signal || 'Unknown'} dBm\n                            `;\n                            recentDevicesList.appendChild(deviceElement);\n                        });\n                    } else {\n                        recentDevicesList.innerHTML = '<div class=\"feed-item\">No devices detected</div>';\n                    }\n                    \n                    // Update feed\n                    const feedContainer = document.getElementById('kismet-feed');\n                    feedContainer.innerHTML = ''; // Clear existing feed items\n                    \n                    if (data.feed_items && data.feed_items.length > 0) {\n                        data.feed_items.forEach(item => {\n                            const feedItem = document.createElement('div');\n                            feedItem.className = 'feed-item';\n                            feedItem.innerHTML = `\n                                <strong>${item.type || 'Activity'}</strong>: ${item.message || 'Unknown activity'}\n                            `;\n                            feedContainer.appendChild(feedItem);\n                            \n                            // Add highlight effect for new items\n                            feedItem.classList.add('feed-item-blink');\n                            setTimeout(() => feedItem.classList.remove('feed-item-blink'), 2000);\n                        });\n                        \n                        // Keep only last 10 items\n                        while (feedContainer.children.length > 10) {\n                            feedContainer.removeChild(feedContainer.firstChild);\n                        }\n                        \n                        // Scroll to bottom\n                        feedContainer.scrollTop = feedContainer.scrollHeight;\n                    } else {\n                        feedContainer.innerHTML = '<div class=\"feed-item\">Waiting for activity...</div>';\n                    }\n                })\n                .catch(error => {\n                    // Only log error if not during stop operations (network reset causes temporary errors)\n                    const isStopping = window.servicesStopping || false;\n                    if (!isStopping) {\n                        console.error('Error fetching Kismet data:', error);\n                        document.getElementById('devices-count').textContent = '0';\n                        document.getElementById('networks-count').textContent = '0';\n                        document.getElementById('last-update').textContent = 'Error';\n                        document.getElementById('devices-list').innerHTML = '<div class=\"feed-item\">Failed to get data from Kismet</div>';\n                        document.getElementById('kismet-feed').innerHTML = '<div class=\"feed-item\">Failed to get data from Kismet</div>';\n                    }\n                });\n        }\n\n        // Start periodic updates - moved to DOMContentLoaded\n        // setInterval(updateSystemStatus, 5000);\n        // setInterval(updateKismetData, 2000);\n\n        // Initial updates - moved to DOMContentLoaded\n        // updateSystemStatus();\n        // updateKismetData();\n        \n        function updateServiceStatus() {\n            // Just call updateKismetStatus which checks the actual service status\n            updateKismetStatus();\n        }\n\n        function showNotification(message, type = 'info') {\n            const notification = document.getElementById('notification');\n            notification.textContent = message;\n            notification.className = 'notification show ' + type;\n            \n            // Hide notification after 5 seconds\n            setTimeout(() => {\n                notification.className = 'notification';\n            }, 5000);\n        }\n\n        function updateKismetStatus() {\n            fetch('/script-status')\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    console.log('Kismet status response:', data); // Debug log\n                    const kismetStatus = document.getElementById('kismet-status');\n                    const wigleStatus = document.getElementById('wigle-status');\n                    \n                    // Get startup status from window object (set when start button clicked)\n                    const isStarting = window.servicesStarting || false;\n                    \n                    // Update Kismet status based on state\n                    if (data && data.kismet_running === true && !isStarting) {\n                        // Service is fully running - GREEN\n                        console.log('Setting Kismet status to running (green)');\n                        kismetStatus.style.background = '#44ff44';\n                        kismetStatus.style.boxShadow = '0 0 10px #44ff44';\n                    } else if (isStarting) {\n                        // Services are starting up - YELLOW\n                        console.log('Keeping Kismet status as starting (yellow)');\n                        kismetStatus.style.background = '#ffaa00';\n                        kismetStatus.style.boxShadow = '0 0 10px #ffaa00';\n                    } else {\n                        // Services not started - RED\n                        console.log('Setting Kismet status to not running (red)');\n                        kismetStatus.style.background = '#ff4444';\n                        kismetStatus.style.boxShadow = 'none';\n                    }\n\n                    // Update WigletoTak status based on state\n                    if (data && data.wigle_running === true && !isStarting) {\n                        // Service is fully running - GREEN\n                        wigleStatus.style.background = '#44ff44';\n                        wigleStatus.style.boxShadow = '0 0 10px #44ff44';\n                    } else if (isStarting) {\n                        // Services are starting up - YELLOW\n                        wigleStatus.style.background = '#ffaa00';\n                        wigleStatus.style.boxShadow = '0 0 10px #ffaa00';\n                    } else {\n                        // Services not started - RED\n                        wigleStatus.style.background = '#ff4444';\n                        wigleStatus.style.boxShadow = 'none';\n                    }\n                })\n                .catch(error => {\n                    console.error('Error checking Kismet status:', error);\n                    \n                    // Get startup status to determine if this is expected\n                    const isStarting = window.servicesStarting || false;\n                    const isStopping = window.servicesStopping || false;\n                    \n                    // Only show error state if not during start/stop operations\n                    if (!isStarting && !isStopping) {\n                        // Set both indicators to error state\n                        const kismetStatus = document.getElementById('kismet-status');\n                        const wigleStatus = document.getElementById('wigle-status');\n                        \n                        kismetStatus.style.background = '#ff4444';\n                        wigleStatus.style.background = '#ff4444';\n                        kismetStatus.style.boxShadow = 'none';\n                        wigleStatus.style.boxShadow = 'none';\n                    }\n                    // During stop operations, this is expected due to network reset\n                });\n        }\n\n        // Update status more frequently when starting/stopping\n        let statusUpdateInterval;\n        let normalUpdateInterval;\n        \n        function startStatusUpdates() {\n            // Clear any existing intervals\n            if (statusUpdateInterval) {\n                clearInterval(statusUpdateInterval);\n            }\n            if (normalUpdateInterval) {\n                clearInterval(normalUpdateInterval);\n            }\n            \n            // Wait 5 seconds before first update to avoid false positives\n            setTimeout(() => {\n                // Then update every 2 seconds for 70 seconds\n                statusUpdateInterval = setInterval(updateKismetStatus, 2000);\n                \n                // Stop rapid updates after 70 seconds\n                setTimeout(() => {\n                    clearInterval(statusUpdateInterval);\n                    // Return to normal update interval\n                    normalUpdateInterval = setInterval(updateKismetStatus, 5000);\n                }, 70000);\n            }, 5000);\n        }\n\n        async function startKismet() {\n            console.log('startKismet function called');\n            showNotification('Starting Kismet services...', 'info');\n            try {\n                console.log('Attempting to call /api/start-script endpoint');\n                const response = await fetch('/run-script', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ script_name: 'kismet' })\n                });\n                \n                console.log('Response received:', response.status, response.statusText);\n                \n                if (!response.ok) {\n                    console.error('Response not OK, attempting to read error data');\n                    const errorData = await response.json();\n                    console.error('Error data:', errorData);\n                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n                }\n                \n                const data = await response.json();\n                \n                if(data.success === true) {\n                    // Don't show success immediately - wait for services to actually start\n                    showNotification('Kismet services are starting up, please wait...', 'info');\n                    \n                    // Set global flag to indicate services are starting\n                    window.servicesStarting = true;\n                    \n                    // Set status indicators to yellow immediately to show starting\n                    const kismetStatus = document.getElementById('kismet-status');\n                    const wigleStatus = document.getElementById('wigle-status');\n                    if (kismetStatus) {\n                        kismetStatus.style.background = '#ffaa00';\n                        kismetStatus.style.boxShadow = '0 0 10px #ffaa00';\n                    }\n                    if (wigleStatus) {\n                        wigleStatus.style.background = '#ffaa00';\n                        wigleStatus.style.boxShadow = '0 0 10px #ffaa00';\n                    }\n                    \n                    startStatusUpdates(); // Start frequent status updates\n                    \n                    // Check service status periodically\n                    let checkCount = 0;\n                    const maxChecks = 65; // 65 seconds max (accounting for 60 second startup + buffer)\n                    const minChecks = 46; // Don't report success before 46 seconds (actual startup time)\n                    \n                    const checkInterval = setInterval(async () => {\n                        checkCount++;\n                        \n                        try {\n                            const statusResponse = await fetch('/script-status');\n                            const statusData = await statusResponse.json();\n                            \n                            // Only report success after minimum time has passed\n                            if (statusData.kismet_running && statusData.wigle_running && checkCount >= minChecks) {\n                                // Both services are running - wait for iframe to load\n                                clearInterval(checkInterval);\n                                \n                                // Show almost ready message\n                                showNotification('Services started, loading Kismet interface...', 'info');\n                                \n                                // Just show success\n                                showNotification('Kismet services started successfully!', 'success');\n                                window.servicesStarting = false; // Clear startup flag\n                                \n                                updateKismetStatus();\n                            } else if (checkCount >= maxChecks) {\n                                // Timeout\n                                clearInterval(checkInterval);\n                                showNotification('Services are taking longer than expected to start', 'warning');\n                                window.servicesStarting = false; // Clear startup flag on timeout\n                            } else if (checkCount % 10 === 0) {\n                                // Update progress every 10 seconds\n                                const elapsed = checkCount;\n                                const stage = elapsed < 12 ? 'Initializing GPS and configuring GPSD...' :\n                                            elapsed < 21 ? 'Starting cgps and preparing network...' :\n                                            elapsed < 36 ? 'Starting Kismet server (15s initialization)...' :\n                                            elapsed < 46 ? 'Launching WigleToTAK service...' :\n                                            'Verifying services and loading interface...';\n                                showNotification(`${stage} ${elapsed}s elapsed`, 'info');\n                            }\n                        } catch (error) {\n                            // Keep checking\n                            if (checkCount >= maxChecks) {\n                                clearInterval(checkInterval);\n                                showNotification('Failed to verify service status', 'error');\n                            }\n                        }\n                    }, 1000);\n                } else {\n                    throw new Error(data.message || 'Failed to start Kismet');\n                }\n            } catch (error) {\n                console.error('Error in startKismet:', error);\n                console.error('Error stack:', error.stack);\n                showNotification(`Failed to start Kismet services: ${error.message}`, 'error');\n                window.servicesStarting = false; // Clear startup flag on error\n            }\n        }\n\n        function stopKismet() {\n            showNotification('Stopping Kismet services...', 'info');\n            window.servicesStopping = true; // Set flag to suppress network errors\n            \n            fetch('/stop-script', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    if(data.status === 'success') {\n                        showNotification('Kismet services stopped successfully!', 'success');\n                        \n                        // Clear flags\n                        window.servicesStarting = false;\n                        window.servicesStopping = false;\n                        \n                        // Set indicators to red immediately\n                        const kismetStatus = document.getElementById('kismet-status');\n                        const wigleStatus = document.getElementById('wigle-status');\n                        if (kismetStatus) {\n                            kismetStatus.style.background = '#ff4444';\n                            kismetStatus.style.boxShadow = 'none';\n                        }\n                        if (wigleStatus) {\n                            wigleStatus.style.background = '#ff4444';\n                            wigleStatus.style.boxShadow = 'none';\n                        }\n                        \n                        // Start frequent status updates to show services stopping\n                        startStatusUpdates();\n                    } else {\n                        showNotification('Error stopping Kismet services: ' + (data.message || 'Unknown error'), 'error');\n                        window.servicesStopping = false; // Clear flag on error\n                    }\n                })\n                .catch(error => {\n                    console.error('Error:', error);\n                    showNotification('Failed to stop Kismet services. Please try again.', 'error');\n                    window.servicesStopping = false; // Clear flag on error\n                });\n        }\n\n        function toggleMinimize(button) {\n            const gridItem = button.closest('.grid-item');\n            const isMinimized = gridItem.classList.toggle('minimized');\n            \n            if (isMinimized) {\n                // Add to minimized tabs\n                const tab = document.createElement('div');\n                tab.className = 'minimized-tab';\n                tab.innerHTML = `\n                    ${gridItem.querySelector('h2').textContent.replace('▼', '').replace('▲', '')}\n                    <button class=\"restore-button\" onclick=\"restoreBox('${gridItem.id}')\">▲</button>\n                `;\n                document.getElementById('minimized-tabs').appendChild(tab);\n\n                // Enable resizing for other boxes\n                const otherBoxes = document.querySelectorAll('.grid-item:not(.minimized)');\n                otherBoxes.forEach(box => {\n                    box.style.minWidth = '200px';\n                    box.style.minHeight = '150px';\n                });\n            } else {\n                // Remove from minimized tabs\n                const tabs = document.querySelectorAll('.minimized-tab');\n                tabs.forEach(tab => {\n                    if (tab.textContent.includes(gridItem.querySelector('h2').textContent.replace('▼', '').replace('▲', ''))) {\n                        tab.remove();\n                    }\n                });\n\n                // Disable resizing if no boxes are minimized\n                const minimizedBoxes = document.querySelectorAll('.grid-item.minimized');\n                if (minimizedBoxes.length === 0) {\n                    const allBoxes = document.querySelectorAll('.grid-item');\n                    allBoxes.forEach(box => {\n                        box.style.minWidth = '';\n                        box.style.minHeight = '';\n                        // Reset to original position and size\n                        resetBoxPosition(box);\n                    });\n                }\n            }\n        }\n\n        function resetBoxPosition(box) {\n            switch(box.id) {\n                case 'instructions':\n                    box.style.top = '8px';\n                    box.style.left = '8px';\n                    box.style.width = `calc(4 * (100vw / 12) - 16px)`;\n                    // Reset to auto height to fit content\n                    box.style.height = 'auto';\n                    setTimeout(() => {\n                        const contentHeight = box.offsetHeight;\n                        box.style.height = contentHeight + 'px';\n                    }, 100);\n                    break;\n                case 'wifi-data-feed':\n                    box.style.top = '8px';\n                    box.style.left = `calc(4 * (100vw / 12) + 8px)`;\n                    box.style.width = `calc(4 * (100vw / 12) - 16px)`;\n                    box.style.height = `calc(100vh - 140px - 8px)`;\n                    break;\n                case 'start-menu':\n                case 'system-status':\n                    // Reposition these boxes under instructions\n                    const instructionsBox = document.getElementById('instructions');\n                    if (instructionsBox) {\n                        setTimeout(() => {\n                            const instructionsHeight = instructionsBox.offsetHeight;\n                            const instructionsBottom = instructionsBox.offsetTop + instructionsHeight;\n                            const remainingHeight = window.innerHeight - instructionsBottom - 130 - 16;\n                            const startMenuHeight = (remainingHeight * 0.5) - 8;\n                            const systemStatusHeight = (remainingHeight * 0.5) - 8;\n                            \n                            box.style.left = '8px';\n                            box.style.width = `calc(4 * (100vw / 12) - 16px)`;\n                            \n                            if (box.id === 'start-menu') {\n                                box.style.top = (instructionsBottom + 8) + 'px';\n                                box.style.height = startMenuHeight + 'px';\n                            } else if (box.id === 'system-status') {\n                                box.style.top = (instructionsBottom + startMenuHeight + 16) + 'px';\n                                box.style.height = systemStatusHeight + 'px';\n                                // Refresh resize handles for system status box\n                                refreshResizeHandles(box);\n                            }\n                        }, 100);\n                    }\n                    break;\n            }\n        }\n\n        function restoreBox(boxId) {\n            const box = document.getElementById(boxId);\n            box.classList.remove('minimized');\n            \n            // Remove from minimized tabs\n            const tabs = document.querySelectorAll('.minimized-tab');\n            tabs.forEach(tab => {\n                if (tab.textContent.includes(box.querySelector('h2').textContent.replace('▼', '').replace('▲', ''))) {\n                    tab.remove();\n                }\n            });\n\n            // Disable resizing if no boxes are minimized\n            const minimizedBoxes = document.querySelectorAll('.grid-item.minimized');\n            if (minimizedBoxes.length === 0) {\n                const allBoxes = document.querySelectorAll('.grid-item');\n                allBoxes.forEach(box => {\n                    box.style.minWidth = '';\n                    box.style.minHeight = '';\n                    // Reset to original position and size\n                    resetBoxPosition(box);\n                });\n            }\n        }\n\n        // Initialize draggable functionality\n        function initializeGrid() {\n            const gridItems = document.querySelectorAll('.grid-item');\n            gridItems.forEach(item => {\n                // Allow all boxes including Kismet iframe to be draggable\n                \n                const header = item.querySelector('.box-header');\n                if (header) {\n                    // Remove the click handler that was blocking minimize buttons\n                    // The document-level click handler will handle control buttons\n                }\n\n                // Make box draggable - DISABLED ON MOBILE\n                if (header && window.innerWidth > 768) {\n                    header.addEventListener('mousedown', function(e) {\n                        if (e.target.classList.contains('control-button-small')) return;\n                        \n                        const box = this.closest('.grid-item');\n                        const startX = e.clientX;\n                        const startY = e.clientY;\n                        const startLeft = box.offsetLeft;\n                        const startTop = box.offsetTop;\n                        \n                        // Set position absolute for dragging and preserve dimensions\n                        if (box.style.position !== 'absolute') {\n                            // Store current dimensions before changing position\n                            const currentWidth = box.offsetWidth;\n                            const currentHeight = box.offsetHeight;\n                            \n                            box.style.position = 'absolute';\n                            box.style.left = startLeft + 'px';\n                            box.style.top = startTop + 'px';\n                            \n                            // Preserve the original dimensions\n                            box.style.width = currentWidth + 'px';\n                            box.style.height = currentHeight + 'px';\n                        }\n                        \n                        function onMouseMove(e) {\n                            const newLeft = startLeft + (e.clientX - startX);\n                            const newTop = startTop + (e.clientY - startY);\n                            \n                            box.style.left = `${newLeft}px`;\n                            box.style.top = `${newTop}px`;\n                        }\n                        \n                        function onMouseUp() {\n                            document.removeEventListener('mousemove', onMouseMove);\n                            document.removeEventListener('mouseup', onMouseUp);\n                        }\n                        \n                        document.addEventListener('mousemove', onMouseMove);\n                        document.addEventListener('mouseup', onMouseUp);\n                    });\n                }\n            });\n        }\n\n        function createResizeHandles(box) {\n            // Skip resize handles on mobile\n            if (window.innerWidth <= 768) return;\n            \n            const positions = ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right'];\n            positions.forEach(pos => {\n                const handle = document.createElement('div');\n                handle.className = `resize-handle ${pos}`;\n                handle.style.zIndex = '1000';  // Ensure handles are on top\n                handle.onmousedown = function(e) { \n                    e.stopPropagation();\n                    e.preventDefault();\n                    console.log('Resize handle clicked:', pos, 'on box:', box.id);\n                    initResize(e, this); \n                };\n                box.appendChild(handle);\n            });\n        }\n        \n        function refreshResizeHandles(box) {\n            // Remove existing handles\n            const existingHandles = box.querySelectorAll('.resize-handle');\n            existingHandles.forEach(handle => handle.remove());\n            \n            // Recreate handles\n            createResizeHandles(box);\n        }\n\n        function initResize(e, handle) {\n            e.preventDefault();\n            const box = handle.closest('.grid-item');\n            console.log('Starting resize for box:', box.id);\n            \n            // Ensure box has absolute positioning for resize\n            if (box.style.position !== 'absolute') {\n                box.style.position = 'absolute';\n                box.style.left = box.offsetLeft + 'px';\n                box.style.top = box.offsetTop + 'px';\n            }\n            \n            const startX = e.clientX;\n            const startY = e.clientY;\n            const startWidth = box.offsetWidth;\n            const startHeight = box.offsetHeight;\n            const startLeft = box.offsetLeft;\n            const startTop = box.offsetTop;\n\n            function doResize(e) {\n                const pos = handle.className.split(' ')[1];\n                let newWidth = startWidth;\n                let newHeight = startHeight;\n                let newLeft = startLeft;\n                let newTop = startTop;\n\n                if (pos.includes('right')) {\n                    newWidth = startWidth + (e.clientX - startX);\n                }\n                if (pos.includes('left')) {\n                    newWidth = startWidth - (e.clientX - startX);\n                    newLeft = startLeft + (e.clientX - startX);\n                }\n                if (pos.includes('bottom')) {\n                    newHeight = startHeight + (e.clientY - startY);\n                }\n                if (pos.includes('top')) {\n                    newHeight = startHeight - (e.clientY - startY);\n                    newTop = startTop + (e.clientY - startY);\n                }\n\n                // Apply minimum size constraints\n                newWidth = Math.max(200, newWidth);\n                newHeight = Math.max(150, newHeight);\n\n                box.style.width = `${newWidth}px`;\n                \n                box.style.height = `${newHeight}px`;\n                \n                box.style.left = `${newLeft}px`;\n                box.style.top = `${newTop}px`;\n            }\n\n            function stopResize() {\n                document.removeEventListener('mousemove', doResize);\n                document.removeEventListener('mouseup', stopResize);\n            }\n\n            document.addEventListener('mousemove', doResize);\n            document.addEventListener('mouseup', stopResize);\n        }\n\n        // Add resize handles to all boxes when the page loads\n        document.addEventListener('DOMContentLoaded', function() {\n            const boxes = document.querySelectorAll('.grid-item');\n            boxes.forEach(box => {\n                // Add resize handles to all boxes including Kismet iframe\n                createResizeHandles(box);\n            });\n            initializeGrid();\n            \n            // Auto-size the instructions box to fit content on page load\n            const instructionsBox = document.getElementById('instructions');\n            const startMenuBox = document.getElementById('start-menu');\n            const systemStatusBox = document.getElementById('system-status');\n            \n            if (instructionsBox && window.innerWidth > 768) {\n                // Let the browser calculate the natural height\n                instructionsBox.style.height = 'auto';\n                \n                // Get the actual height after content is rendered\n                setTimeout(() => {\n                    const contentHeight = instructionsBox.offsetHeight;\n                    // Set the height explicitly to avoid layout issues\n                    instructionsBox.style.height = contentHeight + 'px';\n                    \n                    // Position start-menu and system-status boxes under instructions\n                    if (startMenuBox && systemStatusBox) {\n                        const instructionsBottom = instructionsBox.offsetTop + contentHeight;\n                        const remainingHeight = window.innerHeight - instructionsBottom - 130 - 16; // 100px header + 30px footer, 16px for margins\n                        // Give equal space to both boxes\n                        const startMenuHeight = (remainingHeight * 0.5) - 8;\n                        const systemStatusHeight = (remainingHeight * 0.5) - 8;\n                        \n                        // Position start menu\n                        startMenuBox.style.top = (instructionsBottom + 8) + 'px';\n                        startMenuBox.style.height = startMenuHeight + 'px';\n                        \n                        // Position system status\n                        systemStatusBox.style.top = (instructionsBottom + startMenuHeight + 16) + 'px';\n                        systemStatusBox.style.height = systemStatusHeight + 'px';\n                        \n                        // Refresh resize handles after positioning\n                        refreshResizeHandles(systemStatusBox);\n                    }\n                }, 100);\n            }\n            \n            // Start periodic updates after DOM is loaded\n            setInterval(updateSystemStatus, 5000);\n            setInterval(updateKismetData, 2000);\n\n            // Initial updates after DOM is loaded\n            updateSystemStatus();\n            updateKismetData();\n            \n            // Add event listeners for control buttons\n            document.addEventListener('click', function(e) {\n                const action = e.target.getAttribute('data-action');\n                if (!action) return;\n                \n                console.log('Button clicked with action:', action);\n                \n                switch(action) {\n                    case 'minimize':\n                        toggleMinimize(e.target);\n                        break;\n                    case 'startKismet':\n                        console.log('startKismet action detected, calling function');\n                        startKismet();\n                        break;\n                    case 'stopKismet':\n                        stopKismet();\n                        break;\n                }\n            });\n        });\n\n        // Start periodic updates\n        setInterval(updateKismetStatus, 5000);\n\n        // Initial status update\n        updateKismetStatus();\n        \n        // Handle window resize to maintain proper positioning\n        window.addEventListener('resize', function() {\n            if (window.innerWidth > 768) {\n                const instructionsBox = document.getElementById('instructions');\n                const startMenuBox = document.getElementById('start-menu');\n                const systemStatusBox = document.getElementById('system-status');\n                \n                if (instructionsBox && startMenuBox && systemStatusBox) {\n                    const contentHeight = instructionsBox.offsetHeight;\n                    const instructionsBottom = instructionsBox.offsetTop + contentHeight;\n                    const remainingHeight = window.innerHeight - instructionsBottom - 130 - 16;\n                    const startMenuHeight = (remainingHeight * 0.5) - 8;\n                    const systemStatusHeight = (remainingHeight * 0.5) - 8;\n                    \n                    startMenuBox.style.top = (instructionsBottom + 8) + 'px';\n                    startMenuBox.style.height = startMenuHeight + 'px';\n                    \n                    systemStatusBox.style.top = (instructionsBottom + startMenuHeight + 16) + 'px';\n                    systemStatusBox.style.height = systemStatusHeight + 'px';\n                    \n                    // Refresh resize handles after window resize\n                    refreshResizeHandles(systemStatusBox);\n                }\n            }\n        });\n\n    </script>\n    \n    <!-- Theme Toggle Button -->\n    <button id=\"theme-toggle\" \n            aria-label=\"Toggle dark mode\" \n            aria-pressed=\"false\"\n            style=\"position: fixed; bottom: 80px; right: 20px; width: 48px; height: 48px; border-radius: 50%; background: var(--bg-secondary); border: 1px solid var(--border-primary); color: var(--text-primary); cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.3s ease; z-index: 1000; box-shadow: var(--shadow-lg);\">\n        <!-- Sun icon (for dark mode) -->\n        <svg id=\"sun-icon\" style=\"width: 24px; height: 24px; display: block;\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"></path>\n        </svg>\n        <!-- Moon icon (for light mode) -->\n        <svg id=\"moon-icon\" style=\"width: 24px; height: 24px; display: none;\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"></path>\n        </svg>\n    </button>\n    \n    <!-- Theme Switcher -->\n    <script src=\"/js/theme.js\"></script>\n    \n    <script>\n    // Theme toggle functionality\n    (function() {\n        const themeToggle = document.getElementById('theme-toggle');\n        const sunIcon = document.getElementById('sun-icon');\n        const moonIcon = document.getElementById('moon-icon');\n        const html = document.documentElement;\n        \n        // Check for saved theme preference or default to blue theme\n        const currentTheme = localStorage.getItem('theme') || 'blue';\n        \n        // Apply saved theme on load\n        if (currentTheme === 'dark') {\n            html.setAttribute('data-theme', 'dark');\n            themeToggle.setAttribute('aria-pressed', 'true');\n            sunIcon.style.display = 'none';\n            moonIcon.style.display = 'block';\n        }\n        \n        // Toggle theme\n        themeToggle.addEventListener('click', function() {\n            const isDark = html.getAttribute('data-theme') === 'dark';\n            \n            if (isDark) {\n                // Switch to blue mode (default)\n                html.removeAttribute('data-theme');\n                localStorage.setItem('theme', 'blue');\n                themeToggle.setAttribute('aria-pressed', 'false');\n                sunIcon.style.display = 'block';\n                moonIcon.style.display = 'none';\n            } else {\n                // Switch to dark mode\n                html.setAttribute('data-theme', 'dark');\n                localStorage.setItem('theme', 'dark');\n                themeToggle.setAttribute('aria-pressed', 'true');\n                sunIcon.style.display = 'none';\n                moonIcon.style.display = 'block';\n            }\n        });\n        \n        // Hover effects\n        themeToggle.addEventListener('mouseenter', function() {\n            this.style.transform = 'scale(1.1)';\n            this.style.boxShadow = 'var(--shadow-lg), var(--glow-primary)';\n        });\n        \n        themeToggle.addEventListener('mouseleave', function() {\n            this.style.transform = 'scale(1)';\n            this.style.boxShadow = 'var(--shadow-lg)';\n        });\n    })();\n    </script>\n</body>\n</html>",
      "headers": {
        "referrer-policy": "no-referrer",
        "x-content-type-options": "nosniff",
        "x-dns-prefetch-control": "off",
        "x-download-options": "noopen",
        "x-permitted-cross-domain-policies": "none",
        "x-xss-protection": "0",
        "vary": "Origin",
        "access-control-allow-credentials": "true",
        "access-control-expose-headers": "Content-Length,Content-Type,X-Request-Id,X-Response-Time",
        "accept-ranges": "bytes",
        "cache-control": "public, max-age=0",
        "last-modified": "Sun, 22 Jun 2025 17:17:45 GMT",
        "etag": "W/\"23f15-19798a565b6\"",
        "content-type": "text/html; charset=UTF-8",
        "content-length": "147221",
        "date": "Mon, 23 Jun 2025 02:34:04 GMT",
        "connection": "keep-alive",
        "keep-alive": "timeout=5"
      }
    },
    "Wigle file listing": {
      "success": false,
      "statusCode": 404,
      "data": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot GET /list_wigle_files</pre>\n</body>\n</html>\n",
      "headers": {
        "referrer-policy": "no-referrer",
        "x-content-type-options": "nosniff",
        "x-dns-prefetch-control": "off",
        "x-download-options": "noopen",
        "x-permitted-cross-domain-policies": "none",
        "x-xss-protection": "0",
        "vary": "Origin",
        "access-control-allow-credentials": "true",
        "access-control-expose-headers": "Content-Length,Content-Type,X-Request-Id,X-Response-Time",
        "content-security-policy": "default-src 'none'",
        "content-type": "text/html; charset=utf-8",
        "content-length": "155",
        "date": "Mon, 23 Jun 2025 02:34:04 GMT",
        "connection": "keep-alive",
        "keep-alive": "timeout=5"
      }
    }
  },
  "websockets": {
    "Kismet Operations WebSocket": {
      "success": false,
      "error": "Unexpected status: 400"
    },
    "WigleToTAK WebSocket": {
      "success": false,
      "error": "WebSocket test timeout"
    }
  },
  "integration": {
    "Spectrum → Kismet WebSocket relay": {
      "success": true,
      "statusCode": 200,
      "data": "{\"connected\":false,\"buffer_size\":0,\"config\":{\"fft_size\":0,\"center_freq\":145000000,\"samp_rate\":2400000,\"fft_compression\":\"none\",\"signal_threshold\":-70},\"last_update\":null,\"last_signal_detection\":null,\"signal_history_length\":0,\"reconnect_attempts\":0,\"max_buffer_size\":1000,\"server_uptime\":274.59982475,\"connected_clients\":0,\"mode\":\"DEMO MODE\",\"openwebrx_connected\":false,\"real_data\":false,\"fft_buffer_size\":0,\"last_fft_time\":null}",
      "headers": {
        "referrer-policy": "no-referrer",
        "x-content-type-options": "nosniff",
        "x-dns-prefetch-control": "off",
        "x-download-options": "noopen",
        "x-permitted-cross-domain-policies": "none",
        "x-xss-protection": "0",
        "vary": "Origin",
        "access-control-allow-credentials": "true",
        "access-control-expose-headers": "Content-Length,Content-Type,X-Request-Id,X-Response-Time",
        "content-type": "application/json; charset=utf-8",
        "content-length": "428",
        "etag": "W/\"1ac-ynN6vLnandePDMBe1voiHoV4+as\"",
        "date": "Mon, 23 Jun 2025 02:34:07 GMT",
        "connection": "keep-alive",
        "keep-alive": "timeout=5"
      }
    },
    "WigleToTAK file listing": {
      "success": false,
      "statusCode": 404,
      "data": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot GET /list_wigle_files</pre>\n</body>\n</html>\n",
      "headers": {
        "referrer-policy": "no-referrer",
        "x-content-type-options": "nosniff",
        "x-dns-prefetch-control": "off",
        "x-download-options": "noopen",
        "x-permitted-cross-domain-policies": "none",
        "x-xss-protection": "0",
        "vary": "Origin",
        "access-control-allow-credentials": "true",
        "access-control-expose-headers": "Content-Length,Content-Type,X-Request-Id,X-Response-Time",
        "content-security-policy": "default-src 'none'",
        "content-type": "text/html; charset=utf-8",
        "content-length": "155",
        "date": "Mon, 23 Jun 2025 02:34:07 GMT",
        "connection": "keep-alive",
        "keep-alive": "timeout=5"
      }
    }
  },
  "compatibility": {
    "Legacy status endpoint": {
      "name": "Legacy status endpoint",
      "port": 8003,
      "path": "/api/status",
      "success": true,
      "statusCode": 200
    },
    "Legacy VHF scan": {
      "name": "Legacy VHF scan",
      "port": 8003,
      "path": "/api/scan/vhf",
      "success": true,
      "statusCode": 200
    },
    "WigleToTAK status": {
      "name": "WigleToTAK status",
      "port": 8002,
      "path": "/api/status",
      "success": true,
      "statusCode": 200
    }
  },
  "performance": {
    "8003/api/status": {
      "endpoint": "8003/api/status",
      "duration": 6,
      "success": true,
      "acceptable": true
    },
    "8003/health": {
      "endpoint": "8003/health",
      "duration": 4,
      "success": true,
      "acceptable": true
    },
    "8002/list_wigle_files": {
      "endpoint": "8002/list_wigle_files",
      "duration": 4,
      "success": false,
      "acceptable": true
    }
  }
}